// FRAGMENT SHADER BEGIN

// GLSL BEGIN

#version 300 es
precision highp float;

layout(location = 0) out vec4 fragColor;

uniform vec2 iResolution;

uniform float iTime;

uniform float iTimeDelta;

uniform vec4 iMouse;

uniform int iFrame;

bool live_tu_has_executed = false;

vec4 fragColor_1;

float stretch_1, gunsUp_1, gunsForward_1, edWalk_1, edTwist_1, edDown_1, edShoot_1, doorOpen_1, glow_1 = 0.0;

struct MarchData_1 {
float d;
vec3 mat;
float specPower;
} ;

vec4 fragColor_2;

void main()
{
vec3 ro_mainImage_1;
vec3 lookAt_mainImage_1;
vec3 col_mainImage_1;
float startScene_mainImage_1;
float endScene_mainImage_1;
float dim_mainImage_1;
float time_mainImage_1;
bool edZ_has_returned_1;
float edZ_return_value_1;
float edZ_return_value_inlined_93_1;
float f_remap_1;
float in1_remap_1;
float in2_remap_1;
float out1_remap_1;
float out2_remap_1;
bool remap_has_returned_1;
float remap_return_value_1;
float remap_return_value_inlined_94_1;
float t_mainImage_1;
float remap_return_value_inlined_95_1;
float edZ_return_value_inlined_96_1;
float edZ_return_value_inlined_97_1;
float edZ_return_value_inlined_98_1;
float edZ_return_value_inlined_99_1;
float edZ_return_value_inlined_100_1;
float edZ_return_value_inlined_101_1;
float remap_return_value_inlined_102_1;
float edZ_return_value_inlined_103_1;
float remap_return_value_inlined_104_1;
float remap_return_value_inlined_105_1;
float edZ_return_value_inlined_106_1;
float remap_return_value_inlined_107_1;
float remap_return_value_inlined_108_1;
float ternary_0_mainImage_1;
float remap_return_value_inlined_109_1;
vec2 coord_mainImage_1;
bool fireShock_has_returned_1;
float fireShock_return_value_1;
float fireShock_return_value_inlined_110_1;
vec2 uv_mainImage_1;
vec3 ro_getRayDir_1;
vec3 lookAt_getRayDir_1;
vec2 uv_getRayDir_1;
bool getRayDir_has_returned_1;
vec3 getRayDir_return_value_1;
vec3 forward_getRayDir_1;
vec3 right_getRayDir_1;
vec3 getRayDir_return_value_inlined_111_1;
vec3 ro_getSceneColor_1;
vec3 rd_getSceneColor_1;
bool getSceneColor_has_returned_1;
vec3 getSceneColor_return_value_1;
vec3 p_getSceneColor_1;
float g_getSceneColor_1;
float d_getSceneColor_1;
MarchData_1 h_getSceneColor_1;
float steps_getSceneColor_1;
vec3 p_map_1;
bool map_has_returned_1;
MarchData_1 map_return_value_1;
vec3 p_room_1;
bool room_has_returned_1;
MarchData_1 room_return_value_1;
const vec3 frameInner_room_1 = vec3(2.8, 2.6, .1);
MarchData_1 r_room_1;
vec2 xy_room_1;
float doorFrame_room_1;
float doorWidth_room_1;
float door_room_1;
float d_room_1;
vec3 p_sdBox_1;
vec3 b_sdBox_1;
bool sdBox_has_returned_1;
float sdBox_return_value_1;
vec3 q_sdBox_1;
float sdBox_return_value_inlined_69_1;
float doorHole_room_1;
float backWall_room_1;
vec2 p_sdOctogon_1;
float r_sdOctogon_1;
bool sdOctogon_has_returned_1;
float sdOctogon_return_value_1;
const vec3 k_sdOctogon_1 = vec3(- .92387953, .38268343, .41421356);
float sdOctogon_return_value_inlined_70_1;
float sdOctogon_return_value_inlined_71_1;
float ocp_room_1;
float sdOctogon_return_value_inlined_72_1;
float sdBox_return_value_inlined_73_1;
float a_rot_1;
bool rot_has_returned_1;
mat2 rot_return_value_1;
float c_rot_1;
float s_rot_1;
mat2 rot_return_value_inlined_74_1;
float sdBox_return_value_inlined_75_1;
float sdBox_return_value_inlined_76_1;
float sdBox_return_value_inlined_77_1;
MarchData_1 room_return_value_inlined_78_1;
vec3 p_ed209_1;
bool ed209_has_returned_1;
MarchData_1 ed209_return_value_1;
float f_legWalkAngle_1;
bool legWalkAngle_has_returned_1;
float legWalkAngle_return_value_1;
float legWalkAngle_return_value_inlined_54_1;
float edZ_return_value_inlined_55_1;
vec3 p_legs_1;
bool legs_has_returned_1;
MarchData_1 legs_return_value_1;
MarchData_1 r_legs_1;
MarchData_1 mat_setBodyMaterial_1;
float silver_legs_1;
float legWalkAngle_return_value_inlined_45_1;
float legAngle_legs_1;
mat2 rot_return_value_inlined_46_1;
mat2 rot_return_value_inlined_47_1;
mat2 rot_return_value_inlined_48_1;
vec3 cp_legs_1;
vec3 pp_legs_1;
mat2 rot_return_value_inlined_49_1;
float sdBox_return_value_inlined_50_1;
float sdBox_return_value_inlined_51_1;
vec3 p_sdChamferedCube_1;
vec3 r_sdChamferedCube_1;
float c_sdChamferedCube_1;
bool sdChamferedCube_has_returned_1;
float sdChamferedCube_return_value_1;
float sdBox_return_value_inlined_0_1;
float cube_sdChamferedCube_1;
mat2 rot_return_value_inlined_1_1;
float sdBox_return_value_inlined_2_1;
float sdChamferedCube_return_value_inlined_52_1;
vec3 p_foot_1;
bool foot_has_returned_1;
float foot_return_value_1;
mat2 rot_return_value_inlined_29_1;
vec3 p_toe_1;
bool toe_has_returned_1;
float toe_return_value_1;
float sdBox_return_value_inlined_28_1;
float toe_return_value_inlined_30_1;
float d_foot_1;
mat2 rot_return_value_inlined_31_1;
float toe_return_value_inlined_32_1;
float foot_return_value_inlined_53_1;
MarchData_1 legs_return_value_inlined_56_1;
MarchData_1 r_ed209_1;
float f_ed209_1;
float slide_ed209_1;
float fireShock_return_value_inlined_57_1;
vec3 p_waist_1;
bool waist_has_returned_1;
MarchData_1 waist_return_value_1;
MarchData_1 r_waist_1;
mat2 rot_return_value_inlined_33_1;
float bump_waist_1;
float d_waist_1;
float legWalkAngle_return_value_inlined_34_1;
float legAngle_waist_1;
mat2 rot_return_value_inlined_35_1;
vec3 pp_waist_1;
vec3 p_sdCappedCylinder_1;
float h_sdCappedCylinder_1;
float r_sdCappedCylinder_1;
bool sdCappedCylinder_has_returned_1;
float sdCappedCylinder_return_value_1;
vec2 d_sdCappedCylinder_1;
float sdCappedCylinder_return_value_inlined_36_1;
float sdBox_return_value_inlined_37_1;
float sdCappedCylinder_return_value_inlined_38_1;
mat2 rot_return_value_inlined_39_1;
float sdCappedCylinder_return_value_inlined_40_1;
float sdBox_return_value_inlined_41_1;
float sdCappedCylinder_return_value_inlined_42_1;
float sdCappedCylinder_return_value_inlined_43_1;
float sdBox_return_value_inlined_44_1;
MarchData_1 waist_return_value_inlined_58_1;
MarchData_1 a_minResult_1;
MarchData_1 b_minResult_1;
bool minResult_has_returned_1;
MarchData_1 minResult_return_value_1;
MarchData_1 minResult_return_value_inlined_59_1;
float legWalkAngle_return_value_inlined_60_1;
mat2 rot_return_value_inlined_61_1;
mat2 rot_return_value_inlined_62_1;
vec3 p_headLower_1;
bool headLower_has_returned_1;
MarchData_1 headLower_return_value_1;
vec3 op_headLower_1;
vec3 p_headVisor_1;
float h_headVisor_1;
float bump_headVisor_1;
bool headVisor_has_returned_1;
MarchData_1 headVisor_return_value_1;
MarchData_1 result_headVisor_1;
float sdBox_return_value_inlined_3_1;
vec3 p_headSphere_1;
bool headSphere_has_returned_1;
float headSphere_return_value_1;
float headSphere_return_value_inlined_4_1;
MarchData_1 headVisor_return_value_inlined_5_1;
MarchData_1 r_headLower_1;
MarchData_1 headVisor_return_value_inlined_6_1;
mat2 rot_return_value_inlined_7_1;
float sdBox_return_value_inlined_8_1;
float sdBox_return_value_inlined_9_1;
float sdCappedCylinder_return_value_inlined_10_1;
float sdCappedCylinder_return_value_inlined_11_1;
MarchData_1 headLower_return_value_inlined_63_1;
MarchData_1 minResult_return_value_inlined_64_1;
MarchData_1 headVisor_return_value_inlined_65_1;
MarchData_1 minResult_return_value_inlined_66_1;
vec3 p_arms_1;
bool arms_has_returned_1;
MarchData_1 arms_return_value_1;
const vec3 wrist_arms_1 = vec3(1.5, 0, 0) - vec3(0, 0, .3);
MarchData_1 r_arms_1;
mat2 rot_return_value_inlined_23_1;
vec3 p_sdCapsule_1;
vec3 a_sdCapsule_1;
vec3 b_sdCapsule_1;
float r_sdCapsule_1;
bool sdCapsule_has_returned_1;
float sdCapsule_return_value_1;
vec3 pa_sdCapsule_1;
vec3 ba_sdCapsule_1;
float sdCapsule_return_value_inlined_24_1;
float sdCapsule_return_value_inlined_25_1;
vec3 p_gunPod_1;
bool gunPod_has_returned_1;
MarchData_1 gunPod_return_value_1;
MarchData_1 r_gunPod_1;
vec3 pp_gunPod_1;
vec3 p_sdCappedCone_1;
vec3 a_sdCappedCone_1;
vec3 b_sdCappedCone_1;
float ra_sdCappedCone_1;
float rb_sdCappedCone_1;
bool sdCappedCone_has_returned_1;
float sdCappedCone_return_value_1;
float rba_sdCappedCone_1;
float baba_sdCappedCone_1;
float papa_sdCappedCone_1;
float paba_sdCappedCone_1;
float x_sdCappedCone_1;
float cax_sdCappedCone_1;
float cay_sdCappedCone_1;
float f_sdCappedCone_1;
float cbx_sdCappedCone_1;
float cby_sdCappedCone_1;
float sdCappedCone_return_value_inlined_12_1;
float sdCappedCylinder_return_value_inlined_13_1;
vec3 p_sdTriPrism_1;
vec2 h_sdTriPrism_1;
bool sdTriPrism_has_returned_1;
float sdTriPrism_return_value_1;
vec3 q_sdTriPrism_1;
float sdTriPrism_return_value_inlined_14_1;
mat2 rot_return_value_inlined_15_1;
float fs_gunPod_1;
float bump_gunPod_1;
float sdBox_return_value_inlined_16_1;
float d_gunPod_1;
float sdCappedCylinder_return_value_inlined_17_1;
float sdCappedCylinder_return_value_inlined_18_1;
float sdBox_return_value_inlined_19_1;
float sdCappedCylinder_return_value_inlined_20_1;
float fireShock_return_value_inlined_21_1;
float sdCappedCylinder_return_value_inlined_22_1;
MarchData_1 gunPod_return_value_inlined_26_1;
MarchData_1 minResult_return_value_inlined_27_1;
MarchData_1 arms_return_value_inlined_67_1;
MarchData_1 minResult_return_value_inlined_68_1;
MarchData_1 ed209_return_value_inlined_79_1;
MarchData_1 minResult_return_value_inlined_80_1;
MarchData_1 r_map_1;
float gnd_map_1;
MarchData_1 map_return_value_inlined_90_1;
vec3 p_applyLighting_1;
vec3 rd_applyLighting_1;
float d_applyLighting_1;
MarchData_1 data_applyLighting_1;
bool applyLighting_has_returned_1;
vec3 applyLighting_return_value_1;
vec3 sunDir_applyLighting_1;
vec3 p_calcNormal_1;
float t_calcNormal_1;
bool calcNormal_has_returned_1;
vec3 calcNormal_return_value_1;
float d_calcNormal_1;
vec2 e_calcNormal_1;
MarchData_1 map_return_value_inlined_82_1;
MarchData_1 map_return_value_inlined_83_1;
MarchData_1 map_return_value_inlined_84_1;
MarchData_1 map_return_value_inlined_85_1;
vec3 calcNormal_return_value_inlined_87_1;
vec3 n_applyLighting_1;
float primary_applyLighting_1;
float bounce_applyLighting_1;
float spe_applyLighting_1;
float fre_applyLighting_1;
float fog_applyLighting_1;
vec3 p_calcShadow_1;
vec3 lightPos_calcShadow_1;
bool calcShadow_has_returned_1;
float calcShadow_return_value_1;
vec3 rd_calcShadow_1;
float res_calcShadow_1;
float t_calcShadow_1;
float i_calcShadow_1;
MarchData_1 map_return_value_inlined_81_1;
float h_calcShadow_1;
float calcShadow_return_value_inlined_88_1;
vec3 p_ao_1;
vec3 n_ao_1;
float h_ao_1;
bool ao_has_returned_1;
float ao_return_value_1;
MarchData_1 map_return_value_inlined_86_1;
float ao_return_value_inlined_89_1;
vec3 applyLighting_return_value_inlined_91_1;
float fireShock_return_value_inlined_92_1;
vec3 getSceneColor_return_value_inlined_112_1;
vec3 col_vignette_1;
vec2 fragCoord_vignette_1;
bool vignette_has_returned_1;
vec3 vignette_return_value_1;
vec2 q_vignette_1;
vec3 vignette_return_value_inlined_113_1;
edWalk_1 = 1.;
edTwist_1 = 0.;
edDown_1 = 0.;
edShoot_1 = 0.;
doorOpen_1 = 1.;
stretch_1 = 1.;
time_mainImage_1 = mod(iTime + 4., 55.);
if(time_mainImage_1 < 12.)
{
startScene_mainImage_1 = 0.;
endScene_mainImage_1 = 12.;
edWalk_1 = 0.;
ro_mainImage_1 = vec3(0, - 1.5, - .625);
edZ_has_returned_1 = false;
edZ_return_value_1 = mix(5., - 2., edWalk_1);
edZ_has_returned_1 = true;
edZ_return_value_inlined_93_1 = edZ_return_value_1;
lookAt_mainImage_1 = vec3(0, - 1, edZ_return_value_inlined_93_1);
doorOpen_1 = smoothstep(0., 1., time_mainImage_1 / 5.);
f_remap_1 = time_mainImage_1;
in1_remap_1 = 7.;
in2_remap_1 = 10.;
out1_remap_1 = 0.;
out2_remap_1 = 1.;
remap_has_returned_1 = false;
remap_return_value_1 = mix(out1_remap_1, out2_remap_1, clamp((f_remap_1 - in1_remap_1) / (in2_remap_1 - in1_remap_1), 0., 1.));
remap_has_returned_1 = true;
remap_return_value_inlined_94_1 = remap_return_value_1;
stretch_1 = remap_return_value_inlined_94_1;
}
else
{
if(time_mainImage_1 < 25.)
{
startScene_mainImage_1 = 12.;
endScene_mainImage_1 = 25.;
t_mainImage_1 = time_mainImage_1 - startScene_mainImage_1;
f_remap_1 = t_mainImage_1;
in1_remap_1 = 3.;
in2_remap_1 = 8.;
out1_remap_1 = 0.;
out2_remap_1 = 1.;
remap_has_returned_1 = false;
remap_return_value_1 = mix(out1_remap_1, out2_remap_1, clamp((f_remap_1 - in1_remap_1) / (in2_remap_1 - in1_remap_1), 0., 1.));
remap_has_returned_1 = true;
remap_return_value_inlined_95_1 = remap_return_value_1;
edWalk_1 = smoothstep(0., 1., remap_return_value_inlined_95_1);
edZ_has_returned_1 = false;
edZ_return_value_1 = mix(5., - 2., edWalk_1);
edZ_has_returned_1 = true;
edZ_return_value_inlined_96_1 = edZ_return_value_1;
ro_mainImage_1 = vec3(- .5 * cos(t_mainImage_1 * .7), .5 - t_mainImage_1 * .1, edZ_return_value_inlined_96_1 - 3.);
edZ_has_returned_1 = false;
edZ_return_value_1 = mix(5., - 2., edWalk_1);
edZ_has_returned_1 = true;
edZ_return_value_inlined_97_1 = edZ_return_value_1;
lookAt_mainImage_1 = vec3(0, 0, edZ_return_value_inlined_97_1);
}
else
{
if(time_mainImage_1 < 29.)
{
startScene_mainImage_1 = 25.;
endScene_mainImage_1 = 29.;
edZ_has_returned_1 = false;
edZ_return_value_1 = mix(5., - 2., edWalk_1);
edZ_has_returned_1 = true;
edZ_return_value_inlined_98_1 = edZ_return_value_1;
ro_mainImage_1 = vec3(- 2, .5 + (time_mainImage_1 - startScene_mainImage_1) * .1, edZ_return_value_inlined_98_1 - 3.);
edZ_has_returned_1 = false;
edZ_return_value_1 = mix(5., - 2., edWalk_1);
edZ_has_returned_1 = true;
edZ_return_value_inlined_99_1 = edZ_return_value_1;
lookAt_mainImage_1 = vec3(0, 0, edZ_return_value_inlined_99_1);
}
else
{
if(time_mainImage_1 < 37.)
{
startScene_mainImage_1 = 29.;
endScene_mainImage_1 = 37.;
t_mainImage_1 = time_mainImage_1 - startScene_mainImage_1;
edZ_has_returned_1 = false;
edZ_return_value_1 = mix(5., - 2., edWalk_1);
edZ_has_returned_1 = true;
edZ_return_value_inlined_100_1 = edZ_return_value_1;
ro_mainImage_1 = vec3(1.5, - 1. - t_mainImage_1 * .05, edZ_return_value_inlined_100_1 - 5.);
edZ_has_returned_1 = false;
edZ_return_value_1 = mix(5., - 2., edWalk_1);
edZ_has_returned_1 = true;
edZ_return_value_inlined_101_1 = edZ_return_value_1;
lookAt_mainImage_1 = vec3(0, - 1, edZ_return_value_inlined_101_1);
f_remap_1 = t_mainImage_1;
in1_remap_1 = 2.;
in2_remap_1 = 5.;
out1_remap_1 = 1.;
out2_remap_1 = 0.;
remap_has_returned_1 = false;
remap_return_value_1 = mix(out1_remap_1, out2_remap_1, clamp((f_remap_1 - in1_remap_1) / (in2_remap_1 - in1_remap_1), 0., 1.));
remap_has_returned_1 = true;
remap_return_value_inlined_102_1 = remap_return_value_1;
stretch_1 = remap_return_value_inlined_102_1;
}
else
{
if(time_mainImage_1 < 55.)
{
startScene_mainImage_1 = 37.;
endScene_mainImage_1 = 55.;
t_mainImage_1 = time_mainImage_1 - startScene_mainImage_1;
edZ_has_returned_1 = false;
edZ_return_value_1 = mix(5., - 2., edWalk_1);
edZ_has_returned_1 = true;
edZ_return_value_inlined_103_1 = edZ_return_value_1;
ro_mainImage_1 = vec3(- 1.8, - .5, edZ_return_value_inlined_103_1 - 2.5);
f_remap_1 = t_mainImage_1;
in1_remap_1 = 2.;
in2_remap_1 = 3.;
out1_remap_1 = 0.;
out2_remap_1 = 1.;
remap_has_returned_1 = false;
remap_return_value_1 = mix(out1_remap_1, out2_remap_1, clamp((f_remap_1 - in1_remap_1) / (in2_remap_1 - in1_remap_1), 0., 1.));
remap_has_returned_1 = true;
remap_return_value_inlined_104_1 = remap_return_value_1;
f_remap_1 = t_mainImage_1;
in1_remap_1 = 11.5;
in2_remap_1 = 14.5;
out1_remap_1 = 0.;
out2_remap_1 = 1.;
remap_has_returned_1 = false;
remap_return_value_1 = mix(out1_remap_1, out2_remap_1, clamp((f_remap_1 - in1_remap_1) / (in2_remap_1 - in1_remap_1), 0., 1.));
remap_has_returned_1 = true;
remap_return_value_inlined_105_1 = remap_return_value_1;
stretch_1 = remap_return_value_inlined_104_1 - remap_return_value_inlined_105_1;
edZ_has_returned_1 = false;
edZ_return_value_1 = mix(5., - 2., edWalk_1);
edZ_has_returned_1 = true;
edZ_return_value_inlined_106_1 = edZ_return_value_1;
lookAt_mainImage_1 = vec3(0, stretch_1 * .5 - .5, edZ_return_value_inlined_106_1);
f_remap_1 = t_mainImage_1;
in1_remap_1 = 3.;
in2_remap_1 = 3.2;
out1_remap_1 = 0.;
out2_remap_1 = 1.;
remap_has_returned_1 = false;
remap_return_value_1 = mix(out1_remap_1, out2_remap_1, clamp((f_remap_1 - in1_remap_1) / (in2_remap_1 - in1_remap_1), 0., 1.));
remap_has_returned_1 = true;
remap_return_value_inlined_107_1 = remap_return_value_1;
edTwist_1 = remap_return_value_inlined_107_1 * stretch_1;
f_remap_1 = t_mainImage_1;
in1_remap_1 = 3.2;
in2_remap_1 = 3.4;
out1_remap_1 = 0.;
out2_remap_1 = 1.;
remap_has_returned_1 = false;
remap_return_value_1 = mix(out1_remap_1, out2_remap_1, clamp((f_remap_1 - in1_remap_1) / (in2_remap_1 - in1_remap_1), 0., 1.));
remap_has_returned_1 = true;
remap_return_value_inlined_108_1 = remap_return_value_1;
edDown_1 = remap_return_value_inlined_108_1 * stretch_1;
if(t_mainImage_1 <= 9.5)
{
f_remap_1 = t_mainImage_1;
in1_remap_1 = 4.;
in2_remap_1 = 9.5;
out1_remap_1 = 0.;
out2_remap_1 = 1.;
remap_has_returned_1 = false;
remap_return_value_1 = mix(out1_remap_1, out2_remap_1, clamp((f_remap_1 - in1_remap_1) / (in2_remap_1 - in1_remap_1), 0., 1.));
remap_has_returned_1 = true;
remap_return_value_inlined_109_1 = remap_return_value_1;
ternary_0_mainImage_1 = remap_return_value_inlined_109_1;
}
else
{
ternary_0_mainImage_1 = 0.;
}
edShoot_1 = ternary_0_mainImage_1;
}
}
}
}
}
dim_mainImage_1 = 1. - cos(min(1., 2. * min(abs(time_mainImage_1 - startScene_mainImage_1), abs(time_mainImage_1 - endScene_mainImage_1))) * 1.5705);
col_mainImage_1 = vec3(0);
coord_mainImage_1 = gl_FragCoord.xy;
fireShock_has_returned_1 = false;
fireShock_return_value_1 = abs(sin(edShoot_1 * 78.5375));
fireShock_has_returned_1 = true;
fireShock_return_value_inlined_110_1 = fireShock_return_value_1;
coord_mainImage_1 += (fract(fireShock_return_value_inlined_110_1 * vec2(23242.232, 978.23465)) - .5) * 10.;
uv_mainImage_1 = (coord_mainImage_1 - .5 * iResolution.xy) / iResolution.y;
ro_getRayDir_1 = ro_mainImage_1;
lookAt_getRayDir_1 = lookAt_mainImage_1;
uv_getRayDir_1 = uv_mainImage_1;
getRayDir_has_returned_1 = false;
forward_getRayDir_1 = normalize(lookAt_getRayDir_1 - ro_getRayDir_1);
right_getRayDir_1 = normalize(cross(vec3(0, 1, 0), forward_getRayDir_1));
getRayDir_return_value_1 = normalize(forward_getRayDir_1 + right_getRayDir_1 * uv_getRayDir_1.x + cross(forward_getRayDir_1, right_getRayDir_1) * uv_getRayDir_1.y);
getRayDir_has_returned_1 = true;
getRayDir_return_value_inlined_111_1 = getRayDir_return_value_1;
ro_getSceneColor_1 = ro_mainImage_1;
rd_getSceneColor_1 = getRayDir_return_value_inlined_111_1;
getSceneColor_has_returned_1 = false;
d_getSceneColor_1 = .01;
for( steps_getSceneColor_1 = 0.;
(! getSceneColor_has_returned_1) && steps_getSceneColor_1 < 120.; steps_getSceneColor_1 ++)
{
p_getSceneColor_1 = ro_getSceneColor_1 + rd_getSceneColor_1 * d_getSceneColor_1;
p_map_1 = p_getSceneColor_1;
map_has_returned_1 = false;
p_room_1 = p_map_1;
room_has_returned_1 = false;
r_room_1.mat = vec3(.4);
r_room_1.specPower = 1e7;
xy_room_1 = p_room_1.xy - vec2(0, 2);
p_room_1.x = abs(p_room_1.x);
p_room_1.yz += vec2(.5, - 3.4);
p_sdBox_1 = p_room_1;
b_sdBox_1 = frameInner_room_1 + vec3(0, 0, 1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_69_1 = sdBox_return_value_1;
doorHole_room_1 = sdBox_return_value_inlined_69_1;
backWall_room_1 = length(p_room_1.z - 8.);
r_room_1.d = min(backWall_room_1, max(length(p_room_1.z), - doorHole_room_1 + .1));
if(r_room_1.d == backWall_room_1)
{
p_sdOctogon_1 = xy_room_1;
r_sdOctogon_1 = 2.6;
sdOctogon_has_returned_1 = false;
p_sdOctogon_1 = abs(p_sdOctogon_1);
p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
sdOctogon_has_returned_1 = true;
sdOctogon_return_value_inlined_70_1 = sdOctogon_return_value_1;
p_sdOctogon_1 = xy_room_1;
r_sdOctogon_1 = 1.9;
sdOctogon_has_returned_1 = false;
p_sdOctogon_1 = abs(p_sdOctogon_1);
p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
sdOctogon_has_returned_1 = true;
sdOctogon_return_value_inlined_71_1 = sdOctogon_return_value_1;
ocp_room_1 = min(abs(sdOctogon_return_value_inlined_70_1), abs(sdOctogon_return_value_inlined_71_1));
p_sdOctogon_1 = xy_room_1;
r_sdOctogon_1 = 1.2;
sdOctogon_has_returned_1 = false;
p_sdOctogon_1 = abs(p_sdOctogon_1);
p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
sdOctogon_has_returned_1 = true;
sdOctogon_return_value_inlined_72_1 = sdOctogon_return_value_1;
ocp_room_1 = min(max(ocp_room_1, min(.7 - abs(xy_room_1.x + 1.2), - xy_room_1.y)), max(abs(sdOctogon_return_value_inlined_72_1), min(xy_room_1.x, .7 - abs(xy_room_1.y))));
if(ocp_room_1 < .3)
{
r_room_1.mat = vec3(.39, .57, .71);
}
}
p_sdBox_1 = p_room_1;
b_sdBox_1 = frameInner_room_1 + vec3(.4, .4, .1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_73_1 = sdBox_return_value_1;
doorFrame_room_1 = max(sdBox_return_value_inlined_73_1, - doorHole_room_1);
doorWidth_room_1 = frameInner_room_1.x * .5;
p_room_1.x -= frameInner_room_1.x;
a_rot_1 = doorOpen_1 * 2.1;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_74_1 = rot_return_value_1;
p_room_1.xz *= rot_return_value_inlined_74_1;
p_room_1.x += doorWidth_room_1;
p_sdBox_1 = p_room_1;
b_sdBox_1 = vec3(doorWidth_room_1, frameInner_room_1.yz);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_75_1 = sdBox_return_value_1;
door_room_1 = sdBox_return_value_inlined_75_1;
p_room_1 = abs(p_room_1) - vec3(doorWidth_room_1 * .5, 1.1, .14);
p_sdBox_1 = p_room_1;
b_sdBox_1 = vec3(.45, .9, .1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_76_1 = sdBox_return_value_1;
p_sdBox_1 = p_room_1;
b_sdBox_1 = vec3(.35, .8, 1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_77_1 = sdBox_return_value_1;
d_room_1 = min(doorFrame_room_1, max(door_room_1, - max(sdBox_return_value_inlined_76_1, - sdBox_return_value_inlined_77_1)));
if(d_room_1 < r_room_1.d)
{
r_room_1.d = d_room_1;
r_room_1.mat = vec3(.02, .02, .024);
r_room_1.specPower = 10.;
}
room_return_value_1 = r_room_1;
room_has_returned_1 = true;
room_return_value_inlined_78_1 = room_return_value_1;
p_ed209_1 = p_map_1;
ed209_has_returned_1 = false;
f_legWalkAngle_1 = 2.;
legWalkAngle_has_returned_1 = false;
legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
legWalkAngle_has_returned_1 = true;
legWalkAngle_return_value_inlined_54_1 = legWalkAngle_return_value_1;
edZ_has_returned_1 = false;
edZ_return_value_1 = mix(5., - 2., edWalk_1);
edZ_has_returned_1 = true;
edZ_return_value_inlined_55_1 = edZ_return_value_1;
p_ed209_1.yz += vec2(legWalkAngle_return_value_inlined_54_1 * .2 + .1, - edZ_return_value_inlined_55_1);
p_legs_1 = p_ed209_1;
legs_has_returned_1 = false;
mat_setBodyMaterial_1 = r_legs_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_legs_1 = mat_setBodyMaterial_1;
f_legWalkAngle_1 = 1.;
legWalkAngle_has_returned_1 = false;
legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
legWalkAngle_has_returned_1 = true;
legWalkAngle_return_value_inlined_45_1 = legWalkAngle_return_value_1;
legAngle_legs_1 = legWalkAngle_return_value_inlined_45_1;
p_legs_1.z += .27;
a_rot_1 = legAngle_legs_1 * sign(p_legs_1.x);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_46_1 = rot_return_value_1;
p_legs_1.yz *= rot_return_value_inlined_46_1;
p_legs_1.z -= .27;
p_legs_1.y += .65;
a_rot_1 = - .2;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_47_1 = rot_return_value_1;
p_legs_1.yz *= rot_return_value_inlined_47_1;
a_rot_1 = legAngle_legs_1 * .3;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_48_1 = rot_return_value_1;
p_legs_1.xy *= rot_return_value_inlined_48_1;
pp_legs_1 = p_legs_1;
pp_legs_1.x = abs(pp_legs_1.x);
pp_legs_1.y += .48;
a_rot_1 = - .58525;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_49_1 = rot_return_value_1;
pp_legs_1.yz *= rot_return_value_inlined_49_1;
pp_legs_1.x -= .98;
cp_legs_1 = pp_legs_1;
p_legs_1 = pp_legs_1;
pp_legs_1.xz = abs(pp_legs_1.xz) - vec2(.12, .25);
p_legs_1.y += .68;
p_legs_1.xy = abs(p_legs_1.xy) - .12;
p_sdBox_1 = p_legs_1;
b_sdBox_1 = vec3(.07, .05, 1.2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_50_1 = sdBox_return_value_1;
silver_legs_1 = sdBox_return_value_inlined_50_1;
cp_legs_1 -= vec3(0, - .7, 0);
p_sdBox_1 = cp_legs_1 - vec3(0, 0, 1.15);
b_sdBox_1 = vec3(.17, .17, .07);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_51_1 = sdBox_return_value_1;
r_legs_1.d = sdBox_return_value_inlined_51_1 - .04;
cp_legs_1.z ++;
p_sdChamferedCube_1 = cp_legs_1.xzy;
r_sdChamferedCube_1 = vec2(.28 - sign(abs(cp_legs_1.z) - .3) * .01, .5).xyx;
c_sdChamferedCube_1 = .18;
sdChamferedCube_has_returned_1 = false;
p_sdBox_1 = p_sdChamferedCube_1;
b_sdBox_1 = r_sdChamferedCube_1;
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_0_1 = sdBox_return_value_1;
cube_sdChamferedCube_1 = sdBox_return_value_inlined_0_1;
a_rot_1 = .78525;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_1_1 = rot_return_value_1;
p_sdChamferedCube_1.xz *= rot_return_value_inlined_1_1;
r_sdChamferedCube_1.xz *= - c_sdChamferedCube_1 / 1.41 + 1.41;
p_sdBox_1 = p_sdChamferedCube_1;
b_sdBox_1 = r_sdChamferedCube_1;
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_2_1 = sdBox_return_value_1;
sdChamferedCube_return_value_1 = max(cube_sdChamferedCube_1, sdBox_return_value_inlined_2_1);
sdChamferedCube_has_returned_1 = true;
sdChamferedCube_return_value_inlined_52_1 = sdChamferedCube_return_value_1;
r_legs_1.d = min(r_legs_1.d, sdChamferedCube_return_value_inlined_52_1);
p_foot_1 = cp_legs_1;
foot_has_returned_1 = false;
p_foot_1.z += .8;
a_rot_1 = .86;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_29_1 = rot_return_value_1;
p_foot_1.yz *= rot_return_value_inlined_29_1;
p_toe_1 = p_foot_1;
toe_has_returned_1 = false;
p_toe_1.yz += vec2(.1, .32);
p_sdBox_1 = p_toe_1;
b_sdBox_1 = vec3(.3 + .2 * (p_toe_1.z - .18) - p_toe_1.y * .228, .3 + .2 * cos((p_toe_1.z - .18) * 3.69), .35);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_28_1 = sdBox_return_value_1;
toe_return_value_1 = max(sdBox_return_value_inlined_28_1, .1 - p_toe_1.y);
toe_has_returned_1 = true;
toe_return_value_inlined_30_1 = toe_return_value_1;
d_foot_1 = toe_return_value_inlined_30_1;
a_rot_1 = 1.57;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_31_1 = rot_return_value_1;
p_foot_1.xz *= rot_return_value_inlined_31_1;
p_foot_1.x -= .43;
p_foot_1.z = .25 - abs(p_foot_1.z);
p_toe_1 = p_foot_1;
toe_has_returned_1 = false;
p_toe_1.yz += vec2(.1, .32);
p_sdBox_1 = p_toe_1;
b_sdBox_1 = vec3(.3 + .2 * (p_toe_1.z - .18) - p_toe_1.y * .228, .3 + .2 * cos((p_toe_1.z - .18) * 3.69), .35);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_28_1 = sdBox_return_value_1;
toe_return_value_1 = max(sdBox_return_value_inlined_28_1, .1 - p_toe_1.y);
toe_has_returned_1 = true;
toe_return_value_inlined_32_1 = toe_return_value_1;
foot_return_value_1 = min(d_foot_1, toe_return_value_inlined_32_1);
foot_has_returned_1 = true;
foot_return_value_inlined_53_1 = foot_return_value_1;
r_legs_1.d = min(r_legs_1.d, foot_return_value_inlined_53_1);
if(silver_legs_1 < r_legs_1.d)
{
r_legs_1.d = silver_legs_1;
r_legs_1.mat = vec3(.8);
}
legs_return_value_1 = r_legs_1;
legs_has_returned_1 = true;
legs_return_value_inlined_56_1 = legs_return_value_1;
r_ed209_1 = legs_return_value_inlined_56_1;
f_ed209_1 = min(stretch_1 * 2., 1.);
slide_ed209_1 = f_ed209_1 < .5 ? smoothstep(0., .5, f_ed209_1) : (1. - smoothstep(.5, 1., f_ed209_1) * .2);
p_ed209_1.yz -= slide_ed209_1 * .5;
gunsUp_1 = smoothstep(0., 1., clamp((stretch_1 - .66) * 6., 0., 1.));
fireShock_has_returned_1 = false;
fireShock_return_value_1 = abs(sin(edShoot_1 * 78.5375));
fireShock_has_returned_1 = true;
fireShock_return_value_inlined_57_1 = fireShock_return_value_1;
gunsForward_1 = smoothstep(0., 1., clamp((stretch_1 - .83) * 6., 0., 1.)) + fireShock_return_value_inlined_57_1 * .5;
p_waist_1 = p_ed209_1;
waist_has_returned_1 = false;
mat_setBodyMaterial_1 = r_waist_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_waist_1 = mat_setBodyMaterial_1;
p_waist_1.y += .65;
a_rot_1 = - .2;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_33_1 = rot_return_value_1;
p_waist_1.yz *= rot_return_value_inlined_33_1;
f_legWalkAngle_1 = 1.;
legWalkAngle_has_returned_1 = false;
legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
legWalkAngle_has_returned_1 = true;
legWalkAngle_return_value_inlined_34_1 = legWalkAngle_return_value_1;
legAngle_waist_1 = legWalkAngle_return_value_inlined_34_1;
a_rot_1 = legAngle_waist_1 * .3;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_35_1 = rot_return_value_1;
p_waist_1.xy *= rot_return_value_inlined_35_1;
pp_waist_1 = p_waist_1;
pp_waist_1.y += .3;
p_sdCappedCylinder_1 = pp_waist_1.zyx;
h_sdCappedCylinder_1 = .5;
r_sdCappedCylinder_1 = .5;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_36_1 = sdCappedCylinder_return_value_1;
r_waist_1.d = max(sdCappedCylinder_return_value_inlined_36_1, p_waist_1.y + .15);
bump_waist_1 = .5 - abs(sin(p_waist_1.y * 40.)) * .03;
p_sdBox_1 = p_waist_1;
b_sdBox_1 = vec3(bump_waist_1, .15, bump_waist_1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_37_1 = sdBox_return_value_1;
d_waist_1 = sdBox_return_value_inlined_37_1;
bump_waist_1 = .3 - abs(sin(p_waist_1.x * 40.)) * .03;
pp_waist_1.y += .18;
p_sdCappedCylinder_1 = pp_waist_1.zyx;
h_sdCappedCylinder_1 = bump_waist_1;
r_sdCappedCylinder_1 = .75;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_38_1 = sdCappedCylinder_return_value_1;
d_waist_1 = min(d_waist_1, sdCappedCylinder_return_value_inlined_38_1);
pp_waist_1.x = abs(pp_waist_1.x);
a_rot_1 = - .58525 + legAngle_waist_1 * sign(p_waist_1.x);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_39_1 = rot_return_value_1;
pp_waist_1.yz *= rot_return_value_inlined_39_1;
pp_waist_1.x -= .98;
p_sdCappedCylinder_1 = pp_waist_1.zyx;
h_sdCappedCylinder_1 = .4;
r_sdCappedCylinder_1 = .24;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_40_1 = sdCappedCylinder_return_value_1;
r_waist_1.d = min(r_waist_1.d, max(sdCappedCylinder_return_value_inlined_40_1, - pp_waist_1.y));
p_sdBox_1 = pp_waist_1;
b_sdBox_1 = vec3(.24, .2, .14 + .2 * pp_waist_1.y);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_41_1 = sdBox_return_value_1;
r_waist_1.d = min(r_waist_1.d, sdBox_return_value_inlined_41_1);
p_waist_1 = pp_waist_1;
pp_waist_1.xz = abs(pp_waist_1.xz) - vec2(.12, .25);
p_sdCappedCylinder_1 = pp_waist_1.xzy;
h_sdCappedCylinder_1 = .1;
r_sdCappedCylinder_1 = .325;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_42_1 = sdCappedCylinder_return_value_1;
p_sdCappedCylinder_1 = pp_waist_1.xzy;
h_sdCappedCylinder_1 = .05;
r_sdCappedCylinder_1 = .5;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_43_1 = sdCappedCylinder_return_value_1;
r_waist_1.d = min(r_waist_1.d, max(min(sdCappedCylinder_return_value_inlined_42_1, sdCappedCylinder_return_value_inlined_43_1), pp_waist_1.y));
p_waist_1.y += .68;
p_sdBox_1 = p_waist_1;
b_sdBox_1 = vec3(sign(abs(p_waist_1.y) - .04) * .005 + .26, .2, .34);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_44_1 = sdBox_return_value_1;
r_waist_1.d = min(r_waist_1.d, sdBox_return_value_inlined_44_1);
if(d_waist_1 < r_waist_1.d)
{
r_waist_1.d = d_waist_1;
r_waist_1.mat = vec3(.02);
}
waist_return_value_1 = r_waist_1;
waist_has_returned_1 = true;
waist_return_value_inlined_58_1 = waist_return_value_1;
a_minResult_1 = r_ed209_1;
b_minResult_1 = waist_return_value_inlined_58_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
if(! live_tu_has_executed)
{
float an_mainImage_2;
vec3 ro_mainImage_2;
vec3 ta_mainImage_2;
vec3 ww_mainImage_2;
vec3 uu_mainImage_2;
vec3 vv_mainImage_2;
vec3 tot_mainImage_2;
int m_mainImage_2;
int n_mainImage_2;
vec2 o_mainImage_2;
vec2 p_mainImage_2;
vec3 rd_mainImage_2;
const float tmax_mainImage_2 = 5.0;
float t_mainImage_2;
int i_mainImage_2;
vec3 pos_mainImage_2;
vec3 pos_map_2;
bool map_has_returned_2;
float map_return_value_2;
float ra_map_2;
float rb_map_2;
float di_map_2;
vec3 p2_sdDeathStar_2;
float ra_sdDeathStar_2;
float rb_sdDeathStar_2;
float d_sdDeathStar_2;
bool sdDeathStar_has_returned_2;
float sdDeathStar_return_value_2;
vec2 p_sdDeathStar_2;
float a_sdDeathStar_2;
float b_sdDeathStar_2;
float sdDeathStar_return_value_inlined_0_2;
float map_return_value_inlined_6_2;
float h_mainImage_2;
vec3 col_mainImage_2;
vec3 pos_calcNormal_2;
bool calcNormal_has_returned_2;
vec3 calcNormal_return_value_2;
vec2 e_calcNormal_2;
const float eps_calcNormal_2 = 0.0005;
float map_return_value_inlined_2_2;
float map_return_value_inlined_3_2;
float map_return_value_inlined_4_2;
float map_return_value_inlined_5_2;
vec3 calcNormal_return_value_inlined_7_2;
vec3 nor_mainImage_2;
vec3 lig_mainImage_2;
float dif_mainImage_2;
vec3 ro_calcSoftshadow_2;
vec3 rd_calcSoftshadow_2;
float tmin_calcSoftshadow_2;
float tmax_calcSoftshadow_2;
float k_calcSoftshadow_2;
bool calcSoftshadow_has_returned_2;
float calcSoftshadow_return_value_2;
float res_calcSoftshadow_2;
float t_calcSoftshadow_2;
int i_calcSoftshadow_2;
float map_return_value_inlined_1_2;
float h_calcSoftshadow_2;
float calcSoftshadow_return_value_inlined_8_2;
float amb_mainImage_2;
dim_mainImage_1 = 1.0 * sin(0.38 * iTime + 3.0);
b_sdBox_1 = vec3(1.0 * cos(dim_mainImage_1), - 0.1, 1.0 * sin(dim_mainImage_1));
p_sdCappedCylinder_1 = vec3(0.0, 0.0, 0.0);
pp_gunPod_1 = normalize(p_sdCappedCylinder_1 - b_sdBox_1);
p_sdChamferedCube_1 = normalize(cross(pp_gunPod_1, vec3(0.0, 1.0, 0.0)));
ro_getRayDir_1 = normalize(cross(p_sdChamferedCube_1, pp_gunPod_1));
p_applyLighting_1 = vec3(0.0);
for(       m_mainImage_2 = 0;
m_mainImage_2 < 3; m_mainImage_2 ++)
{
for(         n_mainImage_2 = 0;
n_mainImage_2 < 3; n_mainImage_2 ++)
{
coord_mainImage_1 = vec2(float(m_mainImage_2), float(n_mainImage_2)) / float(3) - 0.5;
q_vignette_1 = (2.0 * (gl_FragCoord.xy + coord_mainImage_1) - iResolution.xy) / iResolution.y;
r_sdChamferedCube_1 = normalize(q_vignette_1.x * p_sdChamferedCube_1 + q_vignette_1.y * ro_getRayDir_1 + 1.5 * pp_gunPod_1);
sdCappedCylinder_return_value_inlined_18_1 = 0.0;
for(           i_mainImage_2 = 0;
i_mainImage_2 < 256; i_mainImage_2 ++)
{
p_waist_1 = b_sdBox_1 + sdCappedCylinder_return_value_inlined_18_1 * r_sdChamferedCube_1;
q_sdBox_1 = p_waist_1;
legWalkAngle_has_returned_1 = false;
r_sdOctogon_1 = 0.5;
c_sdChamferedCube_1 = 0.35 + 0.20 * cos(iTime * 1.1 + 4.0);
sdCappedCylinder_return_value_inlined_40_1 = 0.50 + 0.15 * cos(iTime * 1.7);
p_toe_1 = q_sdBox_1;
ternary_0_mainImage_1 = r_sdOctogon_1;
sdBox_return_value_inlined_16_1 = c_sdChamferedCube_1;
edZ_return_value_inlined_97_1 = sdCappedCylinder_return_value_inlined_40_1;
headLower_has_returned_1 = false;
uv_getRayDir_1 = vec2(p_toe_1.x, length(p_toe_1.yz));
doorFrame_room_1 = (ternary_0_mainImage_1 * ternary_0_mainImage_1 - sdBox_return_value_inlined_16_1 * sdBox_return_value_inlined_16_1 + edZ_return_value_inlined_97_1 * edZ_return_value_inlined_97_1) / (2.0 * edZ_return_value_inlined_97_1);
sdCapsule_return_value_inlined_25_1 = sqrt(max(ternary_0_mainImage_1 * ternary_0_mainImage_1 - doorFrame_room_1 * doorFrame_room_1, 0.0));
if(uv_getRayDir_1.x * sdCapsule_return_value_inlined_25_1 - uv_getRayDir_1.y * doorFrame_room_1 > edZ_return_value_inlined_97_1 * max(sdCapsule_return_value_inlined_25_1 - uv_getRayDir_1.y, 0.0))
{
s_rot_1 = length(uv_getRayDir_1 - vec2(doorFrame_room_1, sdCapsule_return_value_inlined_25_1));
headLower_has_returned_1 = true;
}
else
{
s_rot_1 = max((length(uv_getRayDir_1) - ternary_0_mainImage_1), - (length(uv_getRayDir_1 - vec2(edZ_return_value_inlined_97_1, 0)) - sdBox_return_value_inlined_16_1));
headLower_has_returned_1 = true;
}
spe_applyLighting_1 = s_rot_1;
toe_return_value_inlined_30_1 = spe_applyLighting_1;
legWalkAngle_has_returned_1 = true;
sdBox_return_value_1 = toe_return_value_inlined_30_1;
cax_sdCappedCone_1 = sdBox_return_value_1;
if(cax_sdCappedCone_1 < 0.0001 || sdCappedCylinder_return_value_inlined_18_1 > tmax_mainImage_2)
{
break;
}
sdCappedCylinder_return_value_inlined_18_1 += cax_sdCappedCone_1;
}
lookAt_getRayDir_1 = vec3(0.0);
if(sdCappedCylinder_return_value_inlined_18_1 < tmax_mainImage_2)
{
p_waist_1 = b_sdBox_1 + sdCappedCylinder_return_value_inlined_18_1 * r_sdChamferedCube_1;
p_calcNormal_1 = p_waist_1;
applyLighting_has_returned_1 = false;
h_sdTriPrism_1 = vec2(1.0, - 1.0) * 0.5773;
q_sdBox_1 = p_calcNormal_1 + h_sdTriPrism_1.xyy * eps_calcNormal_2;
legWalkAngle_has_returned_1 = false;
r_sdOctogon_1 = 0.5;
c_sdChamferedCube_1 = 0.35 + 0.20 * cos(iTime * 1.1 + 4.0);
sdCappedCylinder_return_value_inlined_40_1 = 0.50 + 0.15 * cos(iTime * 1.7);
p_toe_1 = q_sdBox_1;
ternary_0_mainImage_1 = r_sdOctogon_1;
sdBox_return_value_inlined_16_1 = c_sdChamferedCube_1;
edZ_return_value_inlined_97_1 = sdCappedCylinder_return_value_inlined_40_1;
headLower_has_returned_1 = false;
uv_getRayDir_1 = vec2(p_toe_1.x, length(p_toe_1.yz));
doorFrame_room_1 = (ternary_0_mainImage_1 * ternary_0_mainImage_1 - sdBox_return_value_inlined_16_1 * sdBox_return_value_inlined_16_1 + edZ_return_value_inlined_97_1 * edZ_return_value_inlined_97_1) / (2.0 * edZ_return_value_inlined_97_1);
sdCapsule_return_value_inlined_25_1 = sqrt(max(ternary_0_mainImage_1 * ternary_0_mainImage_1 - doorFrame_room_1 * doorFrame_room_1, 0.0));
if(uv_getRayDir_1.x * sdCapsule_return_value_inlined_25_1 - uv_getRayDir_1.y * doorFrame_room_1 > edZ_return_value_inlined_97_1 * max(sdCapsule_return_value_inlined_25_1 - uv_getRayDir_1.y, 0.0))
{
s_rot_1 = length(uv_getRayDir_1 - vec2(doorFrame_room_1, sdCapsule_return_value_inlined_25_1));
headLower_has_returned_1 = true;
}
else
{
s_rot_1 = max((length(uv_getRayDir_1) - ternary_0_mainImage_1), - (length(uv_getRayDir_1 - vec2(edZ_return_value_inlined_97_1, 0)) - sdBox_return_value_inlined_16_1));
headLower_has_returned_1 = true;
}
spe_applyLighting_1 = s_rot_1;
toe_return_value_inlined_30_1 = spe_applyLighting_1;
legWalkAngle_has_returned_1 = true;
a_rot_1 = toe_return_value_inlined_30_1;
q_sdBox_1 = p_calcNormal_1 + h_sdTriPrism_1.yyx * eps_calcNormal_2;
legWalkAngle_has_returned_1 = false;
r_sdOctogon_1 = 0.5;
c_sdChamferedCube_1 = 0.35 + 0.20 * cos(iTime * 1.1 + 4.0);
sdCappedCylinder_return_value_inlined_40_1 = 0.50 + 0.15 * cos(iTime * 1.7);
p_toe_1 = q_sdBox_1;
ternary_0_mainImage_1 = r_sdOctogon_1;
sdBox_return_value_inlined_16_1 = c_sdChamferedCube_1;
edZ_return_value_inlined_97_1 = sdCappedCylinder_return_value_inlined_40_1;
headLower_has_returned_1 = false;
uv_getRayDir_1 = vec2(p_toe_1.x, length(p_toe_1.yz));
doorFrame_room_1 = (ternary_0_mainImage_1 * ternary_0_mainImage_1 - sdBox_return_value_inlined_16_1 * sdBox_return_value_inlined_16_1 + edZ_return_value_inlined_97_1 * edZ_return_value_inlined_97_1) / (2.0 * edZ_return_value_inlined_97_1);
sdCapsule_return_value_inlined_25_1 = sqrt(max(ternary_0_mainImage_1 * ternary_0_mainImage_1 - doorFrame_room_1 * doorFrame_room_1, 0.0));
if(uv_getRayDir_1.x * sdCapsule_return_value_inlined_25_1 - uv_getRayDir_1.y * doorFrame_room_1 > edZ_return_value_inlined_97_1 * max(sdCapsule_return_value_inlined_25_1 - uv_getRayDir_1.y, 0.0))
{
s_rot_1 = length(uv_getRayDir_1 - vec2(doorFrame_room_1, sdCapsule_return_value_inlined_25_1));
headLower_has_returned_1 = true;
}
else
{
s_rot_1 = max((length(uv_getRayDir_1) - ternary_0_mainImage_1), - (length(uv_getRayDir_1 - vec2(edZ_return_value_inlined_97_1, 0)) - sdBox_return_value_inlined_16_1));
headLower_has_returned_1 = true;
}
spe_applyLighting_1 = s_rot_1;
toe_return_value_inlined_30_1 = spe_applyLighting_1;
legWalkAngle_has_returned_1 = true;
startScene_mainImage_1 = toe_return_value_inlined_30_1;
q_sdBox_1 = p_calcNormal_1 + h_sdTriPrism_1.yxy * eps_calcNormal_2;
legWalkAngle_has_returned_1 = false;
r_sdOctogon_1 = 0.5;
c_sdChamferedCube_1 = 0.35 + 0.20 * cos(iTime * 1.1 + 4.0);
sdCappedCylinder_return_value_inlined_40_1 = 0.50 + 0.15 * cos(iTime * 1.7);
p_toe_1 = q_sdBox_1;
ternary_0_mainImage_1 = r_sdOctogon_1;
sdBox_return_value_inlined_16_1 = c_sdChamferedCube_1;
edZ_return_value_inlined_97_1 = sdCappedCylinder_return_value_inlined_40_1;
headLower_has_returned_1 = false;
uv_getRayDir_1 = vec2(p_toe_1.x, length(p_toe_1.yz));
doorFrame_room_1 = (ternary_0_mainImage_1 * ternary_0_mainImage_1 - sdBox_return_value_inlined_16_1 * sdBox_return_value_inlined_16_1 + edZ_return_value_inlined_97_1 * edZ_return_value_inlined_97_1) / (2.0 * edZ_return_value_inlined_97_1);
sdCapsule_return_value_inlined_25_1 = sqrt(max(ternary_0_mainImage_1 * ternary_0_mainImage_1 - doorFrame_room_1 * doorFrame_room_1, 0.0));
if(uv_getRayDir_1.x * sdCapsule_return_value_inlined_25_1 - uv_getRayDir_1.y * doorFrame_room_1 > edZ_return_value_inlined_97_1 * max(sdCapsule_return_value_inlined_25_1 - uv_getRayDir_1.y, 0.0))
{
s_rot_1 = length(uv_getRayDir_1 - vec2(doorFrame_room_1, sdCapsule_return_value_inlined_25_1));
headLower_has_returned_1 = true;
}
else
{
s_rot_1 = max((length(uv_getRayDir_1) - ternary_0_mainImage_1), - (length(uv_getRayDir_1 - vec2(edZ_return_value_inlined_97_1, 0)) - sdBox_return_value_inlined_16_1));
headLower_has_returned_1 = true;
}
spe_applyLighting_1 = s_rot_1;
toe_return_value_inlined_30_1 = spe_applyLighting_1;
legWalkAngle_has_returned_1 = true;
edZ_return_value_inlined_93_1 = toe_return_value_inlined_30_1;
q_sdBox_1 = p_calcNormal_1 + h_sdTriPrism_1.xxx * eps_calcNormal_2;
legWalkAngle_has_returned_1 = false;
r_sdOctogon_1 = 0.5;
c_sdChamferedCube_1 = 0.35 + 0.20 * cos(iTime * 1.1 + 4.0);
sdCappedCylinder_return_value_inlined_40_1 = 0.50 + 0.15 * cos(iTime * 1.7);
p_toe_1 = q_sdBox_1;
ternary_0_mainImage_1 = r_sdOctogon_1;
sdBox_return_value_inlined_16_1 = c_sdChamferedCube_1;
edZ_return_value_inlined_97_1 = sdCappedCylinder_return_value_inlined_40_1;
headLower_has_returned_1 = false;
uv_getRayDir_1 = vec2(p_toe_1.x, length(p_toe_1.yz));
doorFrame_room_1 = (ternary_0_mainImage_1 * ternary_0_mainImage_1 - sdBox_return_value_inlined_16_1 * sdBox_return_value_inlined_16_1 + edZ_return_value_inlined_97_1 * edZ_return_value_inlined_97_1) / (2.0 * edZ_return_value_inlined_97_1);
sdCapsule_return_value_inlined_25_1 = sqrt(max(ternary_0_mainImage_1 * ternary_0_mainImage_1 - doorFrame_room_1 * doorFrame_room_1, 0.0));
if(uv_getRayDir_1.x * sdCapsule_return_value_inlined_25_1 - uv_getRayDir_1.y * doorFrame_room_1 > edZ_return_value_inlined_97_1 * max(sdCapsule_return_value_inlined_25_1 - uv_getRayDir_1.y, 0.0))
{
s_rot_1 = length(uv_getRayDir_1 - vec2(doorFrame_room_1, sdCapsule_return_value_inlined_25_1));
headLower_has_returned_1 = true;
}
else
{
s_rot_1 = max((length(uv_getRayDir_1) - ternary_0_mainImage_1), - (length(uv_getRayDir_1 - vec2(edZ_return_value_inlined_97_1, 0)) - sdBox_return_value_inlined_16_1));
headLower_has_returned_1 = true;
}
spe_applyLighting_1 = s_rot_1;
toe_return_value_inlined_30_1 = spe_applyLighting_1;
legWalkAngle_has_returned_1 = true;
edZ_return_value_inlined_99_1 = toe_return_value_inlined_30_1;
op_headLower_1 = normalize(h_sdTriPrism_1.xyy * a_rot_1 + h_sdTriPrism_1.yyx * startScene_mainImage_1 + h_sdTriPrism_1.yxy * edZ_return_value_inlined_93_1 + h_sdTriPrism_1.xxx * edZ_return_value_inlined_99_1);
applyLighting_has_returned_1 = true;
a_sdCapsule_1 = op_headLower_1;
p_sdTriPrism_1 = a_sdCapsule_1;
pp_legs_1 = vec3(0.57703);
doorWidth_room_1 = clamp(dot(p_sdTriPrism_1, pp_legs_1), 0.0, 1.0);
if(doorWidth_room_1 > 0.001)
{
p_getSceneColor_1 = p_waist_1 + p_sdTriPrism_1 * 0.001;
p_arms_1 = pp_legs_1;
foot_return_value_1 = 0.001;
x_sdCappedCone_1 = 1.0;
fireShock_return_value_inlined_21_1 = 32.0;
sdOctogon_has_returned_1 = false;
ao_return_value_inlined_89_1 = 1.0;
remap_return_value_inlined_104_1 = foot_return_value_1;
for(               i_calcSoftshadow_2 = 0;
i_calcSoftshadow_2 < 64; i_calcSoftshadow_2 ++)
{
q_sdBox_1 = p_getSceneColor_1 + p_arms_1 * remap_return_value_inlined_104_1;
legWalkAngle_has_returned_1 = false;
r_sdOctogon_1 = 0.5;
c_sdChamferedCube_1 = 0.35 + 0.20 * cos(iTime * 1.1 + 4.0);
sdCappedCylinder_return_value_inlined_40_1 = 0.50 + 0.15 * cos(iTime * 1.7);
p_toe_1 = q_sdBox_1;
ternary_0_mainImage_1 = r_sdOctogon_1;
sdBox_return_value_inlined_16_1 = c_sdChamferedCube_1;
edZ_return_value_inlined_97_1 = sdCappedCylinder_return_value_inlined_40_1;
headLower_has_returned_1 = false;
uv_getRayDir_1 = vec2(p_toe_1.x, length(p_toe_1.yz));
doorFrame_room_1 = (ternary_0_mainImage_1 * ternary_0_mainImage_1 - sdBox_return_value_inlined_16_1 * sdBox_return_value_inlined_16_1 + edZ_return_value_inlined_97_1 * edZ_return_value_inlined_97_1) / (2.0 * edZ_return_value_inlined_97_1);
sdCapsule_return_value_inlined_25_1 = sqrt(max(ternary_0_mainImage_1 * ternary_0_mainImage_1 - doorFrame_room_1 * doorFrame_room_1, 0.0));
if(uv_getRayDir_1.x * sdCapsule_return_value_inlined_25_1 - uv_getRayDir_1.y * doorFrame_room_1 > edZ_return_value_inlined_97_1 * max(sdCapsule_return_value_inlined_25_1 - uv_getRayDir_1.y, 0.0))
{
s_rot_1 = length(uv_getRayDir_1 - vec2(doorFrame_room_1, sdCapsule_return_value_inlined_25_1));
headLower_has_returned_1 = true;
}
else
{
s_rot_1 = max((length(uv_getRayDir_1) - ternary_0_mainImage_1), - (length(uv_getRayDir_1 - vec2(edZ_return_value_inlined_97_1, 0)) - sdBox_return_value_inlined_16_1));
headLower_has_returned_1 = true;
}
spe_applyLighting_1 = s_rot_1;
toe_return_value_inlined_30_1 = spe_applyLighting_1;
legWalkAngle_has_returned_1 = true;
out2_remap_1 = toe_return_value_inlined_30_1;
edZ_return_value_inlined_55_1 = out2_remap_1;
ao_return_value_inlined_89_1 = min(ao_return_value_inlined_89_1, fireShock_return_value_inlined_21_1 * edZ_return_value_inlined_55_1 / remap_return_value_inlined_104_1);
remap_return_value_inlined_104_1 += clamp(edZ_return_value_inlined_55_1, 0.003, 0.10);
if(ao_return_value_inlined_89_1 < 0.002 || remap_return_value_inlined_104_1 > x_sdCappedCone_1)
{
break;
}
}
bounce_applyLighting_1 = clamp(ao_return_value_inlined_89_1, 0.0, 1.0);
sdOctogon_has_returned_1 = true;
sdBox_return_value_inlined_9_1 = bounce_applyLighting_1;
doorWidth_room_1 *= sdBox_return_value_inlined_9_1;
}
calcShadow_return_value_inlined_88_1 = 0.5 + 0.5 * dot(p_sdTriPrism_1, vec3(0.0, 1.0, 0.0));
lookAt_getRayDir_1 = vec3(0.2, 0.3, 0.4) * calcShadow_return_value_inlined_88_1 + vec3(0.8, 0.7, 0.5) * doorWidth_room_1;
}
lookAt_getRayDir_1 = sqrt(lookAt_getRayDir_1);
p_applyLighting_1 += lookAt_getRayDir_1;
}
}
p_applyLighting_1 /= float(3 * 3);
fragColor_2 = vec4(p_applyLighting_1, 1.0);
fragColor_2.w = 1.0;
live_tu_has_executed = true;
}
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_59_1 = minResult_return_value_1;
r_ed209_1 = minResult_return_value_inlined_59_1;
f_legWalkAngle_1 = 2.;
legWalkAngle_has_returned_1 = false;
legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
legWalkAngle_has_returned_1 = true;
legWalkAngle_return_value_inlined_60_1 = legWalkAngle_return_value_1;
a_rot_1 = .1 * (- edDown_1 + legWalkAngle_return_value_inlined_60_1 + smoothstep(0., 1., clamp((stretch_1 - .5) * 6., 0., 1.)) - 1.);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_61_1 = rot_return_value_1;
p_ed209_1.yz *= rot_return_value_inlined_61_1;
a_rot_1 = edTwist_1 * .2;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_62_1 = rot_return_value_1;
p_ed209_1.xz *= rot_return_value_inlined_62_1;
p_headLower_1 = p_ed209_1;
headLower_has_returned_1 = false;
op_headLower_1 = p_headLower_1;
p_headVisor_1 = p_headLower_1 * vec3(.95, - 1.4, .95);
h_headVisor_1 = 1.;
bump_headVisor_1 = 0.;
headVisor_has_returned_1 = false;
bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
p_sdBox_1 = p_headVisor_1;
b_sdBox_1 = vec3(1, h_headVisor_1, 2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
result_headVisor_1.d = sdBox_return_value_inlined_3_1;
p_headSphere_1 = p_headVisor_1;
headSphere_has_returned_1 = false;
headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
headSphere_has_returned_1 = true;
headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
result_headVisor_1.mat = vec3(.05);
result_headVisor_1.specPower = 30.;
headVisor_return_value_1 = result_headVisor_1;
headVisor_has_returned_1 = true;
headVisor_return_value_inlined_5_1 = headVisor_return_value_1;
r_headLower_1 = headVisor_return_value_inlined_5_1;
p_headVisor_1 = (p_headLower_1 + vec3(0, .01, 0)) * vec3(.95);
h_headVisor_1 = 1.;
bump_headVisor_1 = 0.;
headVisor_has_returned_1 = false;
bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
p_sdBox_1 = p_headVisor_1;
b_sdBox_1 = vec3(1, h_headVisor_1, 2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
result_headVisor_1.d = sdBox_return_value_inlined_3_1;
p_headSphere_1 = p_headVisor_1;
headSphere_has_returned_1 = false;
headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
headSphere_has_returned_1 = true;
headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
result_headVisor_1.mat = vec3(.05);
result_headVisor_1.specPower = 30.;
headVisor_return_value_1 = result_headVisor_1;
headVisor_has_returned_1 = true;
headVisor_return_value_inlined_6_1 = headVisor_return_value_1;
r_headLower_1.d = min(r_headLower_1.d, max(max(headVisor_return_value_inlined_6_1.d, p_headLower_1.y - .35), p_headLower_1.y * .625 - p_headLower_1.z - .66));
a_rot_1 = .075 * (gunsUp_1 - 1.) * sign(p_headLower_1.x);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_7_1 = rot_return_value_1;
p_headLower_1.xy *= rot_return_value_inlined_7_1;
p_headLower_1.x = abs(p_headLower_1.x) - 1.33;
p_headLower_1.y -= .1 - p_headLower_1.x * .1;
p_sdBox_1 = p_headLower_1;
b_sdBox_1 = vec3(.4, .06 * (1. - p_headLower_1.x), .3 - p_headLower_1.x * .2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_8_1 = sdBox_return_value_1;
r_headLower_1.d = min(r_headLower_1.d, sdBox_return_value_inlined_8_1);
p_headLower_1 = op_headLower_1;
p_headLower_1.y = abs(abs(p_headLower_1.y + .147) - .0556) - .0278;
p_sdBox_1 = p_headLower_1 + vec3(0, 0, 1.5);
b_sdBox_1 = vec3(mix(.25, .55, - op_headLower_1.y), .015, .1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_9_1 = sdBox_return_value_1;
r_headLower_1.d = max(r_headLower_1.d, - sdBox_return_value_inlined_9_1);
p_headLower_1 = op_headLower_1;
p_headLower_1.y = abs(p_headLower_1.y + .16) - .06;
p_headLower_1.z -= - 1.1;
p_sdCappedCylinder_1 = p_headLower_1.xzy;
h_sdCappedCylinder_1 = 1.;
r_sdCappedCylinder_1 = .03;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_10_1 = sdCappedCylinder_return_value_1;
p_sdCappedCylinder_1 = p_headLower_1.xzy;
h_sdCappedCylinder_1 = .55;
r_sdCappedCylinder_1 = 1.;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_11_1 = sdCappedCylinder_return_value_1;
r_headLower_1.d = max(r_headLower_1.d, - max(max(sdCappedCylinder_return_value_inlined_10_1, - sdCappedCylinder_return_value_inlined_11_1), p_headLower_1.z + .2));
mat_setBodyMaterial_1 = r_headLower_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_headLower_1 = mat_setBodyMaterial_1;
headLower_return_value_1 = r_headLower_1;
headLower_has_returned_1 = true;
headLower_return_value_inlined_63_1 = headLower_return_value_1;
a_minResult_1 = r_ed209_1;
b_minResult_1 = headLower_return_value_inlined_63_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_64_1 = minResult_return_value_1;
p_headVisor_1 = p_ed209_1;
h_headVisor_1 = .8;
bump_headVisor_1 = 1.;
headVisor_has_returned_1 = false;
bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
p_sdBox_1 = p_headVisor_1;
b_sdBox_1 = vec3(1, h_headVisor_1, 2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
result_headVisor_1.d = sdBox_return_value_inlined_3_1;
p_headSphere_1 = p_headVisor_1;
headSphere_has_returned_1 = false;
headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
headSphere_has_returned_1 = true;
headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
result_headVisor_1.mat = vec3(.05);
result_headVisor_1.specPower = 30.;
headVisor_return_value_1 = result_headVisor_1;
headVisor_has_returned_1 = true;
headVisor_return_value_inlined_65_1 = headVisor_return_value_1;
a_minResult_1 = minResult_return_value_inlined_64_1;
b_minResult_1 = headVisor_return_value_inlined_65_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_66_1 = minResult_return_value_1;
p_arms_1 = p_ed209_1;
arms_has_returned_1 = false;
mat_setBodyMaterial_1 = r_arms_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_arms_1 = mat_setBodyMaterial_1;
p_arms_1.x = abs(p_arms_1.x);
p_arms_1.yz += vec2(.24, 0);
a_rot_1 = .15 * (gunsUp_1 - 1.);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_23_1 = rot_return_value_1;
p_arms_1.xy *= rot_return_value_inlined_23_1;
p_sdCapsule_1 = p_arms_1;
a_sdCapsule_1 = vec3(0);
b_sdCapsule_1 = vec3(1.5, 0, 0);
r_sdCapsule_1 = .2;
sdCapsule_has_returned_1 = false;
pa_sdCapsule_1 = p_sdCapsule_1 - a_sdCapsule_1;
ba_sdCapsule_1 = b_sdCapsule_1 - a_sdCapsule_1;
sdCapsule_return_value_1 = length(pa_sdCapsule_1 - ba_sdCapsule_1 * clamp(dot(pa_sdCapsule_1, ba_sdCapsule_1) / dot(ba_sdCapsule_1, ba_sdCapsule_1), 0., 1.)) - r_sdCapsule_1;
sdCapsule_has_returned_1 = true;
sdCapsule_return_value_inlined_24_1 = sdCapsule_return_value_1;
p_sdCapsule_1 = p_arms_1;
a_sdCapsule_1 = vec3(1.5, 0, 0);
b_sdCapsule_1 = wrist_arms_1;
r_sdCapsule_1 = .2;
sdCapsule_has_returned_1 = false;
pa_sdCapsule_1 = p_sdCapsule_1 - a_sdCapsule_1;
ba_sdCapsule_1 = b_sdCapsule_1 - a_sdCapsule_1;
sdCapsule_return_value_1 = length(pa_sdCapsule_1 - ba_sdCapsule_1 * clamp(dot(pa_sdCapsule_1, ba_sdCapsule_1) / dot(ba_sdCapsule_1, ba_sdCapsule_1), 0., 1.)) - r_sdCapsule_1;
sdCapsule_has_returned_1 = true;
sdCapsule_return_value_inlined_25_1 = sdCapsule_return_value_1;
r_arms_1.d = min(sdCapsule_return_value_inlined_24_1, sdCapsule_return_value_inlined_25_1);
p_arms_1 -= wrist_arms_1;
p_arms_1.z -= gunsForward_1 * .15;
p_gunPod_1 = p_arms_1;
gunPod_has_returned_1 = false;
mat_setBodyMaterial_1 = r_gunPod_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_gunPod_1 = mat_setBodyMaterial_1;
p_gunPod_1.yz += vec2(.1, .45);
pp_gunPod_1 = p_gunPod_1;
pp_gunPod_1.z = abs(pp_gunPod_1.z) - .5;
p_sdCappedCone_1 = pp_gunPod_1;
a_sdCappedCone_1 = vec3(0);
b_sdCappedCone_1 = vec3(0, 0, - .1);
ra_sdCappedCone_1 = .35 - .1;
rb_sdCappedCone_1 = .35;
sdCappedCone_has_returned_1 = false;
rba_sdCappedCone_1 = rb_sdCappedCone_1 - ra_sdCappedCone_1;
baba_sdCappedCone_1 = dot(b_sdCappedCone_1 - a_sdCappedCone_1, b_sdCappedCone_1 - a_sdCappedCone_1);
papa_sdCappedCone_1 = dot(p_sdCappedCone_1 - a_sdCappedCone_1, p_sdCappedCone_1 - a_sdCappedCone_1);
paba_sdCappedCone_1 = dot(p_sdCappedCone_1 - a_sdCappedCone_1, b_sdCappedCone_1 - a_sdCappedCone_1) / baba_sdCappedCone_1;
x_sdCappedCone_1 = sqrt(papa_sdCappedCone_1 - paba_sdCappedCone_1 * paba_sdCappedCone_1 * baba_sdCappedCone_1);
cax_sdCappedCone_1 = max(0., x_sdCappedCone_1 - ((paba_sdCappedCone_1 < .5) ? ra_sdCappedCone_1 : rb_sdCappedCone_1));
cay_sdCappedCone_1 = abs(paba_sdCappedCone_1 - .5) - .5;
f_sdCappedCone_1 = clamp((rba_sdCappedCone_1 * (x_sdCappedCone_1 - ra_sdCappedCone_1) + paba_sdCappedCone_1 * baba_sdCappedCone_1) / (rba_sdCappedCone_1 * rba_sdCappedCone_1 + baba_sdCappedCone_1), 0., 1.);
cbx_sdCappedCone_1 = x_sdCappedCone_1 - ra_sdCappedCone_1 - f_sdCappedCone_1 * rba_sdCappedCone_1;
cby_sdCappedCone_1 = paba_sdCappedCone_1 - f_sdCappedCone_1;
sdCappedCone_return_value_1 = ((cbx_sdCappedCone_1 < 0. && cay_sdCappedCone_1 < 0.) ? - 1. : 1.) * sqrt(min(cax_sdCappedCone_1 * cax_sdCappedCone_1 + cay_sdCappedCone_1 * cay_sdCappedCone_1 * baba_sdCappedCone_1, cbx_sdCappedCone_1 * cbx_sdCappedCone_1 + cby_sdCappedCone_1 * cby_sdCappedCone_1 * baba_sdCappedCone_1));
sdCappedCone_has_returned_1 = true;
sdCappedCone_return_value_inlined_12_1 = sdCappedCone_return_value_1;
r_gunPod_1.d = sdCappedCone_return_value_inlined_12_1;
p_sdCappedCylinder_1 = p_gunPod_1;
h_sdCappedCylinder_1 = .35;
r_sdCappedCylinder_1 = .4;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_13_1 = sdCappedCylinder_return_value_1;
r_gunPod_1.d = min(r_gunPod_1.d, sdCappedCylinder_return_value_inlined_13_1);
pp_gunPod_1 = vec3(p_gunPod_1.x, .28 - p_gunPod_1.y, p_gunPod_1.z);
p_sdTriPrism_1 = pp_gunPod_1;
h_sdTriPrism_1 = vec2(.1, .5);
sdTriPrism_has_returned_1 = false;
q_sdTriPrism_1 = abs(p_sdTriPrism_1);
sdTriPrism_return_value_1 = max(q_sdTriPrism_1.z - h_sdTriPrism_1.y, max(q_sdTriPrism_1.x * .866025 + p_sdTriPrism_1.y * .5, - p_sdTriPrism_1.y) - h_sdTriPrism_1.x * .5);
sdTriPrism_has_returned_1 = true;
sdTriPrism_return_value_inlined_14_1 = sdTriPrism_return_value_1;
r_gunPod_1.d = min(r_gunPod_1.d, sdTriPrism_return_value_inlined_14_1);
pp_gunPod_1 = p_gunPod_1;
pp_gunPod_1.x = abs(p_gunPod_1.x);
a_rot_1 = .78525;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_15_1 = rot_return_value_1;
pp_gunPod_1.xy *= rot_return_value_inlined_15_1;
bump_gunPod_1 = sign(sin(pp_gunPod_1.z * 33.3)) * .003;
p_sdBox_1 = pp_gunPod_1;
b_sdBox_1 = vec3(.1 - bump_gunPod_1, .38 - bump_gunPod_1, .34);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_16_1 = sdBox_return_value_1;
d_gunPod_1 = sdBox_return_value_inlined_16_1 - .02;
pp_gunPod_1 = p_gunPod_1 - vec3(0, 0, - .6);
pp_gunPod_1.x = abs(pp_gunPod_1.x) - .1;
p_sdCappedCylinder_1 = pp_gunPod_1;
h_sdCappedCylinder_1 = .06;
r_sdCappedCylinder_1 = .15;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_17_1 = sdCappedCylinder_return_value_1;
p_sdCappedCylinder_1 = pp_gunPod_1 + vec3(0, .12, - .05);
h_sdCappedCylinder_1 = .06;
r_sdCappedCylinder_1 = .05;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_18_1 = sdCappedCylinder_return_value_1;
p_sdBox_1 = p_gunPod_1 + vec3(0, 0, .54);
b_sdBox_1 = vec3(.1, .06, .04);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_19_1 = sdBox_return_value_1;
d_gunPod_1 = min(min(min(d_gunPod_1, sdCappedCylinder_return_value_inlined_17_1), sdCappedCylinder_return_value_inlined_18_1), sdBox_return_value_inlined_19_1);
if(d_gunPod_1 < r_gunPod_1.d)
{
p_sdCappedCylinder_1 = pp_gunPod_1 + vec3(0, 0, .1);
h_sdCappedCylinder_1 = .03;
r_sdCappedCylinder_1 = .2;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_20_1 = sdCappedCylinder_return_value_1;
d_gunPod_1 = max(d_gunPod_1, - sdCappedCylinder_return_value_inlined_20_1);
r_gunPod_1.d = d_gunPod_1;
r_gunPod_1.mat = vec3(.02);
}
fireShock_has_returned_1 = false;
fireShock_return_value_1 = abs(sin(edShoot_1 * 78.5375));
fireShock_has_returned_1 = true;
fireShock_return_value_inlined_21_1 = fireShock_return_value_1;
fs_gunPod_1 = fireShock_return_value_inlined_21_1;
if(fs_gunPod_1 > .5)
{
p_sdCappedCylinder_1 = pp_gunPod_1;
h_sdCappedCylinder_1 = .01 + pp_gunPod_1.z * .05;
r_sdCappedCylinder_1 = fract(fs_gunPod_1 * 3322.423) * .5 + .9;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_22_1 = sdCappedCylinder_return_value_1;
d_gunPod_1 = sdCappedCylinder_return_value_inlined_22_1;
if(d_gunPod_1 < r_gunPod_1.d)
{
r_gunPod_1.d = d_gunPod_1;
r_gunPod_1.mat = vec3(1);
glow_1 += .1 / (.01 + d_gunPod_1 * d_gunPod_1 * 4e2);
}
}
gunPod_return_value_1 = r_gunPod_1;
gunPod_has_returned_1 = true;
gunPod_return_value_inlined_26_1 = gunPod_return_value_1;
a_minResult_1 = r_arms_1;
b_minResult_1 = gunPod_return_value_inlined_26_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_27_1 = minResult_return_value_1;
arms_return_value_1 = minResult_return_value_inlined_27_1;
arms_has_returned_1 = true;
arms_return_value_inlined_67_1 = arms_return_value_1;
a_minResult_1 = minResult_return_value_inlined_66_1;
b_minResult_1 = arms_return_value_inlined_67_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_68_1 = minResult_return_value_1;
ed209_return_value_1 = minResult_return_value_inlined_68_1;
ed209_has_returned_1 = true;
ed209_return_value_inlined_79_1 = ed209_return_value_1;
a_minResult_1 = room_return_value_inlined_78_1;
b_minResult_1 = ed209_return_value_inlined_79_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_80_1 = minResult_return_value_1;
r_map_1 = minResult_return_value_inlined_80_1;
gnd_map_1 = length(p_map_1.y + 3.);
if(gnd_map_1 < r_map_1.d)
{
r_map_1.d = gnd_map_1;
r_map_1.mat = vec3(.1);
}
map_return_value_1 = r_map_1;
map_has_returned_1 = true;
map_return_value_inlined_90_1 = map_return_value_1;
h_getSceneColor_1 = map_return_value_inlined_90_1;
if(abs(h_getSceneColor_1.d) < .0015 * d_getSceneColor_1)
{
break;
}
if(d_getSceneColor_1 > 64.)
{
getSceneColor_return_value_1 = vec3(0);
getSceneColor_has_returned_1 = true;
}
if(! getSceneColor_has_returned_1)
{
d_getSceneColor_1 += h_getSceneColor_1.d;
}
}
if(! getSceneColor_has_returned_1)
{
g_getSceneColor_1 = glow_1;
p_applyLighting_1 = p_getSceneColor_1;
rd_applyLighting_1 = rd_getSceneColor_1;
d_applyLighting_1 = d_getSceneColor_1;
data_applyLighting_1 = h_getSceneColor_1;
applyLighting_has_returned_1 = false;
sunDir_applyLighting_1 = normalize(vec3(10, 10, - 10) - p_applyLighting_1);
p_calcNormal_1 = p_applyLighting_1;
t_calcNormal_1 = d_applyLighting_1;
calcNormal_has_returned_1 = false;
d_calcNormal_1 = .01 * t_calcNormal_1 * .33;
e_calcNormal_1 = vec2(1, - 1) * .5773 * d_calcNormal_1;
p_map_1 = p_calcNormal_1 + e_calcNormal_1.xyy;
map_has_returned_1 = false;
p_room_1 = p_map_1;
room_has_returned_1 = false;
r_room_1.mat = vec3(.4);
r_room_1.specPower = 1e7;
xy_room_1 = p_room_1.xy - vec2(0, 2);
p_room_1.x = abs(p_room_1.x);
p_room_1.yz += vec2(.5, - 3.4);
p_sdBox_1 = p_room_1;
b_sdBox_1 = frameInner_room_1 + vec3(0, 0, 1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_69_1 = sdBox_return_value_1;
doorHole_room_1 = sdBox_return_value_inlined_69_1;
backWall_room_1 = length(p_room_1.z - 8.);
r_room_1.d = min(backWall_room_1, max(length(p_room_1.z), - doorHole_room_1 + .1));
if(r_room_1.d == backWall_room_1)
{
p_sdOctogon_1 = xy_room_1;
r_sdOctogon_1 = 2.6;
sdOctogon_has_returned_1 = false;
p_sdOctogon_1 = abs(p_sdOctogon_1);
p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
sdOctogon_has_returned_1 = true;
sdOctogon_return_value_inlined_70_1 = sdOctogon_return_value_1;
p_sdOctogon_1 = xy_room_1;
r_sdOctogon_1 = 1.9;
sdOctogon_has_returned_1 = false;
p_sdOctogon_1 = abs(p_sdOctogon_1);
p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
sdOctogon_has_returned_1 = true;
sdOctogon_return_value_inlined_71_1 = sdOctogon_return_value_1;
ocp_room_1 = min(abs(sdOctogon_return_value_inlined_70_1), abs(sdOctogon_return_value_inlined_71_1));
p_sdOctogon_1 = xy_room_1;
r_sdOctogon_1 = 1.2;
sdOctogon_has_returned_1 = false;
p_sdOctogon_1 = abs(p_sdOctogon_1);
p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
sdOctogon_has_returned_1 = true;
sdOctogon_return_value_inlined_72_1 = sdOctogon_return_value_1;
ocp_room_1 = min(max(ocp_room_1, min(.7 - abs(xy_room_1.x + 1.2), - xy_room_1.y)), max(abs(sdOctogon_return_value_inlined_72_1), min(xy_room_1.x, .7 - abs(xy_room_1.y))));
if(ocp_room_1 < .3)
{
r_room_1.mat = vec3(.39, .57, .71);
}
}
p_sdBox_1 = p_room_1;
b_sdBox_1 = frameInner_room_1 + vec3(.4, .4, .1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_73_1 = sdBox_return_value_1;
doorFrame_room_1 = max(sdBox_return_value_inlined_73_1, - doorHole_room_1);
doorWidth_room_1 = frameInner_room_1.x * .5;
p_room_1.x -= frameInner_room_1.x;
a_rot_1 = doorOpen_1 * 2.1;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_74_1 = rot_return_value_1;
p_room_1.xz *= rot_return_value_inlined_74_1;
p_room_1.x += doorWidth_room_1;
p_sdBox_1 = p_room_1;
b_sdBox_1 = vec3(doorWidth_room_1, frameInner_room_1.yz);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_75_1 = sdBox_return_value_1;
door_room_1 = sdBox_return_value_inlined_75_1;
p_room_1 = abs(p_room_1) - vec3(doorWidth_room_1 * .5, 1.1, .14);
p_sdBox_1 = p_room_1;
b_sdBox_1 = vec3(.45, .9, .1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_76_1 = sdBox_return_value_1;
p_sdBox_1 = p_room_1;
b_sdBox_1 = vec3(.35, .8, 1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_77_1 = sdBox_return_value_1;
d_room_1 = min(doorFrame_room_1, max(door_room_1, - max(sdBox_return_value_inlined_76_1, - sdBox_return_value_inlined_77_1)));
if(d_room_1 < r_room_1.d)
{
r_room_1.d = d_room_1;
r_room_1.mat = vec3(.02, .02, .024);
r_room_1.specPower = 10.;
}
room_return_value_1 = r_room_1;
room_has_returned_1 = true;
room_return_value_inlined_78_1 = room_return_value_1;
p_ed209_1 = p_map_1;
ed209_has_returned_1 = false;
f_legWalkAngle_1 = 2.;
legWalkAngle_has_returned_1 = false;
legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
legWalkAngle_has_returned_1 = true;
legWalkAngle_return_value_inlined_54_1 = legWalkAngle_return_value_1;
edZ_has_returned_1 = false;
edZ_return_value_1 = mix(5., - 2., edWalk_1);
edZ_has_returned_1 = true;
edZ_return_value_inlined_55_1 = edZ_return_value_1;
p_ed209_1.yz += vec2(legWalkAngle_return_value_inlined_54_1 * .2 + .1, - edZ_return_value_inlined_55_1);
p_legs_1 = p_ed209_1;
legs_has_returned_1 = false;
mat_setBodyMaterial_1 = r_legs_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_legs_1 = mat_setBodyMaterial_1;
f_legWalkAngle_1 = 1.;
legWalkAngle_has_returned_1 = false;
legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
legWalkAngle_has_returned_1 = true;
legWalkAngle_return_value_inlined_45_1 = legWalkAngle_return_value_1;
legAngle_legs_1 = legWalkAngle_return_value_inlined_45_1;
p_legs_1.z += .27;
a_rot_1 = legAngle_legs_1 * sign(p_legs_1.x);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_46_1 = rot_return_value_1;
p_legs_1.yz *= rot_return_value_inlined_46_1;
p_legs_1.z -= .27;
p_legs_1.y += .65;
a_rot_1 = - .2;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_47_1 = rot_return_value_1;
p_legs_1.yz *= rot_return_value_inlined_47_1;
a_rot_1 = legAngle_legs_1 * .3;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_48_1 = rot_return_value_1;
p_legs_1.xy *= rot_return_value_inlined_48_1;
pp_legs_1 = p_legs_1;
pp_legs_1.x = abs(pp_legs_1.x);
pp_legs_1.y += .48;
a_rot_1 = - .58525;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_49_1 = rot_return_value_1;
pp_legs_1.yz *= rot_return_value_inlined_49_1;
pp_legs_1.x -= .98;
cp_legs_1 = pp_legs_1;
p_legs_1 = pp_legs_1;
pp_legs_1.xz = abs(pp_legs_1.xz) - vec2(.12, .25);
p_legs_1.y += .68;
p_legs_1.xy = abs(p_legs_1.xy) - .12;
p_sdBox_1 = p_legs_1;
b_sdBox_1 = vec3(.07, .05, 1.2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_50_1 = sdBox_return_value_1;
silver_legs_1 = sdBox_return_value_inlined_50_1;
cp_legs_1 -= vec3(0, - .7, 0);
p_sdBox_1 = cp_legs_1 - vec3(0, 0, 1.15);
b_sdBox_1 = vec3(.17, .17, .07);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_51_1 = sdBox_return_value_1;
r_legs_1.d = sdBox_return_value_inlined_51_1 - .04;
cp_legs_1.z ++;
p_sdChamferedCube_1 = cp_legs_1.xzy;
r_sdChamferedCube_1 = vec2(.28 - sign(abs(cp_legs_1.z) - .3) * .01, .5).xyx;
c_sdChamferedCube_1 = .18;
sdChamferedCube_has_returned_1 = false;
p_sdBox_1 = p_sdChamferedCube_1;
b_sdBox_1 = r_sdChamferedCube_1;
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_0_1 = sdBox_return_value_1;
cube_sdChamferedCube_1 = sdBox_return_value_inlined_0_1;
a_rot_1 = .78525;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_1_1 = rot_return_value_1;
p_sdChamferedCube_1.xz *= rot_return_value_inlined_1_1;
r_sdChamferedCube_1.xz *= - c_sdChamferedCube_1 / 1.41 + 1.41;
p_sdBox_1 = p_sdChamferedCube_1;
b_sdBox_1 = r_sdChamferedCube_1;
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_2_1 = sdBox_return_value_1;
sdChamferedCube_return_value_1 = max(cube_sdChamferedCube_1, sdBox_return_value_inlined_2_1);
sdChamferedCube_has_returned_1 = true;
sdChamferedCube_return_value_inlined_52_1 = sdChamferedCube_return_value_1;
r_legs_1.d = min(r_legs_1.d, sdChamferedCube_return_value_inlined_52_1);
p_foot_1 = cp_legs_1;
foot_has_returned_1 = false;
p_foot_1.z += .8;
a_rot_1 = .86;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_29_1 = rot_return_value_1;
p_foot_1.yz *= rot_return_value_inlined_29_1;
p_toe_1 = p_foot_1;
toe_has_returned_1 = false;
p_toe_1.yz += vec2(.1, .32);
p_sdBox_1 = p_toe_1;
b_sdBox_1 = vec3(.3 + .2 * (p_toe_1.z - .18) - p_toe_1.y * .228, .3 + .2 * cos((p_toe_1.z - .18) * 3.69), .35);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_28_1 = sdBox_return_value_1;
toe_return_value_1 = max(sdBox_return_value_inlined_28_1, .1 - p_toe_1.y);
toe_has_returned_1 = true;
toe_return_value_inlined_30_1 = toe_return_value_1;
d_foot_1 = toe_return_value_inlined_30_1;
a_rot_1 = 1.57;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_31_1 = rot_return_value_1;
p_foot_1.xz *= rot_return_value_inlined_31_1;
p_foot_1.x -= .43;
p_foot_1.z = .25 - abs(p_foot_1.z);
p_toe_1 = p_foot_1;
toe_has_returned_1 = false;
p_toe_1.yz += vec2(.1, .32);
p_sdBox_1 = p_toe_1;
b_sdBox_1 = vec3(.3 + .2 * (p_toe_1.z - .18) - p_toe_1.y * .228, .3 + .2 * cos((p_toe_1.z - .18) * 3.69), .35);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_28_1 = sdBox_return_value_1;
toe_return_value_1 = max(sdBox_return_value_inlined_28_1, .1 - p_toe_1.y);
toe_has_returned_1 = true;
toe_return_value_inlined_32_1 = toe_return_value_1;
foot_return_value_1 = min(d_foot_1, toe_return_value_inlined_32_1);
foot_has_returned_1 = true;
foot_return_value_inlined_53_1 = foot_return_value_1;
r_legs_1.d = min(r_legs_1.d, foot_return_value_inlined_53_1);
if(silver_legs_1 < r_legs_1.d)
{
r_legs_1.d = silver_legs_1;
r_legs_1.mat = vec3(.8);
}
legs_return_value_1 = r_legs_1;
legs_has_returned_1 = true;
legs_return_value_inlined_56_1 = legs_return_value_1;
r_ed209_1 = legs_return_value_inlined_56_1;
f_ed209_1 = min(stretch_1 * 2., 1.);
slide_ed209_1 = f_ed209_1 < .5 ? smoothstep(0., .5, f_ed209_1) : (1. - smoothstep(.5, 1., f_ed209_1) * .2);
p_ed209_1.yz -= slide_ed209_1 * .5;
gunsUp_1 = smoothstep(0., 1., clamp((stretch_1 - .66) * 6., 0., 1.));
fireShock_has_returned_1 = false;
fireShock_return_value_1 = abs(sin(edShoot_1 * 78.5375));
fireShock_has_returned_1 = true;
fireShock_return_value_inlined_57_1 = fireShock_return_value_1;
gunsForward_1 = smoothstep(0., 1., clamp((stretch_1 - .83) * 6., 0., 1.)) + fireShock_return_value_inlined_57_1 * .5;
p_waist_1 = p_ed209_1;
waist_has_returned_1 = false;
mat_setBodyMaterial_1 = r_waist_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_waist_1 = mat_setBodyMaterial_1;
p_waist_1.y += .65;
a_rot_1 = - .2;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_33_1 = rot_return_value_1;
p_waist_1.yz *= rot_return_value_inlined_33_1;
f_legWalkAngle_1 = 1.;
legWalkAngle_has_returned_1 = false;
legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
legWalkAngle_has_returned_1 = true;
legWalkAngle_return_value_inlined_34_1 = legWalkAngle_return_value_1;
legAngle_waist_1 = legWalkAngle_return_value_inlined_34_1;
a_rot_1 = legAngle_waist_1 * .3;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_35_1 = rot_return_value_1;
p_waist_1.xy *= rot_return_value_inlined_35_1;
pp_waist_1 = p_waist_1;
pp_waist_1.y += .3;
p_sdCappedCylinder_1 = pp_waist_1.zyx;
h_sdCappedCylinder_1 = .5;
r_sdCappedCylinder_1 = .5;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_36_1 = sdCappedCylinder_return_value_1;
r_waist_1.d = max(sdCappedCylinder_return_value_inlined_36_1, p_waist_1.y + .15);
bump_waist_1 = .5 - abs(sin(p_waist_1.y * 40.)) * .03;
p_sdBox_1 = p_waist_1;
b_sdBox_1 = vec3(bump_waist_1, .15, bump_waist_1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_37_1 = sdBox_return_value_1;
d_waist_1 = sdBox_return_value_inlined_37_1;
bump_waist_1 = .3 - abs(sin(p_waist_1.x * 40.)) * .03;
pp_waist_1.y += .18;
p_sdCappedCylinder_1 = pp_waist_1.zyx;
h_sdCappedCylinder_1 = bump_waist_1;
r_sdCappedCylinder_1 = .75;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_38_1 = sdCappedCylinder_return_value_1;
d_waist_1 = min(d_waist_1, sdCappedCylinder_return_value_inlined_38_1);
pp_waist_1.x = abs(pp_waist_1.x);
a_rot_1 = - .58525 + legAngle_waist_1 * sign(p_waist_1.x);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_39_1 = rot_return_value_1;
pp_waist_1.yz *= rot_return_value_inlined_39_1;
pp_waist_1.x -= .98;
p_sdCappedCylinder_1 = pp_waist_1.zyx;
h_sdCappedCylinder_1 = .4;
r_sdCappedCylinder_1 = .24;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_40_1 = sdCappedCylinder_return_value_1;
r_waist_1.d = min(r_waist_1.d, max(sdCappedCylinder_return_value_inlined_40_1, - pp_waist_1.y));
p_sdBox_1 = pp_waist_1;
b_sdBox_1 = vec3(.24, .2, .14 + .2 * pp_waist_1.y);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_41_1 = sdBox_return_value_1;
r_waist_1.d = min(r_waist_1.d, sdBox_return_value_inlined_41_1);
p_waist_1 = pp_waist_1;
pp_waist_1.xz = abs(pp_waist_1.xz) - vec2(.12, .25);
p_sdCappedCylinder_1 = pp_waist_1.xzy;
h_sdCappedCylinder_1 = .1;
r_sdCappedCylinder_1 = .325;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_42_1 = sdCappedCylinder_return_value_1;
p_sdCappedCylinder_1 = pp_waist_1.xzy;
h_sdCappedCylinder_1 = .05;
r_sdCappedCylinder_1 = .5;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_43_1 = sdCappedCylinder_return_value_1;
r_waist_1.d = min(r_waist_1.d, max(min(sdCappedCylinder_return_value_inlined_42_1, sdCappedCylinder_return_value_inlined_43_1), pp_waist_1.y));
p_waist_1.y += .68;
p_sdBox_1 = p_waist_1;
b_sdBox_1 = vec3(sign(abs(p_waist_1.y) - .04) * .005 + .26, .2, .34);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_44_1 = sdBox_return_value_1;
r_waist_1.d = min(r_waist_1.d, sdBox_return_value_inlined_44_1);
if(d_waist_1 < r_waist_1.d)
{
r_waist_1.d = d_waist_1;
r_waist_1.mat = vec3(.02);
}
waist_return_value_1 = r_waist_1;
waist_has_returned_1 = true;
waist_return_value_inlined_58_1 = waist_return_value_1;
a_minResult_1 = r_ed209_1;
b_minResult_1 = waist_return_value_inlined_58_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_59_1 = minResult_return_value_1;
r_ed209_1 = minResult_return_value_inlined_59_1;
f_legWalkAngle_1 = 2.;
legWalkAngle_has_returned_1 = false;
legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
legWalkAngle_has_returned_1 = true;
legWalkAngle_return_value_inlined_60_1 = legWalkAngle_return_value_1;
a_rot_1 = .1 * (- edDown_1 + legWalkAngle_return_value_inlined_60_1 + smoothstep(0., 1., clamp((stretch_1 - .5) * 6., 0., 1.)) - 1.);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_61_1 = rot_return_value_1;
p_ed209_1.yz *= rot_return_value_inlined_61_1;
a_rot_1 = edTwist_1 * .2;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_62_1 = rot_return_value_1;
p_ed209_1.xz *= rot_return_value_inlined_62_1;
p_headLower_1 = p_ed209_1;
headLower_has_returned_1 = false;
op_headLower_1 = p_headLower_1;
p_headVisor_1 = p_headLower_1 * vec3(.95, - 1.4, .95);
h_headVisor_1 = 1.;
bump_headVisor_1 = 0.;
headVisor_has_returned_1 = false;
bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
p_sdBox_1 = p_headVisor_1;
b_sdBox_1 = vec3(1, h_headVisor_1, 2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
result_headVisor_1.d = sdBox_return_value_inlined_3_1;
p_headSphere_1 = p_headVisor_1;
headSphere_has_returned_1 = false;
headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
headSphere_has_returned_1 = true;
headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
result_headVisor_1.mat = vec3(.05);
result_headVisor_1.specPower = 30.;
headVisor_return_value_1 = result_headVisor_1;
headVisor_has_returned_1 = true;
headVisor_return_value_inlined_5_1 = headVisor_return_value_1;
r_headLower_1 = headVisor_return_value_inlined_5_1;
p_headVisor_1 = (p_headLower_1 + vec3(0, .01, 0)) * vec3(.95);
h_headVisor_1 = 1.;
bump_headVisor_1 = 0.;
headVisor_has_returned_1 = false;
bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
p_sdBox_1 = p_headVisor_1;
b_sdBox_1 = vec3(1, h_headVisor_1, 2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
result_headVisor_1.d = sdBox_return_value_inlined_3_1;
p_headSphere_1 = p_headVisor_1;
headSphere_has_returned_1 = false;
headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
headSphere_has_returned_1 = true;
headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
result_headVisor_1.mat = vec3(.05);
result_headVisor_1.specPower = 30.;
headVisor_return_value_1 = result_headVisor_1;
headVisor_has_returned_1 = true;
headVisor_return_value_inlined_6_1 = headVisor_return_value_1;
r_headLower_1.d = min(r_headLower_1.d, max(max(headVisor_return_value_inlined_6_1.d, p_headLower_1.y - .35), p_headLower_1.y * .625 - p_headLower_1.z - .66));
a_rot_1 = .075 * (gunsUp_1 - 1.) * sign(p_headLower_1.x);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_7_1 = rot_return_value_1;
p_headLower_1.xy *= rot_return_value_inlined_7_1;
p_headLower_1.x = abs(p_headLower_1.x) - 1.33;
p_headLower_1.y -= .1 - p_headLower_1.x * .1;
p_sdBox_1 = p_headLower_1;
b_sdBox_1 = vec3(.4, .06 * (1. - p_headLower_1.x), .3 - p_headLower_1.x * .2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_8_1 = sdBox_return_value_1;
r_headLower_1.d = min(r_headLower_1.d, sdBox_return_value_inlined_8_1);
p_headLower_1 = op_headLower_1;
p_headLower_1.y = abs(abs(p_headLower_1.y + .147) - .0556) - .0278;
p_sdBox_1 = p_headLower_1 + vec3(0, 0, 1.5);
b_sdBox_1 = vec3(mix(.25, .55, - op_headLower_1.y), .015, .1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_9_1 = sdBox_return_value_1;
r_headLower_1.d = max(r_headLower_1.d, - sdBox_return_value_inlined_9_1);
p_headLower_1 = op_headLower_1;
p_headLower_1.y = abs(p_headLower_1.y + .16) - .06;
p_headLower_1.z -= - 1.1;
p_sdCappedCylinder_1 = p_headLower_1.xzy;
h_sdCappedCylinder_1 = 1.;
r_sdCappedCylinder_1 = .03;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_10_1 = sdCappedCylinder_return_value_1;
p_sdCappedCylinder_1 = p_headLower_1.xzy;
h_sdCappedCylinder_1 = .55;
r_sdCappedCylinder_1 = 1.;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_11_1 = sdCappedCylinder_return_value_1;
r_headLower_1.d = max(r_headLower_1.d, - max(max(sdCappedCylinder_return_value_inlined_10_1, - sdCappedCylinder_return_value_inlined_11_1), p_headLower_1.z + .2));
mat_setBodyMaterial_1 = r_headLower_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_headLower_1 = mat_setBodyMaterial_1;
headLower_return_value_1 = r_headLower_1;
headLower_has_returned_1 = true;
headLower_return_value_inlined_63_1 = headLower_return_value_1;
a_minResult_1 = r_ed209_1;
b_minResult_1 = headLower_return_value_inlined_63_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_64_1 = minResult_return_value_1;
p_headVisor_1 = p_ed209_1;
h_headVisor_1 = .8;
bump_headVisor_1 = 1.;
headVisor_has_returned_1 = false;
bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
p_sdBox_1 = p_headVisor_1;
b_sdBox_1 = vec3(1, h_headVisor_1, 2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
result_headVisor_1.d = sdBox_return_value_inlined_3_1;
p_headSphere_1 = p_headVisor_1;
headSphere_has_returned_1 = false;
headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
headSphere_has_returned_1 = true;
headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
result_headVisor_1.mat = vec3(.05);
result_headVisor_1.specPower = 30.;
headVisor_return_value_1 = result_headVisor_1;
headVisor_has_returned_1 = true;
headVisor_return_value_inlined_65_1 = headVisor_return_value_1;
a_minResult_1 = minResult_return_value_inlined_64_1;
b_minResult_1 = headVisor_return_value_inlined_65_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_66_1 = minResult_return_value_1;
p_arms_1 = p_ed209_1;
arms_has_returned_1 = false;
mat_setBodyMaterial_1 = r_arms_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_arms_1 = mat_setBodyMaterial_1;
p_arms_1.x = abs(p_arms_1.x);
p_arms_1.yz += vec2(.24, 0);
a_rot_1 = .15 * (gunsUp_1 - 1.);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_23_1 = rot_return_value_1;
p_arms_1.xy *= rot_return_value_inlined_23_1;
p_sdCapsule_1 = p_arms_1;
a_sdCapsule_1 = vec3(0);
b_sdCapsule_1 = vec3(1.5, 0, 0);
r_sdCapsule_1 = .2;
sdCapsule_has_returned_1 = false;
pa_sdCapsule_1 = p_sdCapsule_1 - a_sdCapsule_1;
ba_sdCapsule_1 = b_sdCapsule_1 - a_sdCapsule_1;
sdCapsule_return_value_1 = length(pa_sdCapsule_1 - ba_sdCapsule_1 * clamp(dot(pa_sdCapsule_1, ba_sdCapsule_1) / dot(ba_sdCapsule_1, ba_sdCapsule_1), 0., 1.)) - r_sdCapsule_1;
sdCapsule_has_returned_1 = true;
sdCapsule_return_value_inlined_24_1 = sdCapsule_return_value_1;
p_sdCapsule_1 = p_arms_1;
a_sdCapsule_1 = vec3(1.5, 0, 0);
b_sdCapsule_1 = wrist_arms_1;
r_sdCapsule_1 = .2;
sdCapsule_has_returned_1 = false;
pa_sdCapsule_1 = p_sdCapsule_1 - a_sdCapsule_1;
ba_sdCapsule_1 = b_sdCapsule_1 - a_sdCapsule_1;
sdCapsule_return_value_1 = length(pa_sdCapsule_1 - ba_sdCapsule_1 * clamp(dot(pa_sdCapsule_1, ba_sdCapsule_1) / dot(ba_sdCapsule_1, ba_sdCapsule_1), 0., 1.)) - r_sdCapsule_1;
sdCapsule_has_returned_1 = true;
sdCapsule_return_value_inlined_25_1 = sdCapsule_return_value_1;
r_arms_1.d = min(sdCapsule_return_value_inlined_24_1, sdCapsule_return_value_inlined_25_1);
p_arms_1 -= wrist_arms_1;
p_arms_1.z -= gunsForward_1 * .15;
p_gunPod_1 = p_arms_1;
gunPod_has_returned_1 = false;
mat_setBodyMaterial_1 = r_gunPod_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_gunPod_1 = mat_setBodyMaterial_1;
p_gunPod_1.yz += vec2(.1, .45);
pp_gunPod_1 = p_gunPod_1;
pp_gunPod_1.z = abs(pp_gunPod_1.z) - .5;
p_sdCappedCone_1 = pp_gunPod_1;
a_sdCappedCone_1 = vec3(0);
b_sdCappedCone_1 = vec3(0, 0, - .1);
ra_sdCappedCone_1 = .35 - .1;
rb_sdCappedCone_1 = .35;
sdCappedCone_has_returned_1 = false;
rba_sdCappedCone_1 = rb_sdCappedCone_1 - ra_sdCappedCone_1;
baba_sdCappedCone_1 = dot(b_sdCappedCone_1 - a_sdCappedCone_1, b_sdCappedCone_1 - a_sdCappedCone_1);
papa_sdCappedCone_1 = dot(p_sdCappedCone_1 - a_sdCappedCone_1, p_sdCappedCone_1 - a_sdCappedCone_1);
paba_sdCappedCone_1 = dot(p_sdCappedCone_1 - a_sdCappedCone_1, b_sdCappedCone_1 - a_sdCappedCone_1) / baba_sdCappedCone_1;
x_sdCappedCone_1 = sqrt(papa_sdCappedCone_1 - paba_sdCappedCone_1 * paba_sdCappedCone_1 * baba_sdCappedCone_1);
cax_sdCappedCone_1 = max(0., x_sdCappedCone_1 - ((paba_sdCappedCone_1 < .5) ? ra_sdCappedCone_1 : rb_sdCappedCone_1));
cay_sdCappedCone_1 = abs(paba_sdCappedCone_1 - .5) - .5;
f_sdCappedCone_1 = clamp((rba_sdCappedCone_1 * (x_sdCappedCone_1 - ra_sdCappedCone_1) + paba_sdCappedCone_1 * baba_sdCappedCone_1) / (rba_sdCappedCone_1 * rba_sdCappedCone_1 + baba_sdCappedCone_1), 0., 1.);
cbx_sdCappedCone_1 = x_sdCappedCone_1 - ra_sdCappedCone_1 - f_sdCappedCone_1 * rba_sdCappedCone_1;
cby_sdCappedCone_1 = paba_sdCappedCone_1 - f_sdCappedCone_1;
sdCappedCone_return_value_1 = ((cbx_sdCappedCone_1 < 0. && cay_sdCappedCone_1 < 0.) ? - 1. : 1.) * sqrt(min(cax_sdCappedCone_1 * cax_sdCappedCone_1 + cay_sdCappedCone_1 * cay_sdCappedCone_1 * baba_sdCappedCone_1, cbx_sdCappedCone_1 * cbx_sdCappedCone_1 + cby_sdCappedCone_1 * cby_sdCappedCone_1 * baba_sdCappedCone_1));
sdCappedCone_has_returned_1 = true;
sdCappedCone_return_value_inlined_12_1 = sdCappedCone_return_value_1;
r_gunPod_1.d = sdCappedCone_return_value_inlined_12_1;
p_sdCappedCylinder_1 = p_gunPod_1;
h_sdCappedCylinder_1 = .35;
r_sdCappedCylinder_1 = .4;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_13_1 = sdCappedCylinder_return_value_1;
r_gunPod_1.d = min(r_gunPod_1.d, sdCappedCylinder_return_value_inlined_13_1);
pp_gunPod_1 = vec3(p_gunPod_1.x, .28 - p_gunPod_1.y, p_gunPod_1.z);
p_sdTriPrism_1 = pp_gunPod_1;
h_sdTriPrism_1 = vec2(.1, .5);
sdTriPrism_has_returned_1 = false;
q_sdTriPrism_1 = abs(p_sdTriPrism_1);
sdTriPrism_return_value_1 = max(q_sdTriPrism_1.z - h_sdTriPrism_1.y, max(q_sdTriPrism_1.x * .866025 + p_sdTriPrism_1.y * .5, - p_sdTriPrism_1.y) - h_sdTriPrism_1.x * .5);
sdTriPrism_has_returned_1 = true;
sdTriPrism_return_value_inlined_14_1 = sdTriPrism_return_value_1;
r_gunPod_1.d = min(r_gunPod_1.d, sdTriPrism_return_value_inlined_14_1);
pp_gunPod_1 = p_gunPod_1;
pp_gunPod_1.x = abs(p_gunPod_1.x);
a_rot_1 = .78525;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_15_1 = rot_return_value_1;
pp_gunPod_1.xy *= rot_return_value_inlined_15_1;
bump_gunPod_1 = sign(sin(pp_gunPod_1.z * 33.3)) * .003;
p_sdBox_1 = pp_gunPod_1;
b_sdBox_1 = vec3(.1 - bump_gunPod_1, .38 - bump_gunPod_1, .34);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_16_1 = sdBox_return_value_1;
d_gunPod_1 = sdBox_return_value_inlined_16_1 - .02;
pp_gunPod_1 = p_gunPod_1 - vec3(0, 0, - .6);
pp_gunPod_1.x = abs(pp_gunPod_1.x) - .1;
p_sdCappedCylinder_1 = pp_gunPod_1;
h_sdCappedCylinder_1 = .06;
r_sdCappedCylinder_1 = .15;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_17_1 = sdCappedCylinder_return_value_1;
p_sdCappedCylinder_1 = pp_gunPod_1 + vec3(0, .12, - .05);
h_sdCappedCylinder_1 = .06;
r_sdCappedCylinder_1 = .05;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_18_1 = sdCappedCylinder_return_value_1;
p_sdBox_1 = p_gunPod_1 + vec3(0, 0, .54);
b_sdBox_1 = vec3(.1, .06, .04);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_19_1 = sdBox_return_value_1;
d_gunPod_1 = min(min(min(d_gunPod_1, sdCappedCylinder_return_value_inlined_17_1), sdCappedCylinder_return_value_inlined_18_1), sdBox_return_value_inlined_19_1);
if(d_gunPod_1 < r_gunPod_1.d)
{
p_sdCappedCylinder_1 = pp_gunPod_1 + vec3(0, 0, .1);
h_sdCappedCylinder_1 = .03;
r_sdCappedCylinder_1 = .2;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_20_1 = sdCappedCylinder_return_value_1;
d_gunPod_1 = max(d_gunPod_1, - sdCappedCylinder_return_value_inlined_20_1);
r_gunPod_1.d = d_gunPod_1;
r_gunPod_1.mat = vec3(.02);
}
fireShock_has_returned_1 = false;
fireShock_return_value_1 = abs(sin(edShoot_1 * 78.5375));
fireShock_has_returned_1 = true;
fireShock_return_value_inlined_21_1 = fireShock_return_value_1;
fs_gunPod_1 = fireShock_return_value_inlined_21_1;
if(fs_gunPod_1 > .5)
{
p_sdCappedCylinder_1 = pp_gunPod_1;
h_sdCappedCylinder_1 = .01 + pp_gunPod_1.z * .05;
r_sdCappedCylinder_1 = fract(fs_gunPod_1 * 3322.423) * .5 + .9;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_22_1 = sdCappedCylinder_return_value_1;
d_gunPod_1 = sdCappedCylinder_return_value_inlined_22_1;
if(d_gunPod_1 < r_gunPod_1.d)
{
r_gunPod_1.d = d_gunPod_1;
r_gunPod_1.mat = vec3(1);
glow_1 += .1 / (.01 + d_gunPod_1 * d_gunPod_1 * 4e2);
}
}
gunPod_return_value_1 = r_gunPod_1;
gunPod_has_returned_1 = true;
gunPod_return_value_inlined_26_1 = gunPod_return_value_1;
a_minResult_1 = r_arms_1;
b_minResult_1 = gunPod_return_value_inlined_26_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_27_1 = minResult_return_value_1;
arms_return_value_1 = minResult_return_value_inlined_27_1;
arms_has_returned_1 = true;
arms_return_value_inlined_67_1 = arms_return_value_1;
a_minResult_1 = minResult_return_value_inlined_66_1;
b_minResult_1 = arms_return_value_inlined_67_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_68_1 = minResult_return_value_1;
ed209_return_value_1 = minResult_return_value_inlined_68_1;
ed209_has_returned_1 = true;
ed209_return_value_inlined_79_1 = ed209_return_value_1;
a_minResult_1 = room_return_value_inlined_78_1;
b_minResult_1 = ed209_return_value_inlined_79_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_80_1 = minResult_return_value_1;
r_map_1 = minResult_return_value_inlined_80_1;
gnd_map_1 = length(p_map_1.y + 3.);
if(gnd_map_1 < r_map_1.d)
{
r_map_1.d = gnd_map_1;
r_map_1.mat = vec3(.1);
}
map_return_value_1 = r_map_1;
map_has_returned_1 = true;
map_return_value_inlined_82_1 = map_return_value_1;
p_map_1 = p_calcNormal_1 + e_calcNormal_1.yyx;
map_has_returned_1 = false;
p_room_1 = p_map_1;
room_has_returned_1 = false;
r_room_1.mat = vec3(.4);
r_room_1.specPower = 1e7;
xy_room_1 = p_room_1.xy - vec2(0, 2);
p_room_1.x = abs(p_room_1.x);
p_room_1.yz += vec2(.5, - 3.4);
p_sdBox_1 = p_room_1;
b_sdBox_1 = frameInner_room_1 + vec3(0, 0, 1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_69_1 = sdBox_return_value_1;
doorHole_room_1 = sdBox_return_value_inlined_69_1;
backWall_room_1 = length(p_room_1.z - 8.);
r_room_1.d = min(backWall_room_1, max(length(p_room_1.z), - doorHole_room_1 + .1));
if(r_room_1.d == backWall_room_1)
{
p_sdOctogon_1 = xy_room_1;
r_sdOctogon_1 = 2.6;
sdOctogon_has_returned_1 = false;
p_sdOctogon_1 = abs(p_sdOctogon_1);
p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
sdOctogon_has_returned_1 = true;
sdOctogon_return_value_inlined_70_1 = sdOctogon_return_value_1;
p_sdOctogon_1 = xy_room_1;
r_sdOctogon_1 = 1.9;
sdOctogon_has_returned_1 = false;
p_sdOctogon_1 = abs(p_sdOctogon_1);
p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
sdOctogon_has_returned_1 = true;
sdOctogon_return_value_inlined_71_1 = sdOctogon_return_value_1;
ocp_room_1 = min(abs(sdOctogon_return_value_inlined_70_1), abs(sdOctogon_return_value_inlined_71_1));
p_sdOctogon_1 = xy_room_1;
r_sdOctogon_1 = 1.2;
sdOctogon_has_returned_1 = false;
p_sdOctogon_1 = abs(p_sdOctogon_1);
p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
sdOctogon_has_returned_1 = true;
sdOctogon_return_value_inlined_72_1 = sdOctogon_return_value_1;
ocp_room_1 = min(max(ocp_room_1, min(.7 - abs(xy_room_1.x + 1.2), - xy_room_1.y)), max(abs(sdOctogon_return_value_inlined_72_1), min(xy_room_1.x, .7 - abs(xy_room_1.y))));
if(ocp_room_1 < .3)
{
r_room_1.mat = vec3(.39, .57, .71);
}
}
p_sdBox_1 = p_room_1;
b_sdBox_1 = frameInner_room_1 + vec3(.4, .4, .1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_73_1 = sdBox_return_value_1;
doorFrame_room_1 = max(sdBox_return_value_inlined_73_1, - doorHole_room_1);
doorWidth_room_1 = frameInner_room_1.x * .5;
p_room_1.x -= frameInner_room_1.x;
a_rot_1 = doorOpen_1 * 2.1;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_74_1 = rot_return_value_1;
p_room_1.xz *= rot_return_value_inlined_74_1;
p_room_1.x += doorWidth_room_1;
p_sdBox_1 = p_room_1;
b_sdBox_1 = vec3(doorWidth_room_1, frameInner_room_1.yz);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_75_1 = sdBox_return_value_1;
door_room_1 = sdBox_return_value_inlined_75_1;
p_room_1 = abs(p_room_1) - vec3(doorWidth_room_1 * .5, 1.1, .14);
p_sdBox_1 = p_room_1;
b_sdBox_1 = vec3(.45, .9, .1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_76_1 = sdBox_return_value_1;
p_sdBox_1 = p_room_1;
b_sdBox_1 = vec3(.35, .8, 1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_77_1 = sdBox_return_value_1;
d_room_1 = min(doorFrame_room_1, max(door_room_1, - max(sdBox_return_value_inlined_76_1, - sdBox_return_value_inlined_77_1)));
if(d_room_1 < r_room_1.d)
{
r_room_1.d = d_room_1;
r_room_1.mat = vec3(.02, .02, .024);
r_room_1.specPower = 10.;
}
room_return_value_1 = r_room_1;
room_has_returned_1 = true;
room_return_value_inlined_78_1 = room_return_value_1;
p_ed209_1 = p_map_1;
ed209_has_returned_1 = false;
f_legWalkAngle_1 = 2.;
legWalkAngle_has_returned_1 = false;
legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
legWalkAngle_has_returned_1 = true;
legWalkAngle_return_value_inlined_54_1 = legWalkAngle_return_value_1;
edZ_has_returned_1 = false;
edZ_return_value_1 = mix(5., - 2., edWalk_1);
edZ_has_returned_1 = true;
edZ_return_value_inlined_55_1 = edZ_return_value_1;
p_ed209_1.yz += vec2(legWalkAngle_return_value_inlined_54_1 * .2 + .1, - edZ_return_value_inlined_55_1);
p_legs_1 = p_ed209_1;
legs_has_returned_1 = false;
mat_setBodyMaterial_1 = r_legs_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_legs_1 = mat_setBodyMaterial_1;
f_legWalkAngle_1 = 1.;
legWalkAngle_has_returned_1 = false;
legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
legWalkAngle_has_returned_1 = true;
legWalkAngle_return_value_inlined_45_1 = legWalkAngle_return_value_1;
legAngle_legs_1 = legWalkAngle_return_value_inlined_45_1;
p_legs_1.z += .27;
a_rot_1 = legAngle_legs_1 * sign(p_legs_1.x);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_46_1 = rot_return_value_1;
p_legs_1.yz *= rot_return_value_inlined_46_1;
p_legs_1.z -= .27;
p_legs_1.y += .65;
a_rot_1 = - .2;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_47_1 = rot_return_value_1;
p_legs_1.yz *= rot_return_value_inlined_47_1;
a_rot_1 = legAngle_legs_1 * .3;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_48_1 = rot_return_value_1;
p_legs_1.xy *= rot_return_value_inlined_48_1;
pp_legs_1 = p_legs_1;
pp_legs_1.x = abs(pp_legs_1.x);
pp_legs_1.y += .48;
a_rot_1 = - .58525;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_49_1 = rot_return_value_1;
pp_legs_1.yz *= rot_return_value_inlined_49_1;
pp_legs_1.x -= .98;
cp_legs_1 = pp_legs_1;
p_legs_1 = pp_legs_1;
pp_legs_1.xz = abs(pp_legs_1.xz) - vec2(.12, .25);
p_legs_1.y += .68;
p_legs_1.xy = abs(p_legs_1.xy) - .12;
p_sdBox_1 = p_legs_1;
b_sdBox_1 = vec3(.07, .05, 1.2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_50_1 = sdBox_return_value_1;
silver_legs_1 = sdBox_return_value_inlined_50_1;
cp_legs_1 -= vec3(0, - .7, 0);
p_sdBox_1 = cp_legs_1 - vec3(0, 0, 1.15);
b_sdBox_1 = vec3(.17, .17, .07);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_51_1 = sdBox_return_value_1;
r_legs_1.d = sdBox_return_value_inlined_51_1 - .04;
cp_legs_1.z ++;
p_sdChamferedCube_1 = cp_legs_1.xzy;
r_sdChamferedCube_1 = vec2(.28 - sign(abs(cp_legs_1.z) - .3) * .01, .5).xyx;
c_sdChamferedCube_1 = .18;
sdChamferedCube_has_returned_1 = false;
p_sdBox_1 = p_sdChamferedCube_1;
b_sdBox_1 = r_sdChamferedCube_1;
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_0_1 = sdBox_return_value_1;
cube_sdChamferedCube_1 = sdBox_return_value_inlined_0_1;
a_rot_1 = .78525;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_1_1 = rot_return_value_1;
p_sdChamferedCube_1.xz *= rot_return_value_inlined_1_1;
r_sdChamferedCube_1.xz *= - c_sdChamferedCube_1 / 1.41 + 1.41;
p_sdBox_1 = p_sdChamferedCube_1;
b_sdBox_1 = r_sdChamferedCube_1;
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_2_1 = sdBox_return_value_1;
sdChamferedCube_return_value_1 = max(cube_sdChamferedCube_1, sdBox_return_value_inlined_2_1);
sdChamferedCube_has_returned_1 = true;
sdChamferedCube_return_value_inlined_52_1 = sdChamferedCube_return_value_1;
r_legs_1.d = min(r_legs_1.d, sdChamferedCube_return_value_inlined_52_1);
p_foot_1 = cp_legs_1;
foot_has_returned_1 = false;
p_foot_1.z += .8;
a_rot_1 = .86;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_29_1 = rot_return_value_1;
p_foot_1.yz *= rot_return_value_inlined_29_1;
p_toe_1 = p_foot_1;
toe_has_returned_1 = false;
p_toe_1.yz += vec2(.1, .32);
p_sdBox_1 = p_toe_1;
b_sdBox_1 = vec3(.3 + .2 * (p_toe_1.z - .18) - p_toe_1.y * .228, .3 + .2 * cos((p_toe_1.z - .18) * 3.69), .35);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_28_1 = sdBox_return_value_1;
toe_return_value_1 = max(sdBox_return_value_inlined_28_1, .1 - p_toe_1.y);
toe_has_returned_1 = true;
toe_return_value_inlined_30_1 = toe_return_value_1;
d_foot_1 = toe_return_value_inlined_30_1;
a_rot_1 = 1.57;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_31_1 = rot_return_value_1;
p_foot_1.xz *= rot_return_value_inlined_31_1;
p_foot_1.x -= .43;
p_foot_1.z = .25 - abs(p_foot_1.z);
p_toe_1 = p_foot_1;
toe_has_returned_1 = false;
p_toe_1.yz += vec2(.1, .32);
p_sdBox_1 = p_toe_1;
b_sdBox_1 = vec3(.3 + .2 * (p_toe_1.z - .18) - p_toe_1.y * .228, .3 + .2 * cos((p_toe_1.z - .18) * 3.69), .35);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_28_1 = sdBox_return_value_1;
toe_return_value_1 = max(sdBox_return_value_inlined_28_1, .1 - p_toe_1.y);
toe_has_returned_1 = true;
toe_return_value_inlined_32_1 = toe_return_value_1;
foot_return_value_1 = min(d_foot_1, toe_return_value_inlined_32_1);
foot_has_returned_1 = true;
foot_return_value_inlined_53_1 = foot_return_value_1;
r_legs_1.d = min(r_legs_1.d, foot_return_value_inlined_53_1);
if(silver_legs_1 < r_legs_1.d)
{
r_legs_1.d = silver_legs_1;
r_legs_1.mat = vec3(.8);
}
legs_return_value_1 = r_legs_1;
legs_has_returned_1 = true;
legs_return_value_inlined_56_1 = legs_return_value_1;
r_ed209_1 = legs_return_value_inlined_56_1;
f_ed209_1 = min(stretch_1 * 2., 1.);
slide_ed209_1 = f_ed209_1 < .5 ? smoothstep(0., .5, f_ed209_1) : (1. - smoothstep(.5, 1., f_ed209_1) * .2);
p_ed209_1.yz -= slide_ed209_1 * .5;
gunsUp_1 = smoothstep(0., 1., clamp((stretch_1 - .66) * 6., 0., 1.));
fireShock_has_returned_1 = false;
fireShock_return_value_1 = abs(sin(edShoot_1 * 78.5375));
fireShock_has_returned_1 = true;
fireShock_return_value_inlined_57_1 = fireShock_return_value_1;
gunsForward_1 = smoothstep(0., 1., clamp((stretch_1 - .83) * 6., 0., 1.)) + fireShock_return_value_inlined_57_1 * .5;
p_waist_1 = p_ed209_1;
waist_has_returned_1 = false;
mat_setBodyMaterial_1 = r_waist_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_waist_1 = mat_setBodyMaterial_1;
p_waist_1.y += .65;
a_rot_1 = - .2;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_33_1 = rot_return_value_1;
p_waist_1.yz *= rot_return_value_inlined_33_1;
f_legWalkAngle_1 = 1.;
legWalkAngle_has_returned_1 = false;
legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
legWalkAngle_has_returned_1 = true;
legWalkAngle_return_value_inlined_34_1 = legWalkAngle_return_value_1;
legAngle_waist_1 = legWalkAngle_return_value_inlined_34_1;
a_rot_1 = legAngle_waist_1 * .3;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_35_1 = rot_return_value_1;
p_waist_1.xy *= rot_return_value_inlined_35_1;
pp_waist_1 = p_waist_1;
pp_waist_1.y += .3;
p_sdCappedCylinder_1 = pp_waist_1.zyx;
h_sdCappedCylinder_1 = .5;
r_sdCappedCylinder_1 = .5;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_36_1 = sdCappedCylinder_return_value_1;
r_waist_1.d = max(sdCappedCylinder_return_value_inlined_36_1, p_waist_1.y + .15);
bump_waist_1 = .5 - abs(sin(p_waist_1.y * 40.)) * .03;
p_sdBox_1 = p_waist_1;
b_sdBox_1 = vec3(bump_waist_1, .15, bump_waist_1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_37_1 = sdBox_return_value_1;
d_waist_1 = sdBox_return_value_inlined_37_1;
bump_waist_1 = .3 - abs(sin(p_waist_1.x * 40.)) * .03;
pp_waist_1.y += .18;
p_sdCappedCylinder_1 = pp_waist_1.zyx;
h_sdCappedCylinder_1 = bump_waist_1;
r_sdCappedCylinder_1 = .75;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_38_1 = sdCappedCylinder_return_value_1;
d_waist_1 = min(d_waist_1, sdCappedCylinder_return_value_inlined_38_1);
pp_waist_1.x = abs(pp_waist_1.x);
a_rot_1 = - .58525 + legAngle_waist_1 * sign(p_waist_1.x);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_39_1 = rot_return_value_1;
pp_waist_1.yz *= rot_return_value_inlined_39_1;
pp_waist_1.x -= .98;
p_sdCappedCylinder_1 = pp_waist_1.zyx;
h_sdCappedCylinder_1 = .4;
r_sdCappedCylinder_1 = .24;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_40_1 = sdCappedCylinder_return_value_1;
r_waist_1.d = min(r_waist_1.d, max(sdCappedCylinder_return_value_inlined_40_1, - pp_waist_1.y));
p_sdBox_1 = pp_waist_1;
b_sdBox_1 = vec3(.24, .2, .14 + .2 * pp_waist_1.y);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_41_1 = sdBox_return_value_1;
r_waist_1.d = min(r_waist_1.d, sdBox_return_value_inlined_41_1);
p_waist_1 = pp_waist_1;
pp_waist_1.xz = abs(pp_waist_1.xz) - vec2(.12, .25);
p_sdCappedCylinder_1 = pp_waist_1.xzy;
h_sdCappedCylinder_1 = .1;
r_sdCappedCylinder_1 = .325;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_42_1 = sdCappedCylinder_return_value_1;
p_sdCappedCylinder_1 = pp_waist_1.xzy;
h_sdCappedCylinder_1 = .05;
r_sdCappedCylinder_1 = .5;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_43_1 = sdCappedCylinder_return_value_1;
r_waist_1.d = min(r_waist_1.d, max(min(sdCappedCylinder_return_value_inlined_42_1, sdCappedCylinder_return_value_inlined_43_1), pp_waist_1.y));
p_waist_1.y += .68;
p_sdBox_1 = p_waist_1;
b_sdBox_1 = vec3(sign(abs(p_waist_1.y) - .04) * .005 + .26, .2, .34);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_44_1 = sdBox_return_value_1;
r_waist_1.d = min(r_waist_1.d, sdBox_return_value_inlined_44_1);
if(d_waist_1 < r_waist_1.d)
{
r_waist_1.d = d_waist_1;
r_waist_1.mat = vec3(.02);
}
waist_return_value_1 = r_waist_1;
waist_has_returned_1 = true;
waist_return_value_inlined_58_1 = waist_return_value_1;
a_minResult_1 = r_ed209_1;
b_minResult_1 = waist_return_value_inlined_58_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_59_1 = minResult_return_value_1;
r_ed209_1 = minResult_return_value_inlined_59_1;
f_legWalkAngle_1 = 2.;
legWalkAngle_has_returned_1 = false;
legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
legWalkAngle_has_returned_1 = true;
legWalkAngle_return_value_inlined_60_1 = legWalkAngle_return_value_1;
a_rot_1 = .1 * (- edDown_1 + legWalkAngle_return_value_inlined_60_1 + smoothstep(0., 1., clamp((stretch_1 - .5) * 6., 0., 1.)) - 1.);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_61_1 = rot_return_value_1;
p_ed209_1.yz *= rot_return_value_inlined_61_1;
a_rot_1 = edTwist_1 * .2;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_62_1 = rot_return_value_1;
p_ed209_1.xz *= rot_return_value_inlined_62_1;
p_headLower_1 = p_ed209_1;
headLower_has_returned_1 = false;
op_headLower_1 = p_headLower_1;
p_headVisor_1 = p_headLower_1 * vec3(.95, - 1.4, .95);
h_headVisor_1 = 1.;
bump_headVisor_1 = 0.;
headVisor_has_returned_1 = false;
bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
p_sdBox_1 = p_headVisor_1;
b_sdBox_1 = vec3(1, h_headVisor_1, 2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
result_headVisor_1.d = sdBox_return_value_inlined_3_1;
p_headSphere_1 = p_headVisor_1;
headSphere_has_returned_1 = false;
headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
headSphere_has_returned_1 = true;
headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
result_headVisor_1.mat = vec3(.05);
result_headVisor_1.specPower = 30.;
headVisor_return_value_1 = result_headVisor_1;
headVisor_has_returned_1 = true;
headVisor_return_value_inlined_5_1 = headVisor_return_value_1;
r_headLower_1 = headVisor_return_value_inlined_5_1;
p_headVisor_1 = (p_headLower_1 + vec3(0, .01, 0)) * vec3(.95);
h_headVisor_1 = 1.;
bump_headVisor_1 = 0.;
headVisor_has_returned_1 = false;
bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
p_sdBox_1 = p_headVisor_1;
b_sdBox_1 = vec3(1, h_headVisor_1, 2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
result_headVisor_1.d = sdBox_return_value_inlined_3_1;
p_headSphere_1 = p_headVisor_1;
headSphere_has_returned_1 = false;
headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
headSphere_has_returned_1 = true;
headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
result_headVisor_1.mat = vec3(.05);
result_headVisor_1.specPower = 30.;
headVisor_return_value_1 = result_headVisor_1;
headVisor_has_returned_1 = true;
headVisor_return_value_inlined_6_1 = headVisor_return_value_1;
r_headLower_1.d = min(r_headLower_1.d, max(max(headVisor_return_value_inlined_6_1.d, p_headLower_1.y - .35), p_headLower_1.y * .625 - p_headLower_1.z - .66));
a_rot_1 = .075 * (gunsUp_1 - 1.) * sign(p_headLower_1.x);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_7_1 = rot_return_value_1;
p_headLower_1.xy *= rot_return_value_inlined_7_1;
p_headLower_1.x = abs(p_headLower_1.x) - 1.33;
p_headLower_1.y -= .1 - p_headLower_1.x * .1;
p_sdBox_1 = p_headLower_1;
b_sdBox_1 = vec3(.4, .06 * (1. - p_headLower_1.x), .3 - p_headLower_1.x * .2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_8_1 = sdBox_return_value_1;
r_headLower_1.d = min(r_headLower_1.d, sdBox_return_value_inlined_8_1);
p_headLower_1 = op_headLower_1;
p_headLower_1.y = abs(abs(p_headLower_1.y + .147) - .0556) - .0278;
p_sdBox_1 = p_headLower_1 + vec3(0, 0, 1.5);
b_sdBox_1 = vec3(mix(.25, .55, - op_headLower_1.y), .015, .1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_9_1 = sdBox_return_value_1;
r_headLower_1.d = max(r_headLower_1.d, - sdBox_return_value_inlined_9_1);
p_headLower_1 = op_headLower_1;
p_headLower_1.y = abs(p_headLower_1.y + .16) - .06;
p_headLower_1.z -= - 1.1;
p_sdCappedCylinder_1 = p_headLower_1.xzy;
h_sdCappedCylinder_1 = 1.;
r_sdCappedCylinder_1 = .03;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_10_1 = sdCappedCylinder_return_value_1;
p_sdCappedCylinder_1 = p_headLower_1.xzy;
h_sdCappedCylinder_1 = .55;
r_sdCappedCylinder_1 = 1.;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_11_1 = sdCappedCylinder_return_value_1;
r_headLower_1.d = max(r_headLower_1.d, - max(max(sdCappedCylinder_return_value_inlined_10_1, - sdCappedCylinder_return_value_inlined_11_1), p_headLower_1.z + .2));
mat_setBodyMaterial_1 = r_headLower_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_headLower_1 = mat_setBodyMaterial_1;
headLower_return_value_1 = r_headLower_1;
headLower_has_returned_1 = true;
headLower_return_value_inlined_63_1 = headLower_return_value_1;
a_minResult_1 = r_ed209_1;
b_minResult_1 = headLower_return_value_inlined_63_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_64_1 = minResult_return_value_1;
p_headVisor_1 = p_ed209_1;
h_headVisor_1 = .8;
bump_headVisor_1 = 1.;
headVisor_has_returned_1 = false;
bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
p_sdBox_1 = p_headVisor_1;
b_sdBox_1 = vec3(1, h_headVisor_1, 2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
result_headVisor_1.d = sdBox_return_value_inlined_3_1;
p_headSphere_1 = p_headVisor_1;
headSphere_has_returned_1 = false;
headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
headSphere_has_returned_1 = true;
headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
result_headVisor_1.mat = vec3(.05);
result_headVisor_1.specPower = 30.;
headVisor_return_value_1 = result_headVisor_1;
headVisor_has_returned_1 = true;
headVisor_return_value_inlined_65_1 = headVisor_return_value_1;
a_minResult_1 = minResult_return_value_inlined_64_1;
b_minResult_1 = headVisor_return_value_inlined_65_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_66_1 = minResult_return_value_1;
p_arms_1 = p_ed209_1;
arms_has_returned_1 = false;
mat_setBodyMaterial_1 = r_arms_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_arms_1 = mat_setBodyMaterial_1;
p_arms_1.x = abs(p_arms_1.x);
p_arms_1.yz += vec2(.24, 0);
a_rot_1 = .15 * (gunsUp_1 - 1.);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_23_1 = rot_return_value_1;
p_arms_1.xy *= rot_return_value_inlined_23_1;
p_sdCapsule_1 = p_arms_1;
a_sdCapsule_1 = vec3(0);
b_sdCapsule_1 = vec3(1.5, 0, 0);
r_sdCapsule_1 = .2;
sdCapsule_has_returned_1 = false;
pa_sdCapsule_1 = p_sdCapsule_1 - a_sdCapsule_1;
ba_sdCapsule_1 = b_sdCapsule_1 - a_sdCapsule_1;
sdCapsule_return_value_1 = length(pa_sdCapsule_1 - ba_sdCapsule_1 * clamp(dot(pa_sdCapsule_1, ba_sdCapsule_1) / dot(ba_sdCapsule_1, ba_sdCapsule_1), 0., 1.)) - r_sdCapsule_1;
sdCapsule_has_returned_1 = true;
sdCapsule_return_value_inlined_24_1 = sdCapsule_return_value_1;
p_sdCapsule_1 = p_arms_1;
a_sdCapsule_1 = vec3(1.5, 0, 0);
b_sdCapsule_1 = wrist_arms_1;
r_sdCapsule_1 = .2;
sdCapsule_has_returned_1 = false;
pa_sdCapsule_1 = p_sdCapsule_1 - a_sdCapsule_1;
ba_sdCapsule_1 = b_sdCapsule_1 - a_sdCapsule_1;
sdCapsule_return_value_1 = length(pa_sdCapsule_1 - ba_sdCapsule_1 * clamp(dot(pa_sdCapsule_1, ba_sdCapsule_1) / dot(ba_sdCapsule_1, ba_sdCapsule_1), 0., 1.)) - r_sdCapsule_1;
sdCapsule_has_returned_1 = true;
sdCapsule_return_value_inlined_25_1 = sdCapsule_return_value_1;
r_arms_1.d = min(sdCapsule_return_value_inlined_24_1, sdCapsule_return_value_inlined_25_1);
p_arms_1 -= wrist_arms_1;
p_arms_1.z -= gunsForward_1 * .15;
p_gunPod_1 = p_arms_1;
gunPod_has_returned_1 = false;
mat_setBodyMaterial_1 = r_gunPod_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_gunPod_1 = mat_setBodyMaterial_1;
p_gunPod_1.yz += vec2(.1, .45);
pp_gunPod_1 = p_gunPod_1;
pp_gunPod_1.z = abs(pp_gunPod_1.z) - .5;
p_sdCappedCone_1 = pp_gunPod_1;
a_sdCappedCone_1 = vec3(0);
b_sdCappedCone_1 = vec3(0, 0, - .1);
ra_sdCappedCone_1 = .35 - .1;
rb_sdCappedCone_1 = .35;
sdCappedCone_has_returned_1 = false;
rba_sdCappedCone_1 = rb_sdCappedCone_1 - ra_sdCappedCone_1;
baba_sdCappedCone_1 = dot(b_sdCappedCone_1 - a_sdCappedCone_1, b_sdCappedCone_1 - a_sdCappedCone_1);
papa_sdCappedCone_1 = dot(p_sdCappedCone_1 - a_sdCappedCone_1, p_sdCappedCone_1 - a_sdCappedCone_1);
paba_sdCappedCone_1 = dot(p_sdCappedCone_1 - a_sdCappedCone_1, b_sdCappedCone_1 - a_sdCappedCone_1) / baba_sdCappedCone_1;
x_sdCappedCone_1 = sqrt(papa_sdCappedCone_1 - paba_sdCappedCone_1 * paba_sdCappedCone_1 * baba_sdCappedCone_1);
cax_sdCappedCone_1 = max(0., x_sdCappedCone_1 - ((paba_sdCappedCone_1 < .5) ? ra_sdCappedCone_1 : rb_sdCappedCone_1));
cay_sdCappedCone_1 = abs(paba_sdCappedCone_1 - .5) - .5;
f_sdCappedCone_1 = clamp((rba_sdCappedCone_1 * (x_sdCappedCone_1 - ra_sdCappedCone_1) + paba_sdCappedCone_1 * baba_sdCappedCone_1) / (rba_sdCappedCone_1 * rba_sdCappedCone_1 + baba_sdCappedCone_1), 0., 1.);
cbx_sdCappedCone_1 = x_sdCappedCone_1 - ra_sdCappedCone_1 - f_sdCappedCone_1 * rba_sdCappedCone_1;
cby_sdCappedCone_1 = paba_sdCappedCone_1 - f_sdCappedCone_1;
sdCappedCone_return_value_1 = ((cbx_sdCappedCone_1 < 0. && cay_sdCappedCone_1 < 0.) ? - 1. : 1.) * sqrt(min(cax_sdCappedCone_1 * cax_sdCappedCone_1 + cay_sdCappedCone_1 * cay_sdCappedCone_1 * baba_sdCappedCone_1, cbx_sdCappedCone_1 * cbx_sdCappedCone_1 + cby_sdCappedCone_1 * cby_sdCappedCone_1 * baba_sdCappedCone_1));
sdCappedCone_has_returned_1 = true;
sdCappedCone_return_value_inlined_12_1 = sdCappedCone_return_value_1;
r_gunPod_1.d = sdCappedCone_return_value_inlined_12_1;
p_sdCappedCylinder_1 = p_gunPod_1;
h_sdCappedCylinder_1 = .35;
r_sdCappedCylinder_1 = .4;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_13_1 = sdCappedCylinder_return_value_1;
r_gunPod_1.d = min(r_gunPod_1.d, sdCappedCylinder_return_value_inlined_13_1);
pp_gunPod_1 = vec3(p_gunPod_1.x, .28 - p_gunPod_1.y, p_gunPod_1.z);
p_sdTriPrism_1 = pp_gunPod_1;
h_sdTriPrism_1 = vec2(.1, .5);
sdTriPrism_has_returned_1 = false;
q_sdTriPrism_1 = abs(p_sdTriPrism_1);
sdTriPrism_return_value_1 = max(q_sdTriPrism_1.z - h_sdTriPrism_1.y, max(q_sdTriPrism_1.x * .866025 + p_sdTriPrism_1.y * .5, - p_sdTriPrism_1.y) - h_sdTriPrism_1.x * .5);
sdTriPrism_has_returned_1 = true;
sdTriPrism_return_value_inlined_14_1 = sdTriPrism_return_value_1;
r_gunPod_1.d = min(r_gunPod_1.d, sdTriPrism_return_value_inlined_14_1);
pp_gunPod_1 = p_gunPod_1;
pp_gunPod_1.x = abs(p_gunPod_1.x);
a_rot_1 = .78525;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_15_1 = rot_return_value_1;
pp_gunPod_1.xy *= rot_return_value_inlined_15_1;
bump_gunPod_1 = sign(sin(pp_gunPod_1.z * 33.3)) * .003;
p_sdBox_1 = pp_gunPod_1;
b_sdBox_1 = vec3(.1 - bump_gunPod_1, .38 - bump_gunPod_1, .34);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_16_1 = sdBox_return_value_1;
d_gunPod_1 = sdBox_return_value_inlined_16_1 - .02;
pp_gunPod_1 = p_gunPod_1 - vec3(0, 0, - .6);
pp_gunPod_1.x = abs(pp_gunPod_1.x) - .1;
p_sdCappedCylinder_1 = pp_gunPod_1;
h_sdCappedCylinder_1 = .06;
r_sdCappedCylinder_1 = .15;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_17_1 = sdCappedCylinder_return_value_1;
p_sdCappedCylinder_1 = pp_gunPod_1 + vec3(0, .12, - .05);
h_sdCappedCylinder_1 = .06;
r_sdCappedCylinder_1 = .05;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_18_1 = sdCappedCylinder_return_value_1;
p_sdBox_1 = p_gunPod_1 + vec3(0, 0, .54);
b_sdBox_1 = vec3(.1, .06, .04);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_19_1 = sdBox_return_value_1;
d_gunPod_1 = min(min(min(d_gunPod_1, sdCappedCylinder_return_value_inlined_17_1), sdCappedCylinder_return_value_inlined_18_1), sdBox_return_value_inlined_19_1);
if(d_gunPod_1 < r_gunPod_1.d)
{
p_sdCappedCylinder_1 = pp_gunPod_1 + vec3(0, 0, .1);
h_sdCappedCylinder_1 = .03;
r_sdCappedCylinder_1 = .2;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_20_1 = sdCappedCylinder_return_value_1;
d_gunPod_1 = max(d_gunPod_1, - sdCappedCylinder_return_value_inlined_20_1);
r_gunPod_1.d = d_gunPod_1;
r_gunPod_1.mat = vec3(.02);
}
fireShock_has_returned_1 = false;
fireShock_return_value_1 = abs(sin(edShoot_1 * 78.5375));
fireShock_has_returned_1 = true;
fireShock_return_value_inlined_21_1 = fireShock_return_value_1;
fs_gunPod_1 = fireShock_return_value_inlined_21_1;
if(fs_gunPod_1 > .5)
{
p_sdCappedCylinder_1 = pp_gunPod_1;
h_sdCappedCylinder_1 = .01 + pp_gunPod_1.z * .05;
r_sdCappedCylinder_1 = fract(fs_gunPod_1 * 3322.423) * .5 + .9;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_22_1 = sdCappedCylinder_return_value_1;
d_gunPod_1 = sdCappedCylinder_return_value_inlined_22_1;
if(d_gunPod_1 < r_gunPod_1.d)
{
r_gunPod_1.d = d_gunPod_1;
r_gunPod_1.mat = vec3(1);
glow_1 += .1 / (.01 + d_gunPod_1 * d_gunPod_1 * 4e2);
}
}
gunPod_return_value_1 = r_gunPod_1;
gunPod_has_returned_1 = true;
gunPod_return_value_inlined_26_1 = gunPod_return_value_1;
a_minResult_1 = r_arms_1;
b_minResult_1 = gunPod_return_value_inlined_26_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_27_1 = minResult_return_value_1;
arms_return_value_1 = minResult_return_value_inlined_27_1;
arms_has_returned_1 = true;
arms_return_value_inlined_67_1 = arms_return_value_1;
a_minResult_1 = minResult_return_value_inlined_66_1;
b_minResult_1 = arms_return_value_inlined_67_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_68_1 = minResult_return_value_1;
ed209_return_value_1 = minResult_return_value_inlined_68_1;
ed209_has_returned_1 = true;
ed209_return_value_inlined_79_1 = ed209_return_value_1;
a_minResult_1 = room_return_value_inlined_78_1;
b_minResult_1 = ed209_return_value_inlined_79_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_80_1 = minResult_return_value_1;
r_map_1 = minResult_return_value_inlined_80_1;
gnd_map_1 = length(p_map_1.y + 3.);
if(gnd_map_1 < r_map_1.d)
{
r_map_1.d = gnd_map_1;
r_map_1.mat = vec3(.1);
}
map_return_value_1 = r_map_1;
map_has_returned_1 = true;
map_return_value_inlined_83_1 = map_return_value_1;
p_map_1 = p_calcNormal_1 + e_calcNormal_1.yxy;
map_has_returned_1 = false;
p_room_1 = p_map_1;
room_has_returned_1 = false;
r_room_1.mat = vec3(.4);
r_room_1.specPower = 1e7;
xy_room_1 = p_room_1.xy - vec2(0, 2);
p_room_1.x = abs(p_room_1.x);
p_room_1.yz += vec2(.5, - 3.4);
p_sdBox_1 = p_room_1;
b_sdBox_1 = frameInner_room_1 + vec3(0, 0, 1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_69_1 = sdBox_return_value_1;
doorHole_room_1 = sdBox_return_value_inlined_69_1;
backWall_room_1 = length(p_room_1.z - 8.);
r_room_1.d = min(backWall_room_1, max(length(p_room_1.z), - doorHole_room_1 + .1));
if(r_room_1.d == backWall_room_1)
{
p_sdOctogon_1 = xy_room_1;
r_sdOctogon_1 = 2.6;
sdOctogon_has_returned_1 = false;
p_sdOctogon_1 = abs(p_sdOctogon_1);
p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
sdOctogon_has_returned_1 = true;
sdOctogon_return_value_inlined_70_1 = sdOctogon_return_value_1;
p_sdOctogon_1 = xy_room_1;
r_sdOctogon_1 = 1.9;
sdOctogon_has_returned_1 = false;
p_sdOctogon_1 = abs(p_sdOctogon_1);
p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
sdOctogon_has_returned_1 = true;
sdOctogon_return_value_inlined_71_1 = sdOctogon_return_value_1;
ocp_room_1 = min(abs(sdOctogon_return_value_inlined_70_1), abs(sdOctogon_return_value_inlined_71_1));
p_sdOctogon_1 = xy_room_1;
r_sdOctogon_1 = 1.2;
sdOctogon_has_returned_1 = false;
p_sdOctogon_1 = abs(p_sdOctogon_1);
p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
sdOctogon_has_returned_1 = true;
sdOctogon_return_value_inlined_72_1 = sdOctogon_return_value_1;
ocp_room_1 = min(max(ocp_room_1, min(.7 - abs(xy_room_1.x + 1.2), - xy_room_1.y)), max(abs(sdOctogon_return_value_inlined_72_1), min(xy_room_1.x, .7 - abs(xy_room_1.y))));
if(ocp_room_1 < .3)
{
r_room_1.mat = vec3(.39, .57, .71);
}
}
p_sdBox_1 = p_room_1;
b_sdBox_1 = frameInner_room_1 + vec3(.4, .4, .1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_73_1 = sdBox_return_value_1;
doorFrame_room_1 = max(sdBox_return_value_inlined_73_1, - doorHole_room_1);
doorWidth_room_1 = frameInner_room_1.x * .5;
p_room_1.x -= frameInner_room_1.x;
a_rot_1 = doorOpen_1 * 2.1;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_74_1 = rot_return_value_1;
p_room_1.xz *= rot_return_value_inlined_74_1;
p_room_1.x += doorWidth_room_1;
p_sdBox_1 = p_room_1;
b_sdBox_1 = vec3(doorWidth_room_1, frameInner_room_1.yz);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_75_1 = sdBox_return_value_1;
door_room_1 = sdBox_return_value_inlined_75_1;
p_room_1 = abs(p_room_1) - vec3(doorWidth_room_1 * .5, 1.1, .14);
p_sdBox_1 = p_room_1;
b_sdBox_1 = vec3(.45, .9, .1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_76_1 = sdBox_return_value_1;
p_sdBox_1 = p_room_1;
b_sdBox_1 = vec3(.35, .8, 1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_77_1 = sdBox_return_value_1;
d_room_1 = min(doorFrame_room_1, max(door_room_1, - max(sdBox_return_value_inlined_76_1, - sdBox_return_value_inlined_77_1)));
if(d_room_1 < r_room_1.d)
{
r_room_1.d = d_room_1;
r_room_1.mat = vec3(.02, .02, .024);
r_room_1.specPower = 10.;
}
room_return_value_1 = r_room_1;
room_has_returned_1 = true;
room_return_value_inlined_78_1 = room_return_value_1;
p_ed209_1 = p_map_1;
ed209_has_returned_1 = false;
f_legWalkAngle_1 = 2.;
legWalkAngle_has_returned_1 = false;
legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
legWalkAngle_has_returned_1 = true;
legWalkAngle_return_value_inlined_54_1 = legWalkAngle_return_value_1;
edZ_has_returned_1 = false;
edZ_return_value_1 = mix(5., - 2., edWalk_1);
edZ_has_returned_1 = true;
edZ_return_value_inlined_55_1 = edZ_return_value_1;
p_ed209_1.yz += vec2(legWalkAngle_return_value_inlined_54_1 * .2 + .1, - edZ_return_value_inlined_55_1);
p_legs_1 = p_ed209_1;
legs_has_returned_1 = false;
mat_setBodyMaterial_1 = r_legs_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_legs_1 = mat_setBodyMaterial_1;
f_legWalkAngle_1 = 1.;
legWalkAngle_has_returned_1 = false;
legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
legWalkAngle_has_returned_1 = true;
legWalkAngle_return_value_inlined_45_1 = legWalkAngle_return_value_1;
legAngle_legs_1 = legWalkAngle_return_value_inlined_45_1;
p_legs_1.z += .27;
a_rot_1 = legAngle_legs_1 * sign(p_legs_1.x);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_46_1 = rot_return_value_1;
p_legs_1.yz *= rot_return_value_inlined_46_1;
p_legs_1.z -= .27;
p_legs_1.y += .65;
a_rot_1 = - .2;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_47_1 = rot_return_value_1;
p_legs_1.yz *= rot_return_value_inlined_47_1;
a_rot_1 = legAngle_legs_1 * .3;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_48_1 = rot_return_value_1;
p_legs_1.xy *= rot_return_value_inlined_48_1;
pp_legs_1 = p_legs_1;
pp_legs_1.x = abs(pp_legs_1.x);
pp_legs_1.y += .48;
a_rot_1 = - .58525;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_49_1 = rot_return_value_1;
pp_legs_1.yz *= rot_return_value_inlined_49_1;
pp_legs_1.x -= .98;
cp_legs_1 = pp_legs_1;
p_legs_1 = pp_legs_1;
pp_legs_1.xz = abs(pp_legs_1.xz) - vec2(.12, .25);
p_legs_1.y += .68;
p_legs_1.xy = abs(p_legs_1.xy) - .12;
p_sdBox_1 = p_legs_1;
b_sdBox_1 = vec3(.07, .05, 1.2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_50_1 = sdBox_return_value_1;
silver_legs_1 = sdBox_return_value_inlined_50_1;
cp_legs_1 -= vec3(0, - .7, 0);
p_sdBox_1 = cp_legs_1 - vec3(0, 0, 1.15);
b_sdBox_1 = vec3(.17, .17, .07);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_51_1 = sdBox_return_value_1;
r_legs_1.d = sdBox_return_value_inlined_51_1 - .04;
cp_legs_1.z ++;
p_sdChamferedCube_1 = cp_legs_1.xzy;
r_sdChamferedCube_1 = vec2(.28 - sign(abs(cp_legs_1.z) - .3) * .01, .5).xyx;
c_sdChamferedCube_1 = .18;
sdChamferedCube_has_returned_1 = false;
p_sdBox_1 = p_sdChamferedCube_1;
b_sdBox_1 = r_sdChamferedCube_1;
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_0_1 = sdBox_return_value_1;
cube_sdChamferedCube_1 = sdBox_return_value_inlined_0_1;
a_rot_1 = .78525;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_1_1 = rot_return_value_1;
p_sdChamferedCube_1.xz *= rot_return_value_inlined_1_1;
r_sdChamferedCube_1.xz *= - c_sdChamferedCube_1 / 1.41 + 1.41;
p_sdBox_1 = p_sdChamferedCube_1;
b_sdBox_1 = r_sdChamferedCube_1;
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_2_1 = sdBox_return_value_1;
sdChamferedCube_return_value_1 = max(cube_sdChamferedCube_1, sdBox_return_value_inlined_2_1);
sdChamferedCube_has_returned_1 = true;
sdChamferedCube_return_value_inlined_52_1 = sdChamferedCube_return_value_1;
r_legs_1.d = min(r_legs_1.d, sdChamferedCube_return_value_inlined_52_1);
p_foot_1 = cp_legs_1;
foot_has_returned_1 = false;
p_foot_1.z += .8;
a_rot_1 = .86;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_29_1 = rot_return_value_1;
p_foot_1.yz *= rot_return_value_inlined_29_1;
p_toe_1 = p_foot_1;
toe_has_returned_1 = false;
p_toe_1.yz += vec2(.1, .32);
p_sdBox_1 = p_toe_1;
b_sdBox_1 = vec3(.3 + .2 * (p_toe_1.z - .18) - p_toe_1.y * .228, .3 + .2 * cos((p_toe_1.z - .18) * 3.69), .35);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_28_1 = sdBox_return_value_1;
toe_return_value_1 = max(sdBox_return_value_inlined_28_1, .1 - p_toe_1.y);
toe_has_returned_1 = true;
toe_return_value_inlined_30_1 = toe_return_value_1;
d_foot_1 = toe_return_value_inlined_30_1;
a_rot_1 = 1.57;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_31_1 = rot_return_value_1;
p_foot_1.xz *= rot_return_value_inlined_31_1;
p_foot_1.x -= .43;
p_foot_1.z = .25 - abs(p_foot_1.z);
p_toe_1 = p_foot_1;
toe_has_returned_1 = false;
p_toe_1.yz += vec2(.1, .32);
p_sdBox_1 = p_toe_1;
b_sdBox_1 = vec3(.3 + .2 * (p_toe_1.z - .18) - p_toe_1.y * .228, .3 + .2 * cos((p_toe_1.z - .18) * 3.69), .35);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_28_1 = sdBox_return_value_1;
toe_return_value_1 = max(sdBox_return_value_inlined_28_1, .1 - p_toe_1.y);
toe_has_returned_1 = true;
toe_return_value_inlined_32_1 = toe_return_value_1;
foot_return_value_1 = min(d_foot_1, toe_return_value_inlined_32_1);
foot_has_returned_1 = true;
foot_return_value_inlined_53_1 = foot_return_value_1;
r_legs_1.d = min(r_legs_1.d, foot_return_value_inlined_53_1);
if(silver_legs_1 < r_legs_1.d)
{
r_legs_1.d = silver_legs_1;
r_legs_1.mat = vec3(.8);
}
legs_return_value_1 = r_legs_1;
legs_has_returned_1 = true;
legs_return_value_inlined_56_1 = legs_return_value_1;
r_ed209_1 = legs_return_value_inlined_56_1;
f_ed209_1 = min(stretch_1 * 2., 1.);
slide_ed209_1 = f_ed209_1 < .5 ? smoothstep(0., .5, f_ed209_1) : (1. - smoothstep(.5, 1., f_ed209_1) * .2);
p_ed209_1.yz -= slide_ed209_1 * .5;
gunsUp_1 = smoothstep(0., 1., clamp((stretch_1 - .66) * 6., 0., 1.));
fireShock_has_returned_1 = false;
fireShock_return_value_1 = abs(sin(edShoot_1 * 78.5375));
fireShock_has_returned_1 = true;
fireShock_return_value_inlined_57_1 = fireShock_return_value_1;
gunsForward_1 = smoothstep(0., 1., clamp((stretch_1 - .83) * 6., 0., 1.)) + fireShock_return_value_inlined_57_1 * .5;
p_waist_1 = p_ed209_1;
waist_has_returned_1 = false;
mat_setBodyMaterial_1 = r_waist_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_waist_1 = mat_setBodyMaterial_1;
p_waist_1.y += .65;
a_rot_1 = - .2;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_33_1 = rot_return_value_1;
p_waist_1.yz *= rot_return_value_inlined_33_1;
f_legWalkAngle_1 = 1.;
legWalkAngle_has_returned_1 = false;
legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
legWalkAngle_has_returned_1 = true;
legWalkAngle_return_value_inlined_34_1 = legWalkAngle_return_value_1;
legAngle_waist_1 = legWalkAngle_return_value_inlined_34_1;
a_rot_1 = legAngle_waist_1 * .3;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_35_1 = rot_return_value_1;
p_waist_1.xy *= rot_return_value_inlined_35_1;
pp_waist_1 = p_waist_1;
pp_waist_1.y += .3;
p_sdCappedCylinder_1 = pp_waist_1.zyx;
h_sdCappedCylinder_1 = .5;
r_sdCappedCylinder_1 = .5;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_36_1 = sdCappedCylinder_return_value_1;
r_waist_1.d = max(sdCappedCylinder_return_value_inlined_36_1, p_waist_1.y + .15);
bump_waist_1 = .5 - abs(sin(p_waist_1.y * 40.)) * .03;
p_sdBox_1 = p_waist_1;
b_sdBox_1 = vec3(bump_waist_1, .15, bump_waist_1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_37_1 = sdBox_return_value_1;
d_waist_1 = sdBox_return_value_inlined_37_1;
bump_waist_1 = .3 - abs(sin(p_waist_1.x * 40.)) * .03;
pp_waist_1.y += .18;
p_sdCappedCylinder_1 = pp_waist_1.zyx;
h_sdCappedCylinder_1 = bump_waist_1;
r_sdCappedCylinder_1 = .75;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_38_1 = sdCappedCylinder_return_value_1;
d_waist_1 = min(d_waist_1, sdCappedCylinder_return_value_inlined_38_1);
pp_waist_1.x = abs(pp_waist_1.x);
a_rot_1 = - .58525 + legAngle_waist_1 * sign(p_waist_1.x);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_39_1 = rot_return_value_1;
pp_waist_1.yz *= rot_return_value_inlined_39_1;
pp_waist_1.x -= .98;
p_sdCappedCylinder_1 = pp_waist_1.zyx;
h_sdCappedCylinder_1 = .4;
r_sdCappedCylinder_1 = .24;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_40_1 = sdCappedCylinder_return_value_1;
r_waist_1.d = min(r_waist_1.d, max(sdCappedCylinder_return_value_inlined_40_1, - pp_waist_1.y));
p_sdBox_1 = pp_waist_1;
b_sdBox_1 = vec3(.24, .2, .14 + .2 * pp_waist_1.y);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_41_1 = sdBox_return_value_1;
r_waist_1.d = min(r_waist_1.d, sdBox_return_value_inlined_41_1);
p_waist_1 = pp_waist_1;
pp_waist_1.xz = abs(pp_waist_1.xz) - vec2(.12, .25);
p_sdCappedCylinder_1 = pp_waist_1.xzy;
h_sdCappedCylinder_1 = .1;
r_sdCappedCylinder_1 = .325;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_42_1 = sdCappedCylinder_return_value_1;
p_sdCappedCylinder_1 = pp_waist_1.xzy;
h_sdCappedCylinder_1 = .05;
r_sdCappedCylinder_1 = .5;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_43_1 = sdCappedCylinder_return_value_1;
r_waist_1.d = min(r_waist_1.d, max(min(sdCappedCylinder_return_value_inlined_42_1, sdCappedCylinder_return_value_inlined_43_1), pp_waist_1.y));
p_waist_1.y += .68;
p_sdBox_1 = p_waist_1;
b_sdBox_1 = vec3(sign(abs(p_waist_1.y) - .04) * .005 + .26, .2, .34);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_44_1 = sdBox_return_value_1;
r_waist_1.d = min(r_waist_1.d, sdBox_return_value_inlined_44_1);
if(d_waist_1 < r_waist_1.d)
{
r_waist_1.d = d_waist_1;
r_waist_1.mat = vec3(.02);
}
waist_return_value_1 = r_waist_1;
waist_has_returned_1 = true;
waist_return_value_inlined_58_1 = waist_return_value_1;
a_minResult_1 = r_ed209_1;
b_minResult_1 = waist_return_value_inlined_58_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_59_1 = minResult_return_value_1;
r_ed209_1 = minResult_return_value_inlined_59_1;
f_legWalkAngle_1 = 2.;
legWalkAngle_has_returned_1 = false;
legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
legWalkAngle_has_returned_1 = true;
legWalkAngle_return_value_inlined_60_1 = legWalkAngle_return_value_1;
a_rot_1 = .1 * (- edDown_1 + legWalkAngle_return_value_inlined_60_1 + smoothstep(0., 1., clamp((stretch_1 - .5) * 6., 0., 1.)) - 1.);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_61_1 = rot_return_value_1;
p_ed209_1.yz *= rot_return_value_inlined_61_1;
a_rot_1 = edTwist_1 * .2;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_62_1 = rot_return_value_1;
p_ed209_1.xz *= rot_return_value_inlined_62_1;
p_headLower_1 = p_ed209_1;
headLower_has_returned_1 = false;
op_headLower_1 = p_headLower_1;
p_headVisor_1 = p_headLower_1 * vec3(.95, - 1.4, .95);
h_headVisor_1 = 1.;
bump_headVisor_1 = 0.;
headVisor_has_returned_1 = false;
bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
p_sdBox_1 = p_headVisor_1;
b_sdBox_1 = vec3(1, h_headVisor_1, 2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
result_headVisor_1.d = sdBox_return_value_inlined_3_1;
p_headSphere_1 = p_headVisor_1;
headSphere_has_returned_1 = false;
headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
headSphere_has_returned_1 = true;
headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
result_headVisor_1.mat = vec3(.05);
result_headVisor_1.specPower = 30.;
headVisor_return_value_1 = result_headVisor_1;
headVisor_has_returned_1 = true;
headVisor_return_value_inlined_5_1 = headVisor_return_value_1;
r_headLower_1 = headVisor_return_value_inlined_5_1;
p_headVisor_1 = (p_headLower_1 + vec3(0, .01, 0)) * vec3(.95);
h_headVisor_1 = 1.;
bump_headVisor_1 = 0.;
headVisor_has_returned_1 = false;
bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
p_sdBox_1 = p_headVisor_1;
b_sdBox_1 = vec3(1, h_headVisor_1, 2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
result_headVisor_1.d = sdBox_return_value_inlined_3_1;
p_headSphere_1 = p_headVisor_1;
headSphere_has_returned_1 = false;
headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
headSphere_has_returned_1 = true;
headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
result_headVisor_1.mat = vec3(.05);
result_headVisor_1.specPower = 30.;
headVisor_return_value_1 = result_headVisor_1;
headVisor_has_returned_1 = true;
headVisor_return_value_inlined_6_1 = headVisor_return_value_1;
r_headLower_1.d = min(r_headLower_1.d, max(max(headVisor_return_value_inlined_6_1.d, p_headLower_1.y - .35), p_headLower_1.y * .625 - p_headLower_1.z - .66));
a_rot_1 = .075 * (gunsUp_1 - 1.) * sign(p_headLower_1.x);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_7_1 = rot_return_value_1;
p_headLower_1.xy *= rot_return_value_inlined_7_1;
p_headLower_1.x = abs(p_headLower_1.x) - 1.33;
p_headLower_1.y -= .1 - p_headLower_1.x * .1;
p_sdBox_1 = p_headLower_1;
b_sdBox_1 = vec3(.4, .06 * (1. - p_headLower_1.x), .3 - p_headLower_1.x * .2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_8_1 = sdBox_return_value_1;
r_headLower_1.d = min(r_headLower_1.d, sdBox_return_value_inlined_8_1);
p_headLower_1 = op_headLower_1;
p_headLower_1.y = abs(abs(p_headLower_1.y + .147) - .0556) - .0278;
p_sdBox_1 = p_headLower_1 + vec3(0, 0, 1.5);
b_sdBox_1 = vec3(mix(.25, .55, - op_headLower_1.y), .015, .1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_9_1 = sdBox_return_value_1;
r_headLower_1.d = max(r_headLower_1.d, - sdBox_return_value_inlined_9_1);
p_headLower_1 = op_headLower_1;
p_headLower_1.y = abs(p_headLower_1.y + .16) - .06;
p_headLower_1.z -= - 1.1;
p_sdCappedCylinder_1 = p_headLower_1.xzy;
h_sdCappedCylinder_1 = 1.;
r_sdCappedCylinder_1 = .03;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_10_1 = sdCappedCylinder_return_value_1;
p_sdCappedCylinder_1 = p_headLower_1.xzy;
h_sdCappedCylinder_1 = .55;
r_sdCappedCylinder_1 = 1.;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_11_1 = sdCappedCylinder_return_value_1;
r_headLower_1.d = max(r_headLower_1.d, - max(max(sdCappedCylinder_return_value_inlined_10_1, - sdCappedCylinder_return_value_inlined_11_1), p_headLower_1.z + .2));
mat_setBodyMaterial_1 = r_headLower_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_headLower_1 = mat_setBodyMaterial_1;
headLower_return_value_1 = r_headLower_1;
headLower_has_returned_1 = true;
headLower_return_value_inlined_63_1 = headLower_return_value_1;
a_minResult_1 = r_ed209_1;
b_minResult_1 = headLower_return_value_inlined_63_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_64_1 = minResult_return_value_1;
p_headVisor_1 = p_ed209_1;
h_headVisor_1 = .8;
bump_headVisor_1 = 1.;
headVisor_has_returned_1 = false;
bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
p_sdBox_1 = p_headVisor_1;
b_sdBox_1 = vec3(1, h_headVisor_1, 2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
result_headVisor_1.d = sdBox_return_value_inlined_3_1;
p_headSphere_1 = p_headVisor_1;
headSphere_has_returned_1 = false;
headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
headSphere_has_returned_1 = true;
headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
result_headVisor_1.mat = vec3(.05);
result_headVisor_1.specPower = 30.;
headVisor_return_value_1 = result_headVisor_1;
headVisor_has_returned_1 = true;
headVisor_return_value_inlined_65_1 = headVisor_return_value_1;
a_minResult_1 = minResult_return_value_inlined_64_1;
b_minResult_1 = headVisor_return_value_inlined_65_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_66_1 = minResult_return_value_1;
p_arms_1 = p_ed209_1;
arms_has_returned_1 = false;
mat_setBodyMaterial_1 = r_arms_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_arms_1 = mat_setBodyMaterial_1;
p_arms_1.x = abs(p_arms_1.x);
p_arms_1.yz += vec2(.24, 0);
a_rot_1 = .15 * (gunsUp_1 - 1.);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_23_1 = rot_return_value_1;
p_arms_1.xy *= rot_return_value_inlined_23_1;
p_sdCapsule_1 = p_arms_1;
a_sdCapsule_1 = vec3(0);
b_sdCapsule_1 = vec3(1.5, 0, 0);
r_sdCapsule_1 = .2;
sdCapsule_has_returned_1 = false;
pa_sdCapsule_1 = p_sdCapsule_1 - a_sdCapsule_1;
ba_sdCapsule_1 = b_sdCapsule_1 - a_sdCapsule_1;
sdCapsule_return_value_1 = length(pa_sdCapsule_1 - ba_sdCapsule_1 * clamp(dot(pa_sdCapsule_1, ba_sdCapsule_1) / dot(ba_sdCapsule_1, ba_sdCapsule_1), 0., 1.)) - r_sdCapsule_1;
sdCapsule_has_returned_1 = true;
sdCapsule_return_value_inlined_24_1 = sdCapsule_return_value_1;
p_sdCapsule_1 = p_arms_1;
a_sdCapsule_1 = vec3(1.5, 0, 0);
b_sdCapsule_1 = wrist_arms_1;
r_sdCapsule_1 = .2;
sdCapsule_has_returned_1 = false;
pa_sdCapsule_1 = p_sdCapsule_1 - a_sdCapsule_1;
ba_sdCapsule_1 = b_sdCapsule_1 - a_sdCapsule_1;
sdCapsule_return_value_1 = length(pa_sdCapsule_1 - ba_sdCapsule_1 * clamp(dot(pa_sdCapsule_1, ba_sdCapsule_1) / dot(ba_sdCapsule_1, ba_sdCapsule_1), 0., 1.)) - r_sdCapsule_1;
sdCapsule_has_returned_1 = true;
sdCapsule_return_value_inlined_25_1 = sdCapsule_return_value_1;
r_arms_1.d = min(sdCapsule_return_value_inlined_24_1, sdCapsule_return_value_inlined_25_1);
p_arms_1 -= wrist_arms_1;
p_arms_1.z -= gunsForward_1 * .15;
p_gunPod_1 = p_arms_1;
gunPod_has_returned_1 = false;
mat_setBodyMaterial_1 = r_gunPod_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_gunPod_1 = mat_setBodyMaterial_1;
p_gunPod_1.yz += vec2(.1, .45);
pp_gunPod_1 = p_gunPod_1;
pp_gunPod_1.z = abs(pp_gunPod_1.z) - .5;
p_sdCappedCone_1 = pp_gunPod_1;
a_sdCappedCone_1 = vec3(0);
b_sdCappedCone_1 = vec3(0, 0, - .1);
ra_sdCappedCone_1 = .35 - .1;
rb_sdCappedCone_1 = .35;
sdCappedCone_has_returned_1 = false;
rba_sdCappedCone_1 = rb_sdCappedCone_1 - ra_sdCappedCone_1;
baba_sdCappedCone_1 = dot(b_sdCappedCone_1 - a_sdCappedCone_1, b_sdCappedCone_1 - a_sdCappedCone_1);
papa_sdCappedCone_1 = dot(p_sdCappedCone_1 - a_sdCappedCone_1, p_sdCappedCone_1 - a_sdCappedCone_1);
paba_sdCappedCone_1 = dot(p_sdCappedCone_1 - a_sdCappedCone_1, b_sdCappedCone_1 - a_sdCappedCone_1) / baba_sdCappedCone_1;
x_sdCappedCone_1 = sqrt(papa_sdCappedCone_1 - paba_sdCappedCone_1 * paba_sdCappedCone_1 * baba_sdCappedCone_1);
cax_sdCappedCone_1 = max(0., x_sdCappedCone_1 - ((paba_sdCappedCone_1 < .5) ? ra_sdCappedCone_1 : rb_sdCappedCone_1));
cay_sdCappedCone_1 = abs(paba_sdCappedCone_1 - .5) - .5;
f_sdCappedCone_1 = clamp((rba_sdCappedCone_1 * (x_sdCappedCone_1 - ra_sdCappedCone_1) + paba_sdCappedCone_1 * baba_sdCappedCone_1) / (rba_sdCappedCone_1 * rba_sdCappedCone_1 + baba_sdCappedCone_1), 0., 1.);
cbx_sdCappedCone_1 = x_sdCappedCone_1 - ra_sdCappedCone_1 - f_sdCappedCone_1 * rba_sdCappedCone_1;
cby_sdCappedCone_1 = paba_sdCappedCone_1 - f_sdCappedCone_1;
sdCappedCone_return_value_1 = ((cbx_sdCappedCone_1 < 0. && cay_sdCappedCone_1 < 0.) ? - 1. : 1.) * sqrt(min(cax_sdCappedCone_1 * cax_sdCappedCone_1 + cay_sdCappedCone_1 * cay_sdCappedCone_1 * baba_sdCappedCone_1, cbx_sdCappedCone_1 * cbx_sdCappedCone_1 + cby_sdCappedCone_1 * cby_sdCappedCone_1 * baba_sdCappedCone_1));
sdCappedCone_has_returned_1 = true;
sdCappedCone_return_value_inlined_12_1 = sdCappedCone_return_value_1;
r_gunPod_1.d = sdCappedCone_return_value_inlined_12_1;
p_sdCappedCylinder_1 = p_gunPod_1;
h_sdCappedCylinder_1 = .35;
r_sdCappedCylinder_1 = .4;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_13_1 = sdCappedCylinder_return_value_1;
r_gunPod_1.d = min(r_gunPod_1.d, sdCappedCylinder_return_value_inlined_13_1);
pp_gunPod_1 = vec3(p_gunPod_1.x, .28 - p_gunPod_1.y, p_gunPod_1.z);
p_sdTriPrism_1 = pp_gunPod_1;
h_sdTriPrism_1 = vec2(.1, .5);
sdTriPrism_has_returned_1 = false;
q_sdTriPrism_1 = abs(p_sdTriPrism_1);
sdTriPrism_return_value_1 = max(q_sdTriPrism_1.z - h_sdTriPrism_1.y, max(q_sdTriPrism_1.x * .866025 + p_sdTriPrism_1.y * .5, - p_sdTriPrism_1.y) - h_sdTriPrism_1.x * .5);
sdTriPrism_has_returned_1 = true;
sdTriPrism_return_value_inlined_14_1 = sdTriPrism_return_value_1;
r_gunPod_1.d = min(r_gunPod_1.d, sdTriPrism_return_value_inlined_14_1);
pp_gunPod_1 = p_gunPod_1;
pp_gunPod_1.x = abs(p_gunPod_1.x);
a_rot_1 = .78525;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_15_1 = rot_return_value_1;
pp_gunPod_1.xy *= rot_return_value_inlined_15_1;
bump_gunPod_1 = sign(sin(pp_gunPod_1.z * 33.3)) * .003;
p_sdBox_1 = pp_gunPod_1;
b_sdBox_1 = vec3(.1 - bump_gunPod_1, .38 - bump_gunPod_1, .34);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_16_1 = sdBox_return_value_1;
d_gunPod_1 = sdBox_return_value_inlined_16_1 - .02;
pp_gunPod_1 = p_gunPod_1 - vec3(0, 0, - .6);
pp_gunPod_1.x = abs(pp_gunPod_1.x) - .1;
p_sdCappedCylinder_1 = pp_gunPod_1;
h_sdCappedCylinder_1 = .06;
r_sdCappedCylinder_1 = .15;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_17_1 = sdCappedCylinder_return_value_1;
p_sdCappedCylinder_1 = pp_gunPod_1 + vec3(0, .12, - .05);
h_sdCappedCylinder_1 = .06;
r_sdCappedCylinder_1 = .05;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_18_1 = sdCappedCylinder_return_value_1;
p_sdBox_1 = p_gunPod_1 + vec3(0, 0, .54);
b_sdBox_1 = vec3(.1, .06, .04);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_19_1 = sdBox_return_value_1;
d_gunPod_1 = min(min(min(d_gunPod_1, sdCappedCylinder_return_value_inlined_17_1), sdCappedCylinder_return_value_inlined_18_1), sdBox_return_value_inlined_19_1);
if(d_gunPod_1 < r_gunPod_1.d)
{
p_sdCappedCylinder_1 = pp_gunPod_1 + vec3(0, 0, .1);
h_sdCappedCylinder_1 = .03;
r_sdCappedCylinder_1 = .2;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_20_1 = sdCappedCylinder_return_value_1;
d_gunPod_1 = max(d_gunPod_1, - sdCappedCylinder_return_value_inlined_20_1);
r_gunPod_1.d = d_gunPod_1;
r_gunPod_1.mat = vec3(.02);
}
fireShock_has_returned_1 = false;
fireShock_return_value_1 = abs(sin(edShoot_1 * 78.5375));
fireShock_has_returned_1 = true;
fireShock_return_value_inlined_21_1 = fireShock_return_value_1;
fs_gunPod_1 = fireShock_return_value_inlined_21_1;
if(fs_gunPod_1 > .5)
{
p_sdCappedCylinder_1 = pp_gunPod_1;
h_sdCappedCylinder_1 = .01 + pp_gunPod_1.z * .05;
r_sdCappedCylinder_1 = fract(fs_gunPod_1 * 3322.423) * .5 + .9;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_22_1 = sdCappedCylinder_return_value_1;
d_gunPod_1 = sdCappedCylinder_return_value_inlined_22_1;
if(d_gunPod_1 < r_gunPod_1.d)
{
r_gunPod_1.d = d_gunPod_1;
r_gunPod_1.mat = vec3(1);
glow_1 += .1 / (.01 + d_gunPod_1 * d_gunPod_1 * 4e2);
}
}
gunPod_return_value_1 = r_gunPod_1;
gunPod_has_returned_1 = true;
gunPod_return_value_inlined_26_1 = gunPod_return_value_1;
a_minResult_1 = r_arms_1;
b_minResult_1 = gunPod_return_value_inlined_26_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_27_1 = minResult_return_value_1;
arms_return_value_1 = minResult_return_value_inlined_27_1;
arms_has_returned_1 = true;
arms_return_value_inlined_67_1 = arms_return_value_1;
a_minResult_1 = minResult_return_value_inlined_66_1;
b_minResult_1 = arms_return_value_inlined_67_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_68_1 = minResult_return_value_1;
ed209_return_value_1 = minResult_return_value_inlined_68_1;
ed209_has_returned_1 = true;
ed209_return_value_inlined_79_1 = ed209_return_value_1;
a_minResult_1 = room_return_value_inlined_78_1;
b_minResult_1 = ed209_return_value_inlined_79_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_80_1 = minResult_return_value_1;
r_map_1 = minResult_return_value_inlined_80_1;
gnd_map_1 = length(p_map_1.y + 3.);
if(gnd_map_1 < r_map_1.d)
{
r_map_1.d = gnd_map_1;
r_map_1.mat = vec3(.1);
}
map_return_value_1 = r_map_1;
map_has_returned_1 = true;
map_return_value_inlined_84_1 = map_return_value_1;
p_map_1 = p_calcNormal_1 + e_calcNormal_1.xxx;
map_has_returned_1 = false;
p_room_1 = p_map_1;
room_has_returned_1 = false;
r_room_1.mat = vec3(.4);
r_room_1.specPower = 1e7;
xy_room_1 = p_room_1.xy - vec2(0, 2);
p_room_1.x = abs(p_room_1.x);
p_room_1.yz += vec2(.5, - 3.4);
p_sdBox_1 = p_room_1;
b_sdBox_1 = frameInner_room_1 + vec3(0, 0, 1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_69_1 = sdBox_return_value_1;
doorHole_room_1 = sdBox_return_value_inlined_69_1;
backWall_room_1 = length(p_room_1.z - 8.);
r_room_1.d = min(backWall_room_1, max(length(p_room_1.z), - doorHole_room_1 + .1));
if(r_room_1.d == backWall_room_1)
{
p_sdOctogon_1 = xy_room_1;
r_sdOctogon_1 = 2.6;
sdOctogon_has_returned_1 = false;
p_sdOctogon_1 = abs(p_sdOctogon_1);
p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
sdOctogon_has_returned_1 = true;
sdOctogon_return_value_inlined_70_1 = sdOctogon_return_value_1;
p_sdOctogon_1 = xy_room_1;
r_sdOctogon_1 = 1.9;
sdOctogon_has_returned_1 = false;
p_sdOctogon_1 = abs(p_sdOctogon_1);
p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
sdOctogon_has_returned_1 = true;
sdOctogon_return_value_inlined_71_1 = sdOctogon_return_value_1;
ocp_room_1 = min(abs(sdOctogon_return_value_inlined_70_1), abs(sdOctogon_return_value_inlined_71_1));
p_sdOctogon_1 = xy_room_1;
r_sdOctogon_1 = 1.2;
sdOctogon_has_returned_1 = false;
p_sdOctogon_1 = abs(p_sdOctogon_1);
p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
sdOctogon_has_returned_1 = true;
sdOctogon_return_value_inlined_72_1 = sdOctogon_return_value_1;
ocp_room_1 = min(max(ocp_room_1, min(.7 - abs(xy_room_1.x + 1.2), - xy_room_1.y)), max(abs(sdOctogon_return_value_inlined_72_1), min(xy_room_1.x, .7 - abs(xy_room_1.y))));
if(ocp_room_1 < .3)
{
r_room_1.mat = vec3(.39, .57, .71);
}
}
p_sdBox_1 = p_room_1;
b_sdBox_1 = frameInner_room_1 + vec3(.4, .4, .1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_73_1 = sdBox_return_value_1;
doorFrame_room_1 = max(sdBox_return_value_inlined_73_1, - doorHole_room_1);
doorWidth_room_1 = frameInner_room_1.x * .5;
p_room_1.x -= frameInner_room_1.x;
a_rot_1 = doorOpen_1 * 2.1;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_74_1 = rot_return_value_1;
p_room_1.xz *= rot_return_value_inlined_74_1;
p_room_1.x += doorWidth_room_1;
p_sdBox_1 = p_room_1;
b_sdBox_1 = vec3(doorWidth_room_1, frameInner_room_1.yz);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_75_1 = sdBox_return_value_1;
door_room_1 = sdBox_return_value_inlined_75_1;
p_room_1 = abs(p_room_1) - vec3(doorWidth_room_1 * .5, 1.1, .14);
p_sdBox_1 = p_room_1;
b_sdBox_1 = vec3(.45, .9, .1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_76_1 = sdBox_return_value_1;
p_sdBox_1 = p_room_1;
b_sdBox_1 = vec3(.35, .8, 1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_77_1 = sdBox_return_value_1;
d_room_1 = min(doorFrame_room_1, max(door_room_1, - max(sdBox_return_value_inlined_76_1, - sdBox_return_value_inlined_77_1)));
if(d_room_1 < r_room_1.d)
{
r_room_1.d = d_room_1;
r_room_1.mat = vec3(.02, .02, .024);
r_room_1.specPower = 10.;
}
room_return_value_1 = r_room_1;
room_has_returned_1 = true;
room_return_value_inlined_78_1 = room_return_value_1;
p_ed209_1 = p_map_1;
ed209_has_returned_1 = false;
f_legWalkAngle_1 = 2.;
legWalkAngle_has_returned_1 = false;
legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
legWalkAngle_has_returned_1 = true;
legWalkAngle_return_value_inlined_54_1 = legWalkAngle_return_value_1;
edZ_has_returned_1 = false;
edZ_return_value_1 = mix(5., - 2., edWalk_1);
edZ_has_returned_1 = true;
edZ_return_value_inlined_55_1 = edZ_return_value_1;
p_ed209_1.yz += vec2(legWalkAngle_return_value_inlined_54_1 * .2 + .1, - edZ_return_value_inlined_55_1);
p_legs_1 = p_ed209_1;
legs_has_returned_1 = false;
mat_setBodyMaterial_1 = r_legs_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_legs_1 = mat_setBodyMaterial_1;
f_legWalkAngle_1 = 1.;
legWalkAngle_has_returned_1 = false;
legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
legWalkAngle_has_returned_1 = true;
legWalkAngle_return_value_inlined_45_1 = legWalkAngle_return_value_1;
legAngle_legs_1 = legWalkAngle_return_value_inlined_45_1;
p_legs_1.z += .27;
a_rot_1 = legAngle_legs_1 * sign(p_legs_1.x);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_46_1 = rot_return_value_1;
p_legs_1.yz *= rot_return_value_inlined_46_1;
p_legs_1.z -= .27;
p_legs_1.y += .65;
a_rot_1 = - .2;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_47_1 = rot_return_value_1;
p_legs_1.yz *= rot_return_value_inlined_47_1;
a_rot_1 = legAngle_legs_1 * .3;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_48_1 = rot_return_value_1;
p_legs_1.xy *= rot_return_value_inlined_48_1;
pp_legs_1 = p_legs_1;
pp_legs_1.x = abs(pp_legs_1.x);
pp_legs_1.y += .48;
a_rot_1 = - .58525;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_49_1 = rot_return_value_1;
pp_legs_1.yz *= rot_return_value_inlined_49_1;
pp_legs_1.x -= .98;
cp_legs_1 = pp_legs_1;
p_legs_1 = pp_legs_1;
pp_legs_1.xz = abs(pp_legs_1.xz) - vec2(.12, .25);
p_legs_1.y += .68;
p_legs_1.xy = abs(p_legs_1.xy) - .12;
p_sdBox_1 = p_legs_1;
b_sdBox_1 = vec3(.07, .05, 1.2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_50_1 = sdBox_return_value_1;
silver_legs_1 = sdBox_return_value_inlined_50_1;
cp_legs_1 -= vec3(0, - .7, 0);
p_sdBox_1 = cp_legs_1 - vec3(0, 0, 1.15);
b_sdBox_1 = vec3(.17, .17, .07);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_51_1 = sdBox_return_value_1;
r_legs_1.d = sdBox_return_value_inlined_51_1 - .04;
cp_legs_1.z ++;
p_sdChamferedCube_1 = cp_legs_1.xzy;
r_sdChamferedCube_1 = vec2(.28 - sign(abs(cp_legs_1.z) - .3) * .01, .5).xyx;
c_sdChamferedCube_1 = .18;
sdChamferedCube_has_returned_1 = false;
p_sdBox_1 = p_sdChamferedCube_1;
b_sdBox_1 = r_sdChamferedCube_1;
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_0_1 = sdBox_return_value_1;
cube_sdChamferedCube_1 = sdBox_return_value_inlined_0_1;
a_rot_1 = .78525;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_1_1 = rot_return_value_1;
p_sdChamferedCube_1.xz *= rot_return_value_inlined_1_1;
r_sdChamferedCube_1.xz *= - c_sdChamferedCube_1 / 1.41 + 1.41;
p_sdBox_1 = p_sdChamferedCube_1;
b_sdBox_1 = r_sdChamferedCube_1;
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_2_1 = sdBox_return_value_1;
sdChamferedCube_return_value_1 = max(cube_sdChamferedCube_1, sdBox_return_value_inlined_2_1);
sdChamferedCube_has_returned_1 = true;
sdChamferedCube_return_value_inlined_52_1 = sdChamferedCube_return_value_1;
r_legs_1.d = min(r_legs_1.d, sdChamferedCube_return_value_inlined_52_1);
p_foot_1 = cp_legs_1;
foot_has_returned_1 = false;
p_foot_1.z += .8;
a_rot_1 = .86;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_29_1 = rot_return_value_1;
p_foot_1.yz *= rot_return_value_inlined_29_1;
p_toe_1 = p_foot_1;
toe_has_returned_1 = false;
p_toe_1.yz += vec2(.1, .32);
p_sdBox_1 = p_toe_1;
b_sdBox_1 = vec3(.3 + .2 * (p_toe_1.z - .18) - p_toe_1.y * .228, .3 + .2 * cos((p_toe_1.z - .18) * 3.69), .35);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_28_1 = sdBox_return_value_1;
toe_return_value_1 = max(sdBox_return_value_inlined_28_1, .1 - p_toe_1.y);
toe_has_returned_1 = true;
toe_return_value_inlined_30_1 = toe_return_value_1;
d_foot_1 = toe_return_value_inlined_30_1;
a_rot_1 = 1.57;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_31_1 = rot_return_value_1;
p_foot_1.xz *= rot_return_value_inlined_31_1;
p_foot_1.x -= .43;
p_foot_1.z = .25 - abs(p_foot_1.z);
p_toe_1 = p_foot_1;
toe_has_returned_1 = false;
p_toe_1.yz += vec2(.1, .32);
p_sdBox_1 = p_toe_1;
b_sdBox_1 = vec3(.3 + .2 * (p_toe_1.z - .18) - p_toe_1.y * .228, .3 + .2 * cos((p_toe_1.z - .18) * 3.69), .35);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_28_1 = sdBox_return_value_1;
toe_return_value_1 = max(sdBox_return_value_inlined_28_1, .1 - p_toe_1.y);
toe_has_returned_1 = true;
toe_return_value_inlined_32_1 = toe_return_value_1;
foot_return_value_1 = min(d_foot_1, toe_return_value_inlined_32_1);
foot_has_returned_1 = true;
foot_return_value_inlined_53_1 = foot_return_value_1;
r_legs_1.d = min(r_legs_1.d, foot_return_value_inlined_53_1);
if(silver_legs_1 < r_legs_1.d)
{
r_legs_1.d = silver_legs_1;
r_legs_1.mat = vec3(.8);
}
legs_return_value_1 = r_legs_1;
legs_has_returned_1 = true;
legs_return_value_inlined_56_1 = legs_return_value_1;
r_ed209_1 = legs_return_value_inlined_56_1;
f_ed209_1 = min(stretch_1 * 2., 1.);
slide_ed209_1 = f_ed209_1 < .5 ? smoothstep(0., .5, f_ed209_1) : (1. - smoothstep(.5, 1., f_ed209_1) * .2);
p_ed209_1.yz -= slide_ed209_1 * .5;
gunsUp_1 = smoothstep(0., 1., clamp((stretch_1 - .66) * 6., 0., 1.));
fireShock_has_returned_1 = false;
fireShock_return_value_1 = abs(sin(edShoot_1 * 78.5375));
fireShock_has_returned_1 = true;
fireShock_return_value_inlined_57_1 = fireShock_return_value_1;
gunsForward_1 = smoothstep(0., 1., clamp((stretch_1 - .83) * 6., 0., 1.)) + fireShock_return_value_inlined_57_1 * .5;
p_waist_1 = p_ed209_1;
waist_has_returned_1 = false;
mat_setBodyMaterial_1 = r_waist_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_waist_1 = mat_setBodyMaterial_1;
p_waist_1.y += .65;
a_rot_1 = - .2;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_33_1 = rot_return_value_1;
p_waist_1.yz *= rot_return_value_inlined_33_1;
f_legWalkAngle_1 = 1.;
legWalkAngle_has_returned_1 = false;
legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
legWalkAngle_has_returned_1 = true;
legWalkAngle_return_value_inlined_34_1 = legWalkAngle_return_value_1;
legAngle_waist_1 = legWalkAngle_return_value_inlined_34_1;
a_rot_1 = legAngle_waist_1 * .3;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_35_1 = rot_return_value_1;
p_waist_1.xy *= rot_return_value_inlined_35_1;
pp_waist_1 = p_waist_1;
pp_waist_1.y += .3;
p_sdCappedCylinder_1 = pp_waist_1.zyx;
h_sdCappedCylinder_1 = .5;
r_sdCappedCylinder_1 = .5;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_36_1 = sdCappedCylinder_return_value_1;
r_waist_1.d = max(sdCappedCylinder_return_value_inlined_36_1, p_waist_1.y + .15);
bump_waist_1 = .5 - abs(sin(p_waist_1.y * 40.)) * .03;
p_sdBox_1 = p_waist_1;
b_sdBox_1 = vec3(bump_waist_1, .15, bump_waist_1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_37_1 = sdBox_return_value_1;
d_waist_1 = sdBox_return_value_inlined_37_1;
bump_waist_1 = .3 - abs(sin(p_waist_1.x * 40.)) * .03;
pp_waist_1.y += .18;
p_sdCappedCylinder_1 = pp_waist_1.zyx;
h_sdCappedCylinder_1 = bump_waist_1;
r_sdCappedCylinder_1 = .75;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_38_1 = sdCappedCylinder_return_value_1;
d_waist_1 = min(d_waist_1, sdCappedCylinder_return_value_inlined_38_1);
pp_waist_1.x = abs(pp_waist_1.x);
a_rot_1 = - .58525 + legAngle_waist_1 * sign(p_waist_1.x);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_39_1 = rot_return_value_1;
pp_waist_1.yz *= rot_return_value_inlined_39_1;
pp_waist_1.x -= .98;
p_sdCappedCylinder_1 = pp_waist_1.zyx;
h_sdCappedCylinder_1 = .4;
r_sdCappedCylinder_1 = .24;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_40_1 = sdCappedCylinder_return_value_1;
r_waist_1.d = min(r_waist_1.d, max(sdCappedCylinder_return_value_inlined_40_1, - pp_waist_1.y));
p_sdBox_1 = pp_waist_1;
b_sdBox_1 = vec3(.24, .2, .14 + .2 * pp_waist_1.y);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_41_1 = sdBox_return_value_1;
r_waist_1.d = min(r_waist_1.d, sdBox_return_value_inlined_41_1);
p_waist_1 = pp_waist_1;
pp_waist_1.xz = abs(pp_waist_1.xz) - vec2(.12, .25);
p_sdCappedCylinder_1 = pp_waist_1.xzy;
h_sdCappedCylinder_1 = .1;
r_sdCappedCylinder_1 = .325;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_42_1 = sdCappedCylinder_return_value_1;
p_sdCappedCylinder_1 = pp_waist_1.xzy;
h_sdCappedCylinder_1 = .05;
r_sdCappedCylinder_1 = .5;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_43_1 = sdCappedCylinder_return_value_1;
r_waist_1.d = min(r_waist_1.d, max(min(sdCappedCylinder_return_value_inlined_42_1, sdCappedCylinder_return_value_inlined_43_1), pp_waist_1.y));
p_waist_1.y += .68;
p_sdBox_1 = p_waist_1;
b_sdBox_1 = vec3(sign(abs(p_waist_1.y) - .04) * .005 + .26, .2, .34);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_44_1 = sdBox_return_value_1;
r_waist_1.d = min(r_waist_1.d, sdBox_return_value_inlined_44_1);
if(d_waist_1 < r_waist_1.d)
{
r_waist_1.d = d_waist_1;
r_waist_1.mat = vec3(.02);
}
waist_return_value_1 = r_waist_1;
waist_has_returned_1 = true;
waist_return_value_inlined_58_1 = waist_return_value_1;
a_minResult_1 = r_ed209_1;
b_minResult_1 = waist_return_value_inlined_58_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_59_1 = minResult_return_value_1;
r_ed209_1 = minResult_return_value_inlined_59_1;
f_legWalkAngle_1 = 2.;
legWalkAngle_has_returned_1 = false;
legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
legWalkAngle_has_returned_1 = true;
legWalkAngle_return_value_inlined_60_1 = legWalkAngle_return_value_1;
a_rot_1 = .1 * (- edDown_1 + legWalkAngle_return_value_inlined_60_1 + smoothstep(0., 1., clamp((stretch_1 - .5) * 6., 0., 1.)) - 1.);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_61_1 = rot_return_value_1;
p_ed209_1.yz *= rot_return_value_inlined_61_1;
a_rot_1 = edTwist_1 * .2;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_62_1 = rot_return_value_1;
p_ed209_1.xz *= rot_return_value_inlined_62_1;
p_headLower_1 = p_ed209_1;
headLower_has_returned_1 = false;
op_headLower_1 = p_headLower_1;
p_headVisor_1 = p_headLower_1 * vec3(.95, - 1.4, .95);
h_headVisor_1 = 1.;
bump_headVisor_1 = 0.;
headVisor_has_returned_1 = false;
bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
p_sdBox_1 = p_headVisor_1;
b_sdBox_1 = vec3(1, h_headVisor_1, 2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
result_headVisor_1.d = sdBox_return_value_inlined_3_1;
p_headSphere_1 = p_headVisor_1;
headSphere_has_returned_1 = false;
headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
headSphere_has_returned_1 = true;
headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
result_headVisor_1.mat = vec3(.05);
result_headVisor_1.specPower = 30.;
headVisor_return_value_1 = result_headVisor_1;
headVisor_has_returned_1 = true;
headVisor_return_value_inlined_5_1 = headVisor_return_value_1;
r_headLower_1 = headVisor_return_value_inlined_5_1;
p_headVisor_1 = (p_headLower_1 + vec3(0, .01, 0)) * vec3(.95);
h_headVisor_1 = 1.;
bump_headVisor_1 = 0.;
headVisor_has_returned_1 = false;
bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
p_sdBox_1 = p_headVisor_1;
b_sdBox_1 = vec3(1, h_headVisor_1, 2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
result_headVisor_1.d = sdBox_return_value_inlined_3_1;
p_headSphere_1 = p_headVisor_1;
headSphere_has_returned_1 = false;
headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
headSphere_has_returned_1 = true;
headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
result_headVisor_1.mat = vec3(.05);
result_headVisor_1.specPower = 30.;
headVisor_return_value_1 = result_headVisor_1;
headVisor_has_returned_1 = true;
headVisor_return_value_inlined_6_1 = headVisor_return_value_1;
r_headLower_1.d = min(r_headLower_1.d, max(max(headVisor_return_value_inlined_6_1.d, p_headLower_1.y - .35), p_headLower_1.y * .625 - p_headLower_1.z - .66));
a_rot_1 = .075 * (gunsUp_1 - 1.) * sign(p_headLower_1.x);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_7_1 = rot_return_value_1;
p_headLower_1.xy *= rot_return_value_inlined_7_1;
p_headLower_1.x = abs(p_headLower_1.x) - 1.33;
p_headLower_1.y -= .1 - p_headLower_1.x * .1;
p_sdBox_1 = p_headLower_1;
b_sdBox_1 = vec3(.4, .06 * (1. - p_headLower_1.x), .3 - p_headLower_1.x * .2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_8_1 = sdBox_return_value_1;
r_headLower_1.d = min(r_headLower_1.d, sdBox_return_value_inlined_8_1);
p_headLower_1 = op_headLower_1;
p_headLower_1.y = abs(abs(p_headLower_1.y + .147) - .0556) - .0278;
p_sdBox_1 = p_headLower_1 + vec3(0, 0, 1.5);
b_sdBox_1 = vec3(mix(.25, .55, - op_headLower_1.y), .015, .1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_9_1 = sdBox_return_value_1;
r_headLower_1.d = max(r_headLower_1.d, - sdBox_return_value_inlined_9_1);
p_headLower_1 = op_headLower_1;
p_headLower_1.y = abs(p_headLower_1.y + .16) - .06;
p_headLower_1.z -= - 1.1;
p_sdCappedCylinder_1 = p_headLower_1.xzy;
h_sdCappedCylinder_1 = 1.;
r_sdCappedCylinder_1 = .03;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_10_1 = sdCappedCylinder_return_value_1;
p_sdCappedCylinder_1 = p_headLower_1.xzy;
h_sdCappedCylinder_1 = .55;
r_sdCappedCylinder_1 = 1.;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_11_1 = sdCappedCylinder_return_value_1;
r_headLower_1.d = max(r_headLower_1.d, - max(max(sdCappedCylinder_return_value_inlined_10_1, - sdCappedCylinder_return_value_inlined_11_1), p_headLower_1.z + .2));
mat_setBodyMaterial_1 = r_headLower_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_headLower_1 = mat_setBodyMaterial_1;
headLower_return_value_1 = r_headLower_1;
headLower_has_returned_1 = true;
headLower_return_value_inlined_63_1 = headLower_return_value_1;
a_minResult_1 = r_ed209_1;
b_minResult_1 = headLower_return_value_inlined_63_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_64_1 = minResult_return_value_1;
p_headVisor_1 = p_ed209_1;
h_headVisor_1 = .8;
bump_headVisor_1 = 1.;
headVisor_has_returned_1 = false;
bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
p_sdBox_1 = p_headVisor_1;
b_sdBox_1 = vec3(1, h_headVisor_1, 2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
result_headVisor_1.d = sdBox_return_value_inlined_3_1;
p_headSphere_1 = p_headVisor_1;
headSphere_has_returned_1 = false;
headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
headSphere_has_returned_1 = true;
headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
result_headVisor_1.mat = vec3(.05);
result_headVisor_1.specPower = 30.;
headVisor_return_value_1 = result_headVisor_1;
headVisor_has_returned_1 = true;
headVisor_return_value_inlined_65_1 = headVisor_return_value_1;
a_minResult_1 = minResult_return_value_inlined_64_1;
b_minResult_1 = headVisor_return_value_inlined_65_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_66_1 = minResult_return_value_1;
p_arms_1 = p_ed209_1;
arms_has_returned_1 = false;
mat_setBodyMaterial_1 = r_arms_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_arms_1 = mat_setBodyMaterial_1;
p_arms_1.x = abs(p_arms_1.x);
p_arms_1.yz += vec2(.24, 0);
a_rot_1 = .15 * (gunsUp_1 - 1.);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_23_1 = rot_return_value_1;
p_arms_1.xy *= rot_return_value_inlined_23_1;
p_sdCapsule_1 = p_arms_1;
a_sdCapsule_1 = vec3(0);
b_sdCapsule_1 = vec3(1.5, 0, 0);
r_sdCapsule_1 = .2;
sdCapsule_has_returned_1 = false;
pa_sdCapsule_1 = p_sdCapsule_1 - a_sdCapsule_1;
ba_sdCapsule_1 = b_sdCapsule_1 - a_sdCapsule_1;
sdCapsule_return_value_1 = length(pa_sdCapsule_1 - ba_sdCapsule_1 * clamp(dot(pa_sdCapsule_1, ba_sdCapsule_1) / dot(ba_sdCapsule_1, ba_sdCapsule_1), 0., 1.)) - r_sdCapsule_1;
sdCapsule_has_returned_1 = true;
sdCapsule_return_value_inlined_24_1 = sdCapsule_return_value_1;
p_sdCapsule_1 = p_arms_1;
a_sdCapsule_1 = vec3(1.5, 0, 0);
b_sdCapsule_1 = wrist_arms_1;
r_sdCapsule_1 = .2;
sdCapsule_has_returned_1 = false;
pa_sdCapsule_1 = p_sdCapsule_1 - a_sdCapsule_1;
ba_sdCapsule_1 = b_sdCapsule_1 - a_sdCapsule_1;
sdCapsule_return_value_1 = length(pa_sdCapsule_1 - ba_sdCapsule_1 * clamp(dot(pa_sdCapsule_1, ba_sdCapsule_1) / dot(ba_sdCapsule_1, ba_sdCapsule_1), 0., 1.)) - r_sdCapsule_1;
sdCapsule_has_returned_1 = true;
sdCapsule_return_value_inlined_25_1 = sdCapsule_return_value_1;
r_arms_1.d = min(sdCapsule_return_value_inlined_24_1, sdCapsule_return_value_inlined_25_1);
p_arms_1 -= wrist_arms_1;
p_arms_1.z -= gunsForward_1 * .15;
p_gunPod_1 = p_arms_1;
gunPod_has_returned_1 = false;
mat_setBodyMaterial_1 = r_gunPod_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_gunPod_1 = mat_setBodyMaterial_1;
p_gunPod_1.yz += vec2(.1, .45);
pp_gunPod_1 = p_gunPod_1;
pp_gunPod_1.z = abs(pp_gunPod_1.z) - .5;
p_sdCappedCone_1 = pp_gunPod_1;
a_sdCappedCone_1 = vec3(0);
b_sdCappedCone_1 = vec3(0, 0, - .1);
ra_sdCappedCone_1 = .35 - .1;
rb_sdCappedCone_1 = .35;
sdCappedCone_has_returned_1 = false;
rba_sdCappedCone_1 = rb_sdCappedCone_1 - ra_sdCappedCone_1;
baba_sdCappedCone_1 = dot(b_sdCappedCone_1 - a_sdCappedCone_1, b_sdCappedCone_1 - a_sdCappedCone_1);
papa_sdCappedCone_1 = dot(p_sdCappedCone_1 - a_sdCappedCone_1, p_sdCappedCone_1 - a_sdCappedCone_1);
paba_sdCappedCone_1 = dot(p_sdCappedCone_1 - a_sdCappedCone_1, b_sdCappedCone_1 - a_sdCappedCone_1) / baba_sdCappedCone_1;
x_sdCappedCone_1 = sqrt(papa_sdCappedCone_1 - paba_sdCappedCone_1 * paba_sdCappedCone_1 * baba_sdCappedCone_1);
cax_sdCappedCone_1 = max(0., x_sdCappedCone_1 - ((paba_sdCappedCone_1 < .5) ? ra_sdCappedCone_1 : rb_sdCappedCone_1));
cay_sdCappedCone_1 = abs(paba_sdCappedCone_1 - .5) - .5;
f_sdCappedCone_1 = clamp((rba_sdCappedCone_1 * (x_sdCappedCone_1 - ra_sdCappedCone_1) + paba_sdCappedCone_1 * baba_sdCappedCone_1) / (rba_sdCappedCone_1 * rba_sdCappedCone_1 + baba_sdCappedCone_1), 0., 1.);
cbx_sdCappedCone_1 = x_sdCappedCone_1 - ra_sdCappedCone_1 - f_sdCappedCone_1 * rba_sdCappedCone_1;
cby_sdCappedCone_1 = paba_sdCappedCone_1 - f_sdCappedCone_1;
sdCappedCone_return_value_1 = ((cbx_sdCappedCone_1 < 0. && cay_sdCappedCone_1 < 0.) ? - 1. : 1.) * sqrt(min(cax_sdCappedCone_1 * cax_sdCappedCone_1 + cay_sdCappedCone_1 * cay_sdCappedCone_1 * baba_sdCappedCone_1, cbx_sdCappedCone_1 * cbx_sdCappedCone_1 + cby_sdCappedCone_1 * cby_sdCappedCone_1 * baba_sdCappedCone_1));
sdCappedCone_has_returned_1 = true;
sdCappedCone_return_value_inlined_12_1 = sdCappedCone_return_value_1;
r_gunPod_1.d = sdCappedCone_return_value_inlined_12_1;
p_sdCappedCylinder_1 = p_gunPod_1;
h_sdCappedCylinder_1 = .35;
r_sdCappedCylinder_1 = .4;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_13_1 = sdCappedCylinder_return_value_1;
r_gunPod_1.d = min(r_gunPod_1.d, sdCappedCylinder_return_value_inlined_13_1);
pp_gunPod_1 = vec3(p_gunPod_1.x, .28 - p_gunPod_1.y, p_gunPod_1.z);
p_sdTriPrism_1 = pp_gunPod_1;
h_sdTriPrism_1 = vec2(.1, .5);
sdTriPrism_has_returned_1 = false;
q_sdTriPrism_1 = abs(p_sdTriPrism_1);
sdTriPrism_return_value_1 = max(q_sdTriPrism_1.z - h_sdTriPrism_1.y, max(q_sdTriPrism_1.x * .866025 + p_sdTriPrism_1.y * .5, - p_sdTriPrism_1.y) - h_sdTriPrism_1.x * .5);
sdTriPrism_has_returned_1 = true;
sdTriPrism_return_value_inlined_14_1 = sdTriPrism_return_value_1;
r_gunPod_1.d = min(r_gunPod_1.d, sdTriPrism_return_value_inlined_14_1);
pp_gunPod_1 = p_gunPod_1;
pp_gunPod_1.x = abs(p_gunPod_1.x);
a_rot_1 = .78525;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_15_1 = rot_return_value_1;
pp_gunPod_1.xy *= rot_return_value_inlined_15_1;
bump_gunPod_1 = sign(sin(pp_gunPod_1.z * 33.3)) * .003;
p_sdBox_1 = pp_gunPod_1;
b_sdBox_1 = vec3(.1 - bump_gunPod_1, .38 - bump_gunPod_1, .34);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_16_1 = sdBox_return_value_1;
d_gunPod_1 = sdBox_return_value_inlined_16_1 - .02;
pp_gunPod_1 = p_gunPod_1 - vec3(0, 0, - .6);
pp_gunPod_1.x = abs(pp_gunPod_1.x) - .1;
p_sdCappedCylinder_1 = pp_gunPod_1;
h_sdCappedCylinder_1 = .06;
r_sdCappedCylinder_1 = .15;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_17_1 = sdCappedCylinder_return_value_1;
p_sdCappedCylinder_1 = pp_gunPod_1 + vec3(0, .12, - .05);
h_sdCappedCylinder_1 = .06;
r_sdCappedCylinder_1 = .05;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_18_1 = sdCappedCylinder_return_value_1;
p_sdBox_1 = p_gunPod_1 + vec3(0, 0, .54);
b_sdBox_1 = vec3(.1, .06, .04);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_19_1 = sdBox_return_value_1;
d_gunPod_1 = min(min(min(d_gunPod_1, sdCappedCylinder_return_value_inlined_17_1), sdCappedCylinder_return_value_inlined_18_1), sdBox_return_value_inlined_19_1);
if(d_gunPod_1 < r_gunPod_1.d)
{
p_sdCappedCylinder_1 = pp_gunPod_1 + vec3(0, 0, .1);
h_sdCappedCylinder_1 = .03;
r_sdCappedCylinder_1 = .2;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_20_1 = sdCappedCylinder_return_value_1;
d_gunPod_1 = max(d_gunPod_1, - sdCappedCylinder_return_value_inlined_20_1);
r_gunPod_1.d = d_gunPod_1;
r_gunPod_1.mat = vec3(.02);
}
fireShock_has_returned_1 = false;
fireShock_return_value_1 = abs(sin(edShoot_1 * 78.5375));
fireShock_has_returned_1 = true;
fireShock_return_value_inlined_21_1 = fireShock_return_value_1;
fs_gunPod_1 = fireShock_return_value_inlined_21_1;
if(fs_gunPod_1 > .5)
{
p_sdCappedCylinder_1 = pp_gunPod_1;
h_sdCappedCylinder_1 = .01 + pp_gunPod_1.z * .05;
r_sdCappedCylinder_1 = fract(fs_gunPod_1 * 3322.423) * .5 + .9;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_22_1 = sdCappedCylinder_return_value_1;
d_gunPod_1 = sdCappedCylinder_return_value_inlined_22_1;
if(d_gunPod_1 < r_gunPod_1.d)
{
r_gunPod_1.d = d_gunPod_1;
r_gunPod_1.mat = vec3(1);
glow_1 += .1 / (.01 + d_gunPod_1 * d_gunPod_1 * 4e2);
}
}
gunPod_return_value_1 = r_gunPod_1;
gunPod_has_returned_1 = true;
gunPod_return_value_inlined_26_1 = gunPod_return_value_1;
a_minResult_1 = r_arms_1;
b_minResult_1 = gunPod_return_value_inlined_26_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_27_1 = minResult_return_value_1;
arms_return_value_1 = minResult_return_value_inlined_27_1;
arms_has_returned_1 = true;
arms_return_value_inlined_67_1 = arms_return_value_1;
a_minResult_1 = minResult_return_value_inlined_66_1;
b_minResult_1 = arms_return_value_inlined_67_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_68_1 = minResult_return_value_1;
ed209_return_value_1 = minResult_return_value_inlined_68_1;
ed209_has_returned_1 = true;
ed209_return_value_inlined_79_1 = ed209_return_value_1;
a_minResult_1 = room_return_value_inlined_78_1;
b_minResult_1 = ed209_return_value_inlined_79_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_80_1 = minResult_return_value_1;
r_map_1 = minResult_return_value_inlined_80_1;
gnd_map_1 = length(p_map_1.y + 3.);
if(gnd_map_1 < r_map_1.d)
{
r_map_1.d = gnd_map_1;
r_map_1.mat = vec3(.1);
}
map_return_value_1 = r_map_1;
map_has_returned_1 = true;
map_return_value_inlined_85_1 = map_return_value_1;
calcNormal_return_value_1 = normalize(e_calcNormal_1.xyy * map_return_value_inlined_82_1.d + e_calcNormal_1.yyx * map_return_value_inlined_83_1.d + e_calcNormal_1.yxy * map_return_value_inlined_84_1.d + e_calcNormal_1.xxx * map_return_value_inlined_85_1.d);
calcNormal_has_returned_1 = true;
calcNormal_return_value_inlined_87_1 = calcNormal_return_value_1;
n_applyLighting_1 = calcNormal_return_value_inlined_87_1;
primary_applyLighting_1 = max(0., dot(sunDir_applyLighting_1, n_applyLighting_1));
bounce_applyLighting_1 = max(0., dot(- sunDir_applyLighting_1, n_applyLighting_1)) * .2;
spe_applyLighting_1 = pow(max(max(0., dot(rd_applyLighting_1, reflect(sunDir_applyLighting_1, n_applyLighting_1))), 1e-9), data_applyLighting_1.specPower) * 2.;
fre_applyLighting_1 = smoothstep(.7, 1., 1. + dot(rd_applyLighting_1, n_applyLighting_1));
fog_applyLighting_1 = exp(- length(p_applyLighting_1) * .05);
p_calcShadow_1 = p_applyLighting_1;
lightPos_calcShadow_1 = vec3(10, 10, - 10);
calcShadow_has_returned_1 = false;
rd_calcShadow_1 = normalize(lightPos_calcShadow_1 - p_calcShadow_1);
res_calcShadow_1 = 1.;
t_calcShadow_1 = .1;
for(   i_calcShadow_1 = 0.;
i_calcShadow_1 < 30.; i_calcShadow_1 ++)
{
p_map_1 = p_calcShadow_1 + rd_calcShadow_1 * t_calcShadow_1;
map_has_returned_1 = false;
p_room_1 = p_map_1;
room_has_returned_1 = false;
r_room_1.mat = vec3(.4);
r_room_1.specPower = 1e7;
xy_room_1 = p_room_1.xy - vec2(0, 2);
p_room_1.x = abs(p_room_1.x);
p_room_1.yz += vec2(.5, - 3.4);
p_sdBox_1 = p_room_1;
b_sdBox_1 = frameInner_room_1 + vec3(0, 0, 1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_69_1 = sdBox_return_value_1;
doorHole_room_1 = sdBox_return_value_inlined_69_1;
backWall_room_1 = length(p_room_1.z - 8.);
r_room_1.d = min(backWall_room_1, max(length(p_room_1.z), - doorHole_room_1 + .1));
if(r_room_1.d == backWall_room_1)
{
p_sdOctogon_1 = xy_room_1;
r_sdOctogon_1 = 2.6;
sdOctogon_has_returned_1 = false;
p_sdOctogon_1 = abs(p_sdOctogon_1);
p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
sdOctogon_has_returned_1 = true;
sdOctogon_return_value_inlined_70_1 = sdOctogon_return_value_1;
p_sdOctogon_1 = xy_room_1;
r_sdOctogon_1 = 1.9;
sdOctogon_has_returned_1 = false;
p_sdOctogon_1 = abs(p_sdOctogon_1);
p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
sdOctogon_has_returned_1 = true;
sdOctogon_return_value_inlined_71_1 = sdOctogon_return_value_1;
ocp_room_1 = min(abs(sdOctogon_return_value_inlined_70_1), abs(sdOctogon_return_value_inlined_71_1));
p_sdOctogon_1 = xy_room_1;
r_sdOctogon_1 = 1.2;
sdOctogon_has_returned_1 = false;
p_sdOctogon_1 = abs(p_sdOctogon_1);
p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
sdOctogon_has_returned_1 = true;
sdOctogon_return_value_inlined_72_1 = sdOctogon_return_value_1;
ocp_room_1 = min(max(ocp_room_1, min(.7 - abs(xy_room_1.x + 1.2), - xy_room_1.y)), max(abs(sdOctogon_return_value_inlined_72_1), min(xy_room_1.x, .7 - abs(xy_room_1.y))));
if(ocp_room_1 < .3)
{
r_room_1.mat = vec3(.39, .57, .71);
}
}
p_sdBox_1 = p_room_1;
b_sdBox_1 = frameInner_room_1 + vec3(.4, .4, .1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_73_1 = sdBox_return_value_1;
doorFrame_room_1 = max(sdBox_return_value_inlined_73_1, - doorHole_room_1);
doorWidth_room_1 = frameInner_room_1.x * .5;
p_room_1.x -= frameInner_room_1.x;
a_rot_1 = doorOpen_1 * 2.1;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_74_1 = rot_return_value_1;
p_room_1.xz *= rot_return_value_inlined_74_1;
p_room_1.x += doorWidth_room_1;
p_sdBox_1 = p_room_1;
b_sdBox_1 = vec3(doorWidth_room_1, frameInner_room_1.yz);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_75_1 = sdBox_return_value_1;
door_room_1 = sdBox_return_value_inlined_75_1;
p_room_1 = abs(p_room_1) - vec3(doorWidth_room_1 * .5, 1.1, .14);
p_sdBox_1 = p_room_1;
b_sdBox_1 = vec3(.45, .9, .1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_76_1 = sdBox_return_value_1;
p_sdBox_1 = p_room_1;
b_sdBox_1 = vec3(.35, .8, 1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_77_1 = sdBox_return_value_1;
d_room_1 = min(doorFrame_room_1, max(door_room_1, - max(sdBox_return_value_inlined_76_1, - sdBox_return_value_inlined_77_1)));
if(d_room_1 < r_room_1.d)
{
r_room_1.d = d_room_1;
r_room_1.mat = vec3(.02, .02, .024);
r_room_1.specPower = 10.;
}
room_return_value_1 = r_room_1;
room_has_returned_1 = true;
room_return_value_inlined_78_1 = room_return_value_1;
p_ed209_1 = p_map_1;
ed209_has_returned_1 = false;
f_legWalkAngle_1 = 2.;
legWalkAngle_has_returned_1 = false;
legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
legWalkAngle_has_returned_1 = true;
legWalkAngle_return_value_inlined_54_1 = legWalkAngle_return_value_1;
edZ_has_returned_1 = false;
edZ_return_value_1 = mix(5., - 2., edWalk_1);
edZ_has_returned_1 = true;
edZ_return_value_inlined_55_1 = edZ_return_value_1;
p_ed209_1.yz += vec2(legWalkAngle_return_value_inlined_54_1 * .2 + .1, - edZ_return_value_inlined_55_1);
p_legs_1 = p_ed209_1;
legs_has_returned_1 = false;
mat_setBodyMaterial_1 = r_legs_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_legs_1 = mat_setBodyMaterial_1;
f_legWalkAngle_1 = 1.;
legWalkAngle_has_returned_1 = false;
legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
legWalkAngle_has_returned_1 = true;
legWalkAngle_return_value_inlined_45_1 = legWalkAngle_return_value_1;
legAngle_legs_1 = legWalkAngle_return_value_inlined_45_1;
p_legs_1.z += .27;
a_rot_1 = legAngle_legs_1 * sign(p_legs_1.x);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_46_1 = rot_return_value_1;
p_legs_1.yz *= rot_return_value_inlined_46_1;
p_legs_1.z -= .27;
p_legs_1.y += .65;
a_rot_1 = - .2;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_47_1 = rot_return_value_1;
p_legs_1.yz *= rot_return_value_inlined_47_1;
a_rot_1 = legAngle_legs_1 * .3;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_48_1 = rot_return_value_1;
p_legs_1.xy *= rot_return_value_inlined_48_1;
pp_legs_1 = p_legs_1;
pp_legs_1.x = abs(pp_legs_1.x);
pp_legs_1.y += .48;
a_rot_1 = - .58525;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_49_1 = rot_return_value_1;
pp_legs_1.yz *= rot_return_value_inlined_49_1;
pp_legs_1.x -= .98;
cp_legs_1 = pp_legs_1;
p_legs_1 = pp_legs_1;
pp_legs_1.xz = abs(pp_legs_1.xz) - vec2(.12, .25);
p_legs_1.y += .68;
p_legs_1.xy = abs(p_legs_1.xy) - .12;
p_sdBox_1 = p_legs_1;
b_sdBox_1 = vec3(.07, .05, 1.2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_50_1 = sdBox_return_value_1;
silver_legs_1 = sdBox_return_value_inlined_50_1;
cp_legs_1 -= vec3(0, - .7, 0);
p_sdBox_1 = cp_legs_1 - vec3(0, 0, 1.15);
b_sdBox_1 = vec3(.17, .17, .07);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_51_1 = sdBox_return_value_1;
r_legs_1.d = sdBox_return_value_inlined_51_1 - .04;
cp_legs_1.z ++;
p_sdChamferedCube_1 = cp_legs_1.xzy;
r_sdChamferedCube_1 = vec2(.28 - sign(abs(cp_legs_1.z) - .3) * .01, .5).xyx;
c_sdChamferedCube_1 = .18;
sdChamferedCube_has_returned_1 = false;
p_sdBox_1 = p_sdChamferedCube_1;
b_sdBox_1 = r_sdChamferedCube_1;
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_0_1 = sdBox_return_value_1;
cube_sdChamferedCube_1 = sdBox_return_value_inlined_0_1;
a_rot_1 = .78525;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_1_1 = rot_return_value_1;
p_sdChamferedCube_1.xz *= rot_return_value_inlined_1_1;
r_sdChamferedCube_1.xz *= - c_sdChamferedCube_1 / 1.41 + 1.41;
p_sdBox_1 = p_sdChamferedCube_1;
b_sdBox_1 = r_sdChamferedCube_1;
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_2_1 = sdBox_return_value_1;
sdChamferedCube_return_value_1 = max(cube_sdChamferedCube_1, sdBox_return_value_inlined_2_1);
sdChamferedCube_has_returned_1 = true;
sdChamferedCube_return_value_inlined_52_1 = sdChamferedCube_return_value_1;
r_legs_1.d = min(r_legs_1.d, sdChamferedCube_return_value_inlined_52_1);
p_foot_1 = cp_legs_1;
foot_has_returned_1 = false;
p_foot_1.z += .8;
a_rot_1 = .86;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_29_1 = rot_return_value_1;
p_foot_1.yz *= rot_return_value_inlined_29_1;
p_toe_1 = p_foot_1;
toe_has_returned_1 = false;
p_toe_1.yz += vec2(.1, .32);
p_sdBox_1 = p_toe_1;
b_sdBox_1 = vec3(.3 + .2 * (p_toe_1.z - .18) - p_toe_1.y * .228, .3 + .2 * cos((p_toe_1.z - .18) * 3.69), .35);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_28_1 = sdBox_return_value_1;
toe_return_value_1 = max(sdBox_return_value_inlined_28_1, .1 - p_toe_1.y);
toe_has_returned_1 = true;
toe_return_value_inlined_30_1 = toe_return_value_1;
d_foot_1 = toe_return_value_inlined_30_1;
a_rot_1 = 1.57;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_31_1 = rot_return_value_1;
p_foot_1.xz *= rot_return_value_inlined_31_1;
p_foot_1.x -= .43;
p_foot_1.z = .25 - abs(p_foot_1.z);
p_toe_1 = p_foot_1;
toe_has_returned_1 = false;
p_toe_1.yz += vec2(.1, .32);
p_sdBox_1 = p_toe_1;
b_sdBox_1 = vec3(.3 + .2 * (p_toe_1.z - .18) - p_toe_1.y * .228, .3 + .2 * cos((p_toe_1.z - .18) * 3.69), .35);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_28_1 = sdBox_return_value_1;
toe_return_value_1 = max(sdBox_return_value_inlined_28_1, .1 - p_toe_1.y);
toe_has_returned_1 = true;
toe_return_value_inlined_32_1 = toe_return_value_1;
foot_return_value_1 = min(d_foot_1, toe_return_value_inlined_32_1);
foot_has_returned_1 = true;
foot_return_value_inlined_53_1 = foot_return_value_1;
r_legs_1.d = min(r_legs_1.d, foot_return_value_inlined_53_1);
if(silver_legs_1 < r_legs_1.d)
{
r_legs_1.d = silver_legs_1;
r_legs_1.mat = vec3(.8);
}
legs_return_value_1 = r_legs_1;
legs_has_returned_1 = true;
legs_return_value_inlined_56_1 = legs_return_value_1;
r_ed209_1 = legs_return_value_inlined_56_1;
f_ed209_1 = min(stretch_1 * 2., 1.);
slide_ed209_1 = f_ed209_1 < .5 ? smoothstep(0., .5, f_ed209_1) : (1. - smoothstep(.5, 1., f_ed209_1) * .2);
p_ed209_1.yz -= slide_ed209_1 * .5;
gunsUp_1 = smoothstep(0., 1., clamp((stretch_1 - .66) * 6., 0., 1.));
fireShock_has_returned_1 = false;
fireShock_return_value_1 = abs(sin(edShoot_1 * 78.5375));
fireShock_has_returned_1 = true;
fireShock_return_value_inlined_57_1 = fireShock_return_value_1;
gunsForward_1 = smoothstep(0., 1., clamp((stretch_1 - .83) * 6., 0., 1.)) + fireShock_return_value_inlined_57_1 * .5;
p_waist_1 = p_ed209_1;
waist_has_returned_1 = false;
mat_setBodyMaterial_1 = r_waist_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_waist_1 = mat_setBodyMaterial_1;
p_waist_1.y += .65;
a_rot_1 = - .2;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_33_1 = rot_return_value_1;
p_waist_1.yz *= rot_return_value_inlined_33_1;
f_legWalkAngle_1 = 1.;
legWalkAngle_has_returned_1 = false;
legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
legWalkAngle_has_returned_1 = true;
legWalkAngle_return_value_inlined_34_1 = legWalkAngle_return_value_1;
legAngle_waist_1 = legWalkAngle_return_value_inlined_34_1;
a_rot_1 = legAngle_waist_1 * .3;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_35_1 = rot_return_value_1;
p_waist_1.xy *= rot_return_value_inlined_35_1;
pp_waist_1 = p_waist_1;
pp_waist_1.y += .3;
p_sdCappedCylinder_1 = pp_waist_1.zyx;
h_sdCappedCylinder_1 = .5;
r_sdCappedCylinder_1 = .5;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_36_1 = sdCappedCylinder_return_value_1;
r_waist_1.d = max(sdCappedCylinder_return_value_inlined_36_1, p_waist_1.y + .15);
bump_waist_1 = .5 - abs(sin(p_waist_1.y * 40.)) * .03;
p_sdBox_1 = p_waist_1;
b_sdBox_1 = vec3(bump_waist_1, .15, bump_waist_1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_37_1 = sdBox_return_value_1;
d_waist_1 = sdBox_return_value_inlined_37_1;
bump_waist_1 = .3 - abs(sin(p_waist_1.x * 40.)) * .03;
pp_waist_1.y += .18;
p_sdCappedCylinder_1 = pp_waist_1.zyx;
h_sdCappedCylinder_1 = bump_waist_1;
r_sdCappedCylinder_1 = .75;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_38_1 = sdCappedCylinder_return_value_1;
d_waist_1 = min(d_waist_1, sdCappedCylinder_return_value_inlined_38_1);
pp_waist_1.x = abs(pp_waist_1.x);
a_rot_1 = - .58525 + legAngle_waist_1 * sign(p_waist_1.x);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_39_1 = rot_return_value_1;
pp_waist_1.yz *= rot_return_value_inlined_39_1;
pp_waist_1.x -= .98;
p_sdCappedCylinder_1 = pp_waist_1.zyx;
h_sdCappedCylinder_1 = .4;
r_sdCappedCylinder_1 = .24;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_40_1 = sdCappedCylinder_return_value_1;
r_waist_1.d = min(r_waist_1.d, max(sdCappedCylinder_return_value_inlined_40_1, - pp_waist_1.y));
p_sdBox_1 = pp_waist_1;
b_sdBox_1 = vec3(.24, .2, .14 + .2 * pp_waist_1.y);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_41_1 = sdBox_return_value_1;
r_waist_1.d = min(r_waist_1.d, sdBox_return_value_inlined_41_1);
p_waist_1 = pp_waist_1;
pp_waist_1.xz = abs(pp_waist_1.xz) - vec2(.12, .25);
p_sdCappedCylinder_1 = pp_waist_1.xzy;
h_sdCappedCylinder_1 = .1;
r_sdCappedCylinder_1 = .325;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_42_1 = sdCappedCylinder_return_value_1;
p_sdCappedCylinder_1 = pp_waist_1.xzy;
h_sdCappedCylinder_1 = .05;
r_sdCappedCylinder_1 = .5;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_43_1 = sdCappedCylinder_return_value_1;
r_waist_1.d = min(r_waist_1.d, max(min(sdCappedCylinder_return_value_inlined_42_1, sdCappedCylinder_return_value_inlined_43_1), pp_waist_1.y));
p_waist_1.y += .68;
p_sdBox_1 = p_waist_1;
b_sdBox_1 = vec3(sign(abs(p_waist_1.y) - .04) * .005 + .26, .2, .34);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_44_1 = sdBox_return_value_1;
r_waist_1.d = min(r_waist_1.d, sdBox_return_value_inlined_44_1);
if(d_waist_1 < r_waist_1.d)
{
r_waist_1.d = d_waist_1;
r_waist_1.mat = vec3(.02);
}
waist_return_value_1 = r_waist_1;
waist_has_returned_1 = true;
waist_return_value_inlined_58_1 = waist_return_value_1;
a_minResult_1 = r_ed209_1;
b_minResult_1 = waist_return_value_inlined_58_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_59_1 = minResult_return_value_1;
r_ed209_1 = minResult_return_value_inlined_59_1;
f_legWalkAngle_1 = 2.;
legWalkAngle_has_returned_1 = false;
legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
legWalkAngle_has_returned_1 = true;
legWalkAngle_return_value_inlined_60_1 = legWalkAngle_return_value_1;
a_rot_1 = .1 * (- edDown_1 + legWalkAngle_return_value_inlined_60_1 + smoothstep(0., 1., clamp((stretch_1 - .5) * 6., 0., 1.)) - 1.);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_61_1 = rot_return_value_1;
p_ed209_1.yz *= rot_return_value_inlined_61_1;
a_rot_1 = edTwist_1 * .2;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_62_1 = rot_return_value_1;
p_ed209_1.xz *= rot_return_value_inlined_62_1;
p_headLower_1 = p_ed209_1;
headLower_has_returned_1 = false;
op_headLower_1 = p_headLower_1;
p_headVisor_1 = p_headLower_1 * vec3(.95, - 1.4, .95);
h_headVisor_1 = 1.;
bump_headVisor_1 = 0.;
headVisor_has_returned_1 = false;
bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
p_sdBox_1 = p_headVisor_1;
b_sdBox_1 = vec3(1, h_headVisor_1, 2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
result_headVisor_1.d = sdBox_return_value_inlined_3_1;
p_headSphere_1 = p_headVisor_1;
headSphere_has_returned_1 = false;
headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
headSphere_has_returned_1 = true;
headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
result_headVisor_1.mat = vec3(.05);
result_headVisor_1.specPower = 30.;
headVisor_return_value_1 = result_headVisor_1;
headVisor_has_returned_1 = true;
headVisor_return_value_inlined_5_1 = headVisor_return_value_1;
r_headLower_1 = headVisor_return_value_inlined_5_1;
p_headVisor_1 = (p_headLower_1 + vec3(0, .01, 0)) * vec3(.95);
h_headVisor_1 = 1.;
bump_headVisor_1 = 0.;
headVisor_has_returned_1 = false;
bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
p_sdBox_1 = p_headVisor_1;
b_sdBox_1 = vec3(1, h_headVisor_1, 2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
result_headVisor_1.d = sdBox_return_value_inlined_3_1;
p_headSphere_1 = p_headVisor_1;
headSphere_has_returned_1 = false;
headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
headSphere_has_returned_1 = true;
headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
result_headVisor_1.mat = vec3(.05);
result_headVisor_1.specPower = 30.;
headVisor_return_value_1 = result_headVisor_1;
headVisor_has_returned_1 = true;
headVisor_return_value_inlined_6_1 = headVisor_return_value_1;
r_headLower_1.d = min(r_headLower_1.d, max(max(headVisor_return_value_inlined_6_1.d, p_headLower_1.y - .35), p_headLower_1.y * .625 - p_headLower_1.z - .66));
a_rot_1 = .075 * (gunsUp_1 - 1.) * sign(p_headLower_1.x);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_7_1 = rot_return_value_1;
p_headLower_1.xy *= rot_return_value_inlined_7_1;
p_headLower_1.x = abs(p_headLower_1.x) - 1.33;
p_headLower_1.y -= .1 - p_headLower_1.x * .1;
p_sdBox_1 = p_headLower_1;
b_sdBox_1 = vec3(.4, .06 * (1. - p_headLower_1.x), .3 - p_headLower_1.x * .2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_8_1 = sdBox_return_value_1;
r_headLower_1.d = min(r_headLower_1.d, sdBox_return_value_inlined_8_1);
p_headLower_1 = op_headLower_1;
p_headLower_1.y = abs(abs(p_headLower_1.y + .147) - .0556) - .0278;
p_sdBox_1 = p_headLower_1 + vec3(0, 0, 1.5);
b_sdBox_1 = vec3(mix(.25, .55, - op_headLower_1.y), .015, .1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_9_1 = sdBox_return_value_1;
r_headLower_1.d = max(r_headLower_1.d, - sdBox_return_value_inlined_9_1);
p_headLower_1 = op_headLower_1;
p_headLower_1.y = abs(p_headLower_1.y + .16) - .06;
p_headLower_1.z -= - 1.1;
p_sdCappedCylinder_1 = p_headLower_1.xzy;
h_sdCappedCylinder_1 = 1.;
r_sdCappedCylinder_1 = .03;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_10_1 = sdCappedCylinder_return_value_1;
p_sdCappedCylinder_1 = p_headLower_1.xzy;
h_sdCappedCylinder_1 = .55;
r_sdCappedCylinder_1 = 1.;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_11_1 = sdCappedCylinder_return_value_1;
r_headLower_1.d = max(r_headLower_1.d, - max(max(sdCappedCylinder_return_value_inlined_10_1, - sdCappedCylinder_return_value_inlined_11_1), p_headLower_1.z + .2));
mat_setBodyMaterial_1 = r_headLower_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_headLower_1 = mat_setBodyMaterial_1;
headLower_return_value_1 = r_headLower_1;
headLower_has_returned_1 = true;
headLower_return_value_inlined_63_1 = headLower_return_value_1;
a_minResult_1 = r_ed209_1;
b_minResult_1 = headLower_return_value_inlined_63_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_64_1 = minResult_return_value_1;
p_headVisor_1 = p_ed209_1;
h_headVisor_1 = .8;
bump_headVisor_1 = 1.;
headVisor_has_returned_1 = false;
bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
p_sdBox_1 = p_headVisor_1;
b_sdBox_1 = vec3(1, h_headVisor_1, 2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
result_headVisor_1.d = sdBox_return_value_inlined_3_1;
p_headSphere_1 = p_headVisor_1;
headSphere_has_returned_1 = false;
headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
headSphere_has_returned_1 = true;
headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
result_headVisor_1.mat = vec3(.05);
result_headVisor_1.specPower = 30.;
headVisor_return_value_1 = result_headVisor_1;
headVisor_has_returned_1 = true;
headVisor_return_value_inlined_65_1 = headVisor_return_value_1;
a_minResult_1 = minResult_return_value_inlined_64_1;
b_minResult_1 = headVisor_return_value_inlined_65_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_66_1 = minResult_return_value_1;
p_arms_1 = p_ed209_1;
arms_has_returned_1 = false;
mat_setBodyMaterial_1 = r_arms_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_arms_1 = mat_setBodyMaterial_1;
p_arms_1.x = abs(p_arms_1.x);
p_arms_1.yz += vec2(.24, 0);
a_rot_1 = .15 * (gunsUp_1 - 1.);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_23_1 = rot_return_value_1;
p_arms_1.xy *= rot_return_value_inlined_23_1;
p_sdCapsule_1 = p_arms_1;
a_sdCapsule_1 = vec3(0);
b_sdCapsule_1 = vec3(1.5, 0, 0);
r_sdCapsule_1 = .2;
sdCapsule_has_returned_1 = false;
pa_sdCapsule_1 = p_sdCapsule_1 - a_sdCapsule_1;
ba_sdCapsule_1 = b_sdCapsule_1 - a_sdCapsule_1;
sdCapsule_return_value_1 = length(pa_sdCapsule_1 - ba_sdCapsule_1 * clamp(dot(pa_sdCapsule_1, ba_sdCapsule_1) / dot(ba_sdCapsule_1, ba_sdCapsule_1), 0., 1.)) - r_sdCapsule_1;
sdCapsule_has_returned_1 = true;
sdCapsule_return_value_inlined_24_1 = sdCapsule_return_value_1;
p_sdCapsule_1 = p_arms_1;
a_sdCapsule_1 = vec3(1.5, 0, 0);
b_sdCapsule_1 = wrist_arms_1;
r_sdCapsule_1 = .2;
sdCapsule_has_returned_1 = false;
pa_sdCapsule_1 = p_sdCapsule_1 - a_sdCapsule_1;
ba_sdCapsule_1 = b_sdCapsule_1 - a_sdCapsule_1;
sdCapsule_return_value_1 = length(pa_sdCapsule_1 - ba_sdCapsule_1 * clamp(dot(pa_sdCapsule_1, ba_sdCapsule_1) / dot(ba_sdCapsule_1, ba_sdCapsule_1), 0., 1.)) - r_sdCapsule_1;
sdCapsule_has_returned_1 = true;
sdCapsule_return_value_inlined_25_1 = sdCapsule_return_value_1;
r_arms_1.d = min(sdCapsule_return_value_inlined_24_1, sdCapsule_return_value_inlined_25_1);
p_arms_1 -= wrist_arms_1;
p_arms_1.z -= gunsForward_1 * .15;
p_gunPod_1 = p_arms_1;
gunPod_has_returned_1 = false;
mat_setBodyMaterial_1 = r_gunPod_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_gunPod_1 = mat_setBodyMaterial_1;
p_gunPod_1.yz += vec2(.1, .45);
pp_gunPod_1 = p_gunPod_1;
pp_gunPod_1.z = abs(pp_gunPod_1.z) - .5;
p_sdCappedCone_1 = pp_gunPod_1;
a_sdCappedCone_1 = vec3(0);
b_sdCappedCone_1 = vec3(0, 0, - .1);
ra_sdCappedCone_1 = .35 - .1;
rb_sdCappedCone_1 = .35;
sdCappedCone_has_returned_1 = false;
rba_sdCappedCone_1 = rb_sdCappedCone_1 - ra_sdCappedCone_1;
baba_sdCappedCone_1 = dot(b_sdCappedCone_1 - a_sdCappedCone_1, b_sdCappedCone_1 - a_sdCappedCone_1);
papa_sdCappedCone_1 = dot(p_sdCappedCone_1 - a_sdCappedCone_1, p_sdCappedCone_1 - a_sdCappedCone_1);
paba_sdCappedCone_1 = dot(p_sdCappedCone_1 - a_sdCappedCone_1, b_sdCappedCone_1 - a_sdCappedCone_1) / baba_sdCappedCone_1;
x_sdCappedCone_1 = sqrt(papa_sdCappedCone_1 - paba_sdCappedCone_1 * paba_sdCappedCone_1 * baba_sdCappedCone_1);
cax_sdCappedCone_1 = max(0., x_sdCappedCone_1 - ((paba_sdCappedCone_1 < .5) ? ra_sdCappedCone_1 : rb_sdCappedCone_1));
cay_sdCappedCone_1 = abs(paba_sdCappedCone_1 - .5) - .5;
f_sdCappedCone_1 = clamp((rba_sdCappedCone_1 * (x_sdCappedCone_1 - ra_sdCappedCone_1) + paba_sdCappedCone_1 * baba_sdCappedCone_1) / (rba_sdCappedCone_1 * rba_sdCappedCone_1 + baba_sdCappedCone_1), 0., 1.);
cbx_sdCappedCone_1 = x_sdCappedCone_1 - ra_sdCappedCone_1 - f_sdCappedCone_1 * rba_sdCappedCone_1;
cby_sdCappedCone_1 = paba_sdCappedCone_1 - f_sdCappedCone_1;
sdCappedCone_return_value_1 = ((cbx_sdCappedCone_1 < 0. && cay_sdCappedCone_1 < 0.) ? - 1. : 1.) * sqrt(min(cax_sdCappedCone_1 * cax_sdCappedCone_1 + cay_sdCappedCone_1 * cay_sdCappedCone_1 * baba_sdCappedCone_1, cbx_sdCappedCone_1 * cbx_sdCappedCone_1 + cby_sdCappedCone_1 * cby_sdCappedCone_1 * baba_sdCappedCone_1));
sdCappedCone_has_returned_1 = true;
sdCappedCone_return_value_inlined_12_1 = sdCappedCone_return_value_1;
r_gunPod_1.d = sdCappedCone_return_value_inlined_12_1;
p_sdCappedCylinder_1 = p_gunPod_1;
h_sdCappedCylinder_1 = .35;
r_sdCappedCylinder_1 = .4;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_13_1 = sdCappedCylinder_return_value_1;
r_gunPod_1.d = min(r_gunPod_1.d, sdCappedCylinder_return_value_inlined_13_1);
pp_gunPod_1 = vec3(p_gunPod_1.x, .28 - p_gunPod_1.y, p_gunPod_1.z);
p_sdTriPrism_1 = pp_gunPod_1;
h_sdTriPrism_1 = vec2(.1, .5);
sdTriPrism_has_returned_1 = false;
q_sdTriPrism_1 = abs(p_sdTriPrism_1);
sdTriPrism_return_value_1 = max(q_sdTriPrism_1.z - h_sdTriPrism_1.y, max(q_sdTriPrism_1.x * .866025 + p_sdTriPrism_1.y * .5, - p_sdTriPrism_1.y) - h_sdTriPrism_1.x * .5);
sdTriPrism_has_returned_1 = true;
sdTriPrism_return_value_inlined_14_1 = sdTriPrism_return_value_1;
r_gunPod_1.d = min(r_gunPod_1.d, sdTriPrism_return_value_inlined_14_1);
pp_gunPod_1 = p_gunPod_1;
pp_gunPod_1.x = abs(p_gunPod_1.x);
a_rot_1 = .78525;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_15_1 = rot_return_value_1;
pp_gunPod_1.xy *= rot_return_value_inlined_15_1;
bump_gunPod_1 = sign(sin(pp_gunPod_1.z * 33.3)) * .003;
p_sdBox_1 = pp_gunPod_1;
b_sdBox_1 = vec3(.1 - bump_gunPod_1, .38 - bump_gunPod_1, .34);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_16_1 = sdBox_return_value_1;
d_gunPod_1 = sdBox_return_value_inlined_16_1 - .02;
pp_gunPod_1 = p_gunPod_1 - vec3(0, 0, - .6);
pp_gunPod_1.x = abs(pp_gunPod_1.x) - .1;
p_sdCappedCylinder_1 = pp_gunPod_1;
h_sdCappedCylinder_1 = .06;
r_sdCappedCylinder_1 = .15;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_17_1 = sdCappedCylinder_return_value_1;
p_sdCappedCylinder_1 = pp_gunPod_1 + vec3(0, .12, - .05);
h_sdCappedCylinder_1 = .06;
r_sdCappedCylinder_1 = .05;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_18_1 = sdCappedCylinder_return_value_1;
p_sdBox_1 = p_gunPod_1 + vec3(0, 0, .54);
b_sdBox_1 = vec3(.1, .06, .04);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_19_1 = sdBox_return_value_1;
d_gunPod_1 = min(min(min(d_gunPod_1, sdCappedCylinder_return_value_inlined_17_1), sdCappedCylinder_return_value_inlined_18_1), sdBox_return_value_inlined_19_1);
if(d_gunPod_1 < r_gunPod_1.d)
{
p_sdCappedCylinder_1 = pp_gunPod_1 + vec3(0, 0, .1);
h_sdCappedCylinder_1 = .03;
r_sdCappedCylinder_1 = .2;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_20_1 = sdCappedCylinder_return_value_1;
d_gunPod_1 = max(d_gunPod_1, - sdCappedCylinder_return_value_inlined_20_1);
r_gunPod_1.d = d_gunPod_1;
r_gunPod_1.mat = vec3(.02);
}
fireShock_has_returned_1 = false;
fireShock_return_value_1 = abs(sin(edShoot_1 * 78.5375));
fireShock_has_returned_1 = true;
fireShock_return_value_inlined_21_1 = fireShock_return_value_1;
fs_gunPod_1 = fireShock_return_value_inlined_21_1;
if(fs_gunPod_1 > .5)
{
p_sdCappedCylinder_1 = pp_gunPod_1;
h_sdCappedCylinder_1 = .01 + pp_gunPod_1.z * .05;
r_sdCappedCylinder_1 = fract(fs_gunPod_1 * 3322.423) * .5 + .9;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_22_1 = sdCappedCylinder_return_value_1;
d_gunPod_1 = sdCappedCylinder_return_value_inlined_22_1;
if(d_gunPod_1 < r_gunPod_1.d)
{
r_gunPod_1.d = d_gunPod_1;
r_gunPod_1.mat = vec3(1);
glow_1 += .1 / (.01 + d_gunPod_1 * d_gunPod_1 * 4e2);
}
}
gunPod_return_value_1 = r_gunPod_1;
gunPod_has_returned_1 = true;
gunPod_return_value_inlined_26_1 = gunPod_return_value_1;
a_minResult_1 = r_arms_1;
b_minResult_1 = gunPod_return_value_inlined_26_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_27_1 = minResult_return_value_1;
arms_return_value_1 = minResult_return_value_inlined_27_1;
arms_has_returned_1 = true;
arms_return_value_inlined_67_1 = arms_return_value_1;
a_minResult_1 = minResult_return_value_inlined_66_1;
b_minResult_1 = arms_return_value_inlined_67_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_68_1 = minResult_return_value_1;
ed209_return_value_1 = minResult_return_value_inlined_68_1;
ed209_has_returned_1 = true;
ed209_return_value_inlined_79_1 = ed209_return_value_1;
a_minResult_1 = room_return_value_inlined_78_1;
b_minResult_1 = ed209_return_value_inlined_79_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_80_1 = minResult_return_value_1;
r_map_1 = minResult_return_value_inlined_80_1;
gnd_map_1 = length(p_map_1.y + 3.);
if(gnd_map_1 < r_map_1.d)
{
r_map_1.d = gnd_map_1;
r_map_1.mat = vec3(.1);
}
map_return_value_1 = r_map_1;
map_has_returned_1 = true;
map_return_value_inlined_81_1 = map_return_value_1;
h_calcShadow_1 = map_return_value_inlined_81_1.d;
res_calcShadow_1 = min(res_calcShadow_1, 12. * h_calcShadow_1 / t_calcShadow_1);
t_calcShadow_1 += h_calcShadow_1;
if(res_calcShadow_1 < .001 || t_calcShadow_1 > 25.)
{
break;
}
}
calcShadow_return_value_1 = clamp(res_calcShadow_1, 0., 1.);
calcShadow_has_returned_1 = true;
calcShadow_return_value_inlined_88_1 = calcShadow_return_value_1;
primary_applyLighting_1 *= mix(.2, 1., calcShadow_return_value_inlined_88_1);
p_ao_1 = p_applyLighting_1;
n_ao_1 = n_applyLighting_1;
h_ao_1 = .33;
ao_has_returned_1 = false;
p_map_1 = p_ao_1 + h_ao_1 * n_ao_1;
map_has_returned_1 = false;
p_room_1 = p_map_1;
room_has_returned_1 = false;
r_room_1.mat = vec3(.4);
r_room_1.specPower = 1e7;
xy_room_1 = p_room_1.xy - vec2(0, 2);
p_room_1.x = abs(p_room_1.x);
p_room_1.yz += vec2(.5, - 3.4);
p_sdBox_1 = p_room_1;
b_sdBox_1 = frameInner_room_1 + vec3(0, 0, 1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_69_1 = sdBox_return_value_1;
doorHole_room_1 = sdBox_return_value_inlined_69_1;
backWall_room_1 = length(p_room_1.z - 8.);
r_room_1.d = min(backWall_room_1, max(length(p_room_1.z), - doorHole_room_1 + .1));
if(r_room_1.d == backWall_room_1)
{
p_sdOctogon_1 = xy_room_1;
r_sdOctogon_1 = 2.6;
sdOctogon_has_returned_1 = false;
p_sdOctogon_1 = abs(p_sdOctogon_1);
p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
sdOctogon_has_returned_1 = true;
sdOctogon_return_value_inlined_70_1 = sdOctogon_return_value_1;
p_sdOctogon_1 = xy_room_1;
r_sdOctogon_1 = 1.9;
sdOctogon_has_returned_1 = false;
p_sdOctogon_1 = abs(p_sdOctogon_1);
p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
sdOctogon_has_returned_1 = true;
sdOctogon_return_value_inlined_71_1 = sdOctogon_return_value_1;
ocp_room_1 = min(abs(sdOctogon_return_value_inlined_70_1), abs(sdOctogon_return_value_inlined_71_1));
p_sdOctogon_1 = xy_room_1;
r_sdOctogon_1 = 1.2;
sdOctogon_has_returned_1 = false;
p_sdOctogon_1 = abs(p_sdOctogon_1);
p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
sdOctogon_has_returned_1 = true;
sdOctogon_return_value_inlined_72_1 = sdOctogon_return_value_1;
ocp_room_1 = min(max(ocp_room_1, min(.7 - abs(xy_room_1.x + 1.2), - xy_room_1.y)), max(abs(sdOctogon_return_value_inlined_72_1), min(xy_room_1.x, .7 - abs(xy_room_1.y))));
if(ocp_room_1 < .3)
{
r_room_1.mat = vec3(.39, .57, .71);
}
}
p_sdBox_1 = p_room_1;
b_sdBox_1 = frameInner_room_1 + vec3(.4, .4, .1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_73_1 = sdBox_return_value_1;
doorFrame_room_1 = max(sdBox_return_value_inlined_73_1, - doorHole_room_1);
doorWidth_room_1 = frameInner_room_1.x * .5;
p_room_1.x -= frameInner_room_1.x;
a_rot_1 = doorOpen_1 * 2.1;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_74_1 = rot_return_value_1;
p_room_1.xz *= rot_return_value_inlined_74_1;
p_room_1.x += doorWidth_room_1;
p_sdBox_1 = p_room_1;
b_sdBox_1 = vec3(doorWidth_room_1, frameInner_room_1.yz);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_75_1 = sdBox_return_value_1;
door_room_1 = sdBox_return_value_inlined_75_1;
p_room_1 = abs(p_room_1) - vec3(doorWidth_room_1 * .5, 1.1, .14);
p_sdBox_1 = p_room_1;
b_sdBox_1 = vec3(.45, .9, .1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_76_1 = sdBox_return_value_1;
p_sdBox_1 = p_room_1;
b_sdBox_1 = vec3(.35, .8, 1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_77_1 = sdBox_return_value_1;
d_room_1 = min(doorFrame_room_1, max(door_room_1, - max(sdBox_return_value_inlined_76_1, - sdBox_return_value_inlined_77_1)));
if(d_room_1 < r_room_1.d)
{
r_room_1.d = d_room_1;
r_room_1.mat = vec3(.02, .02, .024);
r_room_1.specPower = 10.;
}
room_return_value_1 = r_room_1;
room_has_returned_1 = true;
room_return_value_inlined_78_1 = room_return_value_1;
p_ed209_1 = p_map_1;
ed209_has_returned_1 = false;
f_legWalkAngle_1 = 2.;
legWalkAngle_has_returned_1 = false;
legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
legWalkAngle_has_returned_1 = true;
legWalkAngle_return_value_inlined_54_1 = legWalkAngle_return_value_1;
edZ_has_returned_1 = false;
edZ_return_value_1 = mix(5., - 2., edWalk_1);
edZ_has_returned_1 = true;
edZ_return_value_inlined_55_1 = edZ_return_value_1;
p_ed209_1.yz += vec2(legWalkAngle_return_value_inlined_54_1 * .2 + .1, - edZ_return_value_inlined_55_1);
p_legs_1 = p_ed209_1;
legs_has_returned_1 = false;
mat_setBodyMaterial_1 = r_legs_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_legs_1 = mat_setBodyMaterial_1;
f_legWalkAngle_1 = 1.;
legWalkAngle_has_returned_1 = false;
legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
legWalkAngle_has_returned_1 = true;
legWalkAngle_return_value_inlined_45_1 = legWalkAngle_return_value_1;
legAngle_legs_1 = legWalkAngle_return_value_inlined_45_1;
p_legs_1.z += .27;
a_rot_1 = legAngle_legs_1 * sign(p_legs_1.x);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_46_1 = rot_return_value_1;
p_legs_1.yz *= rot_return_value_inlined_46_1;
p_legs_1.z -= .27;
p_legs_1.y += .65;
a_rot_1 = - .2;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_47_1 = rot_return_value_1;
p_legs_1.yz *= rot_return_value_inlined_47_1;
a_rot_1 = legAngle_legs_1 * .3;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_48_1 = rot_return_value_1;
p_legs_1.xy *= rot_return_value_inlined_48_1;
pp_legs_1 = p_legs_1;
pp_legs_1.x = abs(pp_legs_1.x);
pp_legs_1.y += .48;
a_rot_1 = - .58525;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_49_1 = rot_return_value_1;
pp_legs_1.yz *= rot_return_value_inlined_49_1;
pp_legs_1.x -= .98;
cp_legs_1 = pp_legs_1;
p_legs_1 = pp_legs_1;
pp_legs_1.xz = abs(pp_legs_1.xz) - vec2(.12, .25);
p_legs_1.y += .68;
p_legs_1.xy = abs(p_legs_1.xy) - .12;
p_sdBox_1 = p_legs_1;
b_sdBox_1 = vec3(.07, .05, 1.2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_50_1 = sdBox_return_value_1;
silver_legs_1 = sdBox_return_value_inlined_50_1;
cp_legs_1 -= vec3(0, - .7, 0);
p_sdBox_1 = cp_legs_1 - vec3(0, 0, 1.15);
b_sdBox_1 = vec3(.17, .17, .07);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_51_1 = sdBox_return_value_1;
r_legs_1.d = sdBox_return_value_inlined_51_1 - .04;
cp_legs_1.z ++;
p_sdChamferedCube_1 = cp_legs_1.xzy;
r_sdChamferedCube_1 = vec2(.28 - sign(abs(cp_legs_1.z) - .3) * .01, .5).xyx;
c_sdChamferedCube_1 = .18;
sdChamferedCube_has_returned_1 = false;
p_sdBox_1 = p_sdChamferedCube_1;
b_sdBox_1 = r_sdChamferedCube_1;
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_0_1 = sdBox_return_value_1;
cube_sdChamferedCube_1 = sdBox_return_value_inlined_0_1;
a_rot_1 = .78525;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_1_1 = rot_return_value_1;
p_sdChamferedCube_1.xz *= rot_return_value_inlined_1_1;
r_sdChamferedCube_1.xz *= - c_sdChamferedCube_1 / 1.41 + 1.41;
p_sdBox_1 = p_sdChamferedCube_1;
b_sdBox_1 = r_sdChamferedCube_1;
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_2_1 = sdBox_return_value_1;
sdChamferedCube_return_value_1 = max(cube_sdChamferedCube_1, sdBox_return_value_inlined_2_1);
sdChamferedCube_has_returned_1 = true;
sdChamferedCube_return_value_inlined_52_1 = sdChamferedCube_return_value_1;
r_legs_1.d = min(r_legs_1.d, sdChamferedCube_return_value_inlined_52_1);
p_foot_1 = cp_legs_1;
foot_has_returned_1 = false;
p_foot_1.z += .8;
a_rot_1 = .86;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_29_1 = rot_return_value_1;
p_foot_1.yz *= rot_return_value_inlined_29_1;
p_toe_1 = p_foot_1;
toe_has_returned_1 = false;
p_toe_1.yz += vec2(.1, .32);
p_sdBox_1 = p_toe_1;
b_sdBox_1 = vec3(.3 + .2 * (p_toe_1.z - .18) - p_toe_1.y * .228, .3 + .2 * cos((p_toe_1.z - .18) * 3.69), .35);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_28_1 = sdBox_return_value_1;
toe_return_value_1 = max(sdBox_return_value_inlined_28_1, .1 - p_toe_1.y);
toe_has_returned_1 = true;
toe_return_value_inlined_30_1 = toe_return_value_1;
d_foot_1 = toe_return_value_inlined_30_1;
a_rot_1 = 1.57;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_31_1 = rot_return_value_1;
p_foot_1.xz *= rot_return_value_inlined_31_1;
p_foot_1.x -= .43;
p_foot_1.z = .25 - abs(p_foot_1.z);
p_toe_1 = p_foot_1;
toe_has_returned_1 = false;
p_toe_1.yz += vec2(.1, .32);
p_sdBox_1 = p_toe_1;
b_sdBox_1 = vec3(.3 + .2 * (p_toe_1.z - .18) - p_toe_1.y * .228, .3 + .2 * cos((p_toe_1.z - .18) * 3.69), .35);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_28_1 = sdBox_return_value_1;
toe_return_value_1 = max(sdBox_return_value_inlined_28_1, .1 - p_toe_1.y);
toe_has_returned_1 = true;
toe_return_value_inlined_32_1 = toe_return_value_1;
foot_return_value_1 = min(d_foot_1, toe_return_value_inlined_32_1);
foot_has_returned_1 = true;
foot_return_value_inlined_53_1 = foot_return_value_1;
r_legs_1.d = min(r_legs_1.d, foot_return_value_inlined_53_1);
if(silver_legs_1 < r_legs_1.d)
{
r_legs_1.d = silver_legs_1;
r_legs_1.mat = vec3(.8);
}
legs_return_value_1 = r_legs_1;
legs_has_returned_1 = true;
legs_return_value_inlined_56_1 = legs_return_value_1;
r_ed209_1 = legs_return_value_inlined_56_1;
f_ed209_1 = min(stretch_1 * 2., 1.);
slide_ed209_1 = f_ed209_1 < .5 ? smoothstep(0., .5, f_ed209_1) : (1. - smoothstep(.5, 1., f_ed209_1) * .2);
p_ed209_1.yz -= slide_ed209_1 * .5;
gunsUp_1 = smoothstep(0., 1., clamp((stretch_1 - .66) * 6., 0., 1.));
fireShock_has_returned_1 = false;
fireShock_return_value_1 = abs(sin(edShoot_1 * 78.5375));
fireShock_has_returned_1 = true;
fireShock_return_value_inlined_57_1 = fireShock_return_value_1;
gunsForward_1 = smoothstep(0., 1., clamp((stretch_1 - .83) * 6., 0., 1.)) + fireShock_return_value_inlined_57_1 * .5;
p_waist_1 = p_ed209_1;
waist_has_returned_1 = false;
mat_setBodyMaterial_1 = r_waist_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_waist_1 = mat_setBodyMaterial_1;
p_waist_1.y += .65;
a_rot_1 = - .2;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_33_1 = rot_return_value_1;
p_waist_1.yz *= rot_return_value_inlined_33_1;
f_legWalkAngle_1 = 1.;
legWalkAngle_has_returned_1 = false;
legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
legWalkAngle_has_returned_1 = true;
legWalkAngle_return_value_inlined_34_1 = legWalkAngle_return_value_1;
legAngle_waist_1 = legWalkAngle_return_value_inlined_34_1;
a_rot_1 = legAngle_waist_1 * .3;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_35_1 = rot_return_value_1;
p_waist_1.xy *= rot_return_value_inlined_35_1;
pp_waist_1 = p_waist_1;
pp_waist_1.y += .3;
p_sdCappedCylinder_1 = pp_waist_1.zyx;
h_sdCappedCylinder_1 = .5;
r_sdCappedCylinder_1 = .5;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_36_1 = sdCappedCylinder_return_value_1;
r_waist_1.d = max(sdCappedCylinder_return_value_inlined_36_1, p_waist_1.y + .15);
bump_waist_1 = .5 - abs(sin(p_waist_1.y * 40.)) * .03;
p_sdBox_1 = p_waist_1;
b_sdBox_1 = vec3(bump_waist_1, .15, bump_waist_1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_37_1 = sdBox_return_value_1;
d_waist_1 = sdBox_return_value_inlined_37_1;
bump_waist_1 = .3 - abs(sin(p_waist_1.x * 40.)) * .03;
pp_waist_1.y += .18;
p_sdCappedCylinder_1 = pp_waist_1.zyx;
h_sdCappedCylinder_1 = bump_waist_1;
r_sdCappedCylinder_1 = .75;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_38_1 = sdCappedCylinder_return_value_1;
d_waist_1 = min(d_waist_1, sdCappedCylinder_return_value_inlined_38_1);
pp_waist_1.x = abs(pp_waist_1.x);
a_rot_1 = - .58525 + legAngle_waist_1 * sign(p_waist_1.x);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_39_1 = rot_return_value_1;
pp_waist_1.yz *= rot_return_value_inlined_39_1;
pp_waist_1.x -= .98;
p_sdCappedCylinder_1 = pp_waist_1.zyx;
h_sdCappedCylinder_1 = .4;
r_sdCappedCylinder_1 = .24;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_40_1 = sdCappedCylinder_return_value_1;
r_waist_1.d = min(r_waist_1.d, max(sdCappedCylinder_return_value_inlined_40_1, - pp_waist_1.y));
p_sdBox_1 = pp_waist_1;
b_sdBox_1 = vec3(.24, .2, .14 + .2 * pp_waist_1.y);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_41_1 = sdBox_return_value_1;
r_waist_1.d = min(r_waist_1.d, sdBox_return_value_inlined_41_1);
p_waist_1 = pp_waist_1;
pp_waist_1.xz = abs(pp_waist_1.xz) - vec2(.12, .25);
p_sdCappedCylinder_1 = pp_waist_1.xzy;
h_sdCappedCylinder_1 = .1;
r_sdCappedCylinder_1 = .325;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_42_1 = sdCappedCylinder_return_value_1;
p_sdCappedCylinder_1 = pp_waist_1.xzy;
h_sdCappedCylinder_1 = .05;
r_sdCappedCylinder_1 = .5;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_43_1 = sdCappedCylinder_return_value_1;
r_waist_1.d = min(r_waist_1.d, max(min(sdCappedCylinder_return_value_inlined_42_1, sdCappedCylinder_return_value_inlined_43_1), pp_waist_1.y));
p_waist_1.y += .68;
p_sdBox_1 = p_waist_1;
b_sdBox_1 = vec3(sign(abs(p_waist_1.y) - .04) * .005 + .26, .2, .34);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_44_1 = sdBox_return_value_1;
r_waist_1.d = min(r_waist_1.d, sdBox_return_value_inlined_44_1);
if(d_waist_1 < r_waist_1.d)
{
r_waist_1.d = d_waist_1;
r_waist_1.mat = vec3(.02);
}
waist_return_value_1 = r_waist_1;
waist_has_returned_1 = true;
waist_return_value_inlined_58_1 = waist_return_value_1;
a_minResult_1 = r_ed209_1;
b_minResult_1 = waist_return_value_inlined_58_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_59_1 = minResult_return_value_1;
r_ed209_1 = minResult_return_value_inlined_59_1;
f_legWalkAngle_1 = 2.;
legWalkAngle_has_returned_1 = false;
legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
legWalkAngle_has_returned_1 = true;
legWalkAngle_return_value_inlined_60_1 = legWalkAngle_return_value_1;
a_rot_1 = .1 * (- edDown_1 + legWalkAngle_return_value_inlined_60_1 + smoothstep(0., 1., clamp((stretch_1 - .5) * 6., 0., 1.)) - 1.);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_61_1 = rot_return_value_1;
p_ed209_1.yz *= rot_return_value_inlined_61_1;
a_rot_1 = edTwist_1 * .2;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_62_1 = rot_return_value_1;
p_ed209_1.xz *= rot_return_value_inlined_62_1;
p_headLower_1 = p_ed209_1;
headLower_has_returned_1 = false;
op_headLower_1 = p_headLower_1;
p_headVisor_1 = p_headLower_1 * vec3(.95, - 1.4, .95);
h_headVisor_1 = 1.;
bump_headVisor_1 = 0.;
headVisor_has_returned_1 = false;
bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
p_sdBox_1 = p_headVisor_1;
b_sdBox_1 = vec3(1, h_headVisor_1, 2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
result_headVisor_1.d = sdBox_return_value_inlined_3_1;
p_headSphere_1 = p_headVisor_1;
headSphere_has_returned_1 = false;
headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
headSphere_has_returned_1 = true;
headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
result_headVisor_1.mat = vec3(.05);
result_headVisor_1.specPower = 30.;
headVisor_return_value_1 = result_headVisor_1;
headVisor_has_returned_1 = true;
headVisor_return_value_inlined_5_1 = headVisor_return_value_1;
r_headLower_1 = headVisor_return_value_inlined_5_1;
p_headVisor_1 = (p_headLower_1 + vec3(0, .01, 0)) * vec3(.95);
h_headVisor_1 = 1.;
bump_headVisor_1 = 0.;
headVisor_has_returned_1 = false;
bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
p_sdBox_1 = p_headVisor_1;
b_sdBox_1 = vec3(1, h_headVisor_1, 2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
result_headVisor_1.d = sdBox_return_value_inlined_3_1;
p_headSphere_1 = p_headVisor_1;
headSphere_has_returned_1 = false;
headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
headSphere_has_returned_1 = true;
headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
result_headVisor_1.mat = vec3(.05);
result_headVisor_1.specPower = 30.;
headVisor_return_value_1 = result_headVisor_1;
headVisor_has_returned_1 = true;
headVisor_return_value_inlined_6_1 = headVisor_return_value_1;
r_headLower_1.d = min(r_headLower_1.d, max(max(headVisor_return_value_inlined_6_1.d, p_headLower_1.y - .35), p_headLower_1.y * .625 - p_headLower_1.z - .66));
a_rot_1 = .075 * (gunsUp_1 - 1.) * sign(p_headLower_1.x);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_7_1 = rot_return_value_1;
p_headLower_1.xy *= rot_return_value_inlined_7_1;
p_headLower_1.x = abs(p_headLower_1.x) - 1.33;
p_headLower_1.y -= .1 - p_headLower_1.x * .1;
p_sdBox_1 = p_headLower_1;
b_sdBox_1 = vec3(.4, .06 * (1. - p_headLower_1.x), .3 - p_headLower_1.x * .2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_8_1 = sdBox_return_value_1;
r_headLower_1.d = min(r_headLower_1.d, sdBox_return_value_inlined_8_1);
p_headLower_1 = op_headLower_1;
p_headLower_1.y = abs(abs(p_headLower_1.y + .147) - .0556) - .0278;
p_sdBox_1 = p_headLower_1 + vec3(0, 0, 1.5);
b_sdBox_1 = vec3(mix(.25, .55, - op_headLower_1.y), .015, .1);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_9_1 = sdBox_return_value_1;
r_headLower_1.d = max(r_headLower_1.d, - sdBox_return_value_inlined_9_1);
p_headLower_1 = op_headLower_1;
p_headLower_1.y = abs(p_headLower_1.y + .16) - .06;
p_headLower_1.z -= - 1.1;
p_sdCappedCylinder_1 = p_headLower_1.xzy;
h_sdCappedCylinder_1 = 1.;
r_sdCappedCylinder_1 = .03;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_10_1 = sdCappedCylinder_return_value_1;
p_sdCappedCylinder_1 = p_headLower_1.xzy;
h_sdCappedCylinder_1 = .55;
r_sdCappedCylinder_1 = 1.;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_11_1 = sdCappedCylinder_return_value_1;
r_headLower_1.d = max(r_headLower_1.d, - max(max(sdCappedCylinder_return_value_inlined_10_1, - sdCappedCylinder_return_value_inlined_11_1), p_headLower_1.z + .2));
mat_setBodyMaterial_1 = r_headLower_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_headLower_1 = mat_setBodyMaterial_1;
headLower_return_value_1 = r_headLower_1;
headLower_has_returned_1 = true;
headLower_return_value_inlined_63_1 = headLower_return_value_1;
a_minResult_1 = r_ed209_1;
b_minResult_1 = headLower_return_value_inlined_63_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_64_1 = minResult_return_value_1;
p_headVisor_1 = p_ed209_1;
h_headVisor_1 = .8;
bump_headVisor_1 = 1.;
headVisor_has_returned_1 = false;
bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
p_sdBox_1 = p_headVisor_1;
b_sdBox_1 = vec3(1, h_headVisor_1, 2);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
result_headVisor_1.d = sdBox_return_value_inlined_3_1;
p_headSphere_1 = p_headVisor_1;
headSphere_has_returned_1 = false;
headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
headSphere_has_returned_1 = true;
headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
result_headVisor_1.mat = vec3(.05);
result_headVisor_1.specPower = 30.;
headVisor_return_value_1 = result_headVisor_1;
headVisor_has_returned_1 = true;
headVisor_return_value_inlined_65_1 = headVisor_return_value_1;
a_minResult_1 = minResult_return_value_inlined_64_1;
b_minResult_1 = headVisor_return_value_inlined_65_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_66_1 = minResult_return_value_1;
p_arms_1 = p_ed209_1;
arms_has_returned_1 = false;
mat_setBodyMaterial_1 = r_arms_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_arms_1 = mat_setBodyMaterial_1;
p_arms_1.x = abs(p_arms_1.x);
p_arms_1.yz += vec2(.24, 0);
a_rot_1 = .15 * (gunsUp_1 - 1.);
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_23_1 = rot_return_value_1;
p_arms_1.xy *= rot_return_value_inlined_23_1;
p_sdCapsule_1 = p_arms_1;
a_sdCapsule_1 = vec3(0);
b_sdCapsule_1 = vec3(1.5, 0, 0);
r_sdCapsule_1 = .2;
sdCapsule_has_returned_1 = false;
pa_sdCapsule_1 = p_sdCapsule_1 - a_sdCapsule_1;
ba_sdCapsule_1 = b_sdCapsule_1 - a_sdCapsule_1;
sdCapsule_return_value_1 = length(pa_sdCapsule_1 - ba_sdCapsule_1 * clamp(dot(pa_sdCapsule_1, ba_sdCapsule_1) / dot(ba_sdCapsule_1, ba_sdCapsule_1), 0., 1.)) - r_sdCapsule_1;
sdCapsule_has_returned_1 = true;
sdCapsule_return_value_inlined_24_1 = sdCapsule_return_value_1;
p_sdCapsule_1 = p_arms_1;
a_sdCapsule_1 = vec3(1.5, 0, 0);
b_sdCapsule_1 = wrist_arms_1;
r_sdCapsule_1 = .2;
sdCapsule_has_returned_1 = false;
pa_sdCapsule_1 = p_sdCapsule_1 - a_sdCapsule_1;
ba_sdCapsule_1 = b_sdCapsule_1 - a_sdCapsule_1;
sdCapsule_return_value_1 = length(pa_sdCapsule_1 - ba_sdCapsule_1 * clamp(dot(pa_sdCapsule_1, ba_sdCapsule_1) / dot(ba_sdCapsule_1, ba_sdCapsule_1), 0., 1.)) - r_sdCapsule_1;
sdCapsule_has_returned_1 = true;
sdCapsule_return_value_inlined_25_1 = sdCapsule_return_value_1;
r_arms_1.d = min(sdCapsule_return_value_inlined_24_1, sdCapsule_return_value_inlined_25_1);
p_arms_1 -= wrist_arms_1;
p_arms_1.z -= gunsForward_1 * .15;
p_gunPod_1 = p_arms_1;
gunPod_has_returned_1 = false;
mat_setBodyMaterial_1 = r_gunPod_1;
mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
mat_setBodyMaterial_1.specPower = 30.;
r_gunPod_1 = mat_setBodyMaterial_1;
p_gunPod_1.yz += vec2(.1, .45);
pp_gunPod_1 = p_gunPod_1;
pp_gunPod_1.z = abs(pp_gunPod_1.z) - .5;
p_sdCappedCone_1 = pp_gunPod_1;
a_sdCappedCone_1 = vec3(0);
b_sdCappedCone_1 = vec3(0, 0, - .1);
ra_sdCappedCone_1 = .35 - .1;
rb_sdCappedCone_1 = .35;
sdCappedCone_has_returned_1 = false;
rba_sdCappedCone_1 = rb_sdCappedCone_1 - ra_sdCappedCone_1;
baba_sdCappedCone_1 = dot(b_sdCappedCone_1 - a_sdCappedCone_1, b_sdCappedCone_1 - a_sdCappedCone_1);
papa_sdCappedCone_1 = dot(p_sdCappedCone_1 - a_sdCappedCone_1, p_sdCappedCone_1 - a_sdCappedCone_1);
paba_sdCappedCone_1 = dot(p_sdCappedCone_1 - a_sdCappedCone_1, b_sdCappedCone_1 - a_sdCappedCone_1) / baba_sdCappedCone_1;
x_sdCappedCone_1 = sqrt(papa_sdCappedCone_1 - paba_sdCappedCone_1 * paba_sdCappedCone_1 * baba_sdCappedCone_1);
cax_sdCappedCone_1 = max(0., x_sdCappedCone_1 - ((paba_sdCappedCone_1 < .5) ? ra_sdCappedCone_1 : rb_sdCappedCone_1));
cay_sdCappedCone_1 = abs(paba_sdCappedCone_1 - .5) - .5;
f_sdCappedCone_1 = clamp((rba_sdCappedCone_1 * (x_sdCappedCone_1 - ra_sdCappedCone_1) + paba_sdCappedCone_1 * baba_sdCappedCone_1) / (rba_sdCappedCone_1 * rba_sdCappedCone_1 + baba_sdCappedCone_1), 0., 1.);
cbx_sdCappedCone_1 = x_sdCappedCone_1 - ra_sdCappedCone_1 - f_sdCappedCone_1 * rba_sdCappedCone_1;
cby_sdCappedCone_1 = paba_sdCappedCone_1 - f_sdCappedCone_1;
sdCappedCone_return_value_1 = ((cbx_sdCappedCone_1 < 0. && cay_sdCappedCone_1 < 0.) ? - 1. : 1.) * sqrt(min(cax_sdCappedCone_1 * cax_sdCappedCone_1 + cay_sdCappedCone_1 * cay_sdCappedCone_1 * baba_sdCappedCone_1, cbx_sdCappedCone_1 * cbx_sdCappedCone_1 + cby_sdCappedCone_1 * cby_sdCappedCone_1 * baba_sdCappedCone_1));
sdCappedCone_has_returned_1 = true;
sdCappedCone_return_value_inlined_12_1 = sdCappedCone_return_value_1;
r_gunPod_1.d = sdCappedCone_return_value_inlined_12_1;
p_sdCappedCylinder_1 = p_gunPod_1;
h_sdCappedCylinder_1 = .35;
r_sdCappedCylinder_1 = .4;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_13_1 = sdCappedCylinder_return_value_1;
r_gunPod_1.d = min(r_gunPod_1.d, sdCappedCylinder_return_value_inlined_13_1);
pp_gunPod_1 = vec3(p_gunPod_1.x, .28 - p_gunPod_1.y, p_gunPod_1.z);
p_sdTriPrism_1 = pp_gunPod_1;
h_sdTriPrism_1 = vec2(.1, .5);
sdTriPrism_has_returned_1 = false;
q_sdTriPrism_1 = abs(p_sdTriPrism_1);
sdTriPrism_return_value_1 = max(q_sdTriPrism_1.z - h_sdTriPrism_1.y, max(q_sdTriPrism_1.x * .866025 + p_sdTriPrism_1.y * .5, - p_sdTriPrism_1.y) - h_sdTriPrism_1.x * .5);
sdTriPrism_has_returned_1 = true;
sdTriPrism_return_value_inlined_14_1 = sdTriPrism_return_value_1;
r_gunPod_1.d = min(r_gunPod_1.d, sdTriPrism_return_value_inlined_14_1);
pp_gunPod_1 = p_gunPod_1;
pp_gunPod_1.x = abs(p_gunPod_1.x);
a_rot_1 = .78525;
rot_has_returned_1 = false;
c_rot_1 = cos(a_rot_1);
s_rot_1 = sin(a_rot_1);
rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
rot_has_returned_1 = true;
rot_return_value_inlined_15_1 = rot_return_value_1;
pp_gunPod_1.xy *= rot_return_value_inlined_15_1;
bump_gunPod_1 = sign(sin(pp_gunPod_1.z * 33.3)) * .003;
p_sdBox_1 = pp_gunPod_1;
b_sdBox_1 = vec3(.1 - bump_gunPod_1, .38 - bump_gunPod_1, .34);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_16_1 = sdBox_return_value_1;
d_gunPod_1 = sdBox_return_value_inlined_16_1 - .02;
pp_gunPod_1 = p_gunPod_1 - vec3(0, 0, - .6);
pp_gunPod_1.x = abs(pp_gunPod_1.x) - .1;
p_sdCappedCylinder_1 = pp_gunPod_1;
h_sdCappedCylinder_1 = .06;
r_sdCappedCylinder_1 = .15;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_17_1 = sdCappedCylinder_return_value_1;
p_sdCappedCylinder_1 = pp_gunPod_1 + vec3(0, .12, - .05);
h_sdCappedCylinder_1 = .06;
r_sdCappedCylinder_1 = .05;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_18_1 = sdCappedCylinder_return_value_1;
p_sdBox_1 = p_gunPod_1 + vec3(0, 0, .54);
b_sdBox_1 = vec3(.1, .06, .04);
sdBox_has_returned_1 = false;
q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
sdBox_has_returned_1 = true;
sdBox_return_value_inlined_19_1 = sdBox_return_value_1;
d_gunPod_1 = min(min(min(d_gunPod_1, sdCappedCylinder_return_value_inlined_17_1), sdCappedCylinder_return_value_inlined_18_1), sdBox_return_value_inlined_19_1);
if(d_gunPod_1 < r_gunPod_1.d)
{
p_sdCappedCylinder_1 = pp_gunPod_1 + vec3(0, 0, .1);
h_sdCappedCylinder_1 = .03;
r_sdCappedCylinder_1 = .2;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_20_1 = sdCappedCylinder_return_value_1;
d_gunPod_1 = max(d_gunPod_1, - sdCappedCylinder_return_value_inlined_20_1);
r_gunPod_1.d = d_gunPod_1;
r_gunPod_1.mat = vec3(.02);
}
fireShock_has_returned_1 = false;
fireShock_return_value_1 = abs(sin(edShoot_1 * 78.5375));
fireShock_has_returned_1 = true;
fireShock_return_value_inlined_21_1 = fireShock_return_value_1;
fs_gunPod_1 = fireShock_return_value_inlined_21_1;
if(fs_gunPod_1 > .5)
{
p_sdCappedCylinder_1 = pp_gunPod_1;
h_sdCappedCylinder_1 = .01 + pp_gunPod_1.z * .05;
r_sdCappedCylinder_1 = fract(fs_gunPod_1 * 3322.423) * .5 + .9;
sdCappedCylinder_has_returned_1 = false;
d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
sdCappedCylinder_has_returned_1 = true;
sdCappedCylinder_return_value_inlined_22_1 = sdCappedCylinder_return_value_1;
d_gunPod_1 = sdCappedCylinder_return_value_inlined_22_1;
if(d_gunPod_1 < r_gunPod_1.d)
{
r_gunPod_1.d = d_gunPod_1;
r_gunPod_1.mat = vec3(1);
glow_1 += .1 / (.01 + d_gunPod_1 * d_gunPod_1 * 4e2);
}
}
gunPod_return_value_1 = r_gunPod_1;
gunPod_has_returned_1 = true;
gunPod_return_value_inlined_26_1 = gunPod_return_value_1;
a_minResult_1 = r_arms_1;
b_minResult_1 = gunPod_return_value_inlined_26_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_27_1 = minResult_return_value_1;
arms_return_value_1 = minResult_return_value_inlined_27_1;
arms_has_returned_1 = true;
arms_return_value_inlined_67_1 = arms_return_value_1;
a_minResult_1 = minResult_return_value_inlined_66_1;
b_minResult_1 = arms_return_value_inlined_67_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_68_1 = minResult_return_value_1;
ed209_return_value_1 = minResult_return_value_inlined_68_1;
ed209_has_returned_1 = true;
ed209_return_value_inlined_79_1 = ed209_return_value_1;
a_minResult_1 = room_return_value_inlined_78_1;
b_minResult_1 = ed209_return_value_inlined_79_1;
minResult_has_returned_1 = false;
if(a_minResult_1.d < b_minResult_1.d)
{
minResult_return_value_1 = a_minResult_1;
minResult_has_returned_1 = true;
}
if(! minResult_has_returned_1)
{
minResult_return_value_1 = b_minResult_1;
minResult_has_returned_1 = true;
}
minResult_return_value_inlined_80_1 = minResult_return_value_1;
r_map_1 = minResult_return_value_inlined_80_1;
gnd_map_1 = length(p_map_1.y + 3.);
if(gnd_map_1 < r_map_1.d)
{
r_map_1.d = gnd_map_1;
r_map_1.mat = vec3(.1);
}
map_return_value_1 = r_map_1;
map_has_returned_1 = true;
map_return_value_inlined_86_1 = map_return_value_1;
ao_return_value_1 = map_return_value_inlined_86_1.d / h_ao_1;
ao_has_returned_1 = true;
ao_return_value_inlined_89_1 = ao_return_value_1;
applyLighting_return_value_1 = mix(data_applyLighting_1.mat * ((primary_applyLighting_1 + bounce_applyLighting_1) * ao_return_value_inlined_89_1 + spe_applyLighting_1) * vec3(2, 1.6, 1.7), vec3(.01), fre_applyLighting_1) * fog_applyLighting_1;
applyLighting_has_returned_1 = true;
applyLighting_return_value_inlined_91_1 = applyLighting_return_value_1;
fireShock_has_returned_1 = false;
fireShock_return_value_1 = abs(sin(edShoot_1 * 78.5375));
fireShock_has_returned_1 = true;
fireShock_return_value_inlined_92_1 = fireShock_return_value_1;
getSceneColor_return_value_1 = applyLighting_return_value_inlined_91_1 + fireShock_return_value_inlined_92_1 * .3 + g_getSceneColor_1;
getSceneColor_has_returned_1 = true;
}
getSceneColor_return_value_inlined_112_1 = getSceneColor_return_value_1;
col_mainImage_1 += getSceneColor_return_value_inlined_112_1;
col_vignette_1 = pow(max(col_mainImage_1 * dim_mainImage_1, 1e-9), vec3(.4545));
fragCoord_vignette_1 = gl_FragCoord.xy;
vignette_has_returned_1 = false;
q_vignette_1 = fragCoord_vignette_1.xy / iResolution.xy;
col_vignette_1 *= .5 + .5 * pow(max(16. * q_vignette_1.x * q_vignette_1.y * (1. - q_vignette_1.x) * (1. - q_vignette_1.y), 1e-9), .4);
vignette_return_value_1 = col_vignette_1;
vignette_has_returned_1 = true;
vignette_return_value_inlined_113_1 = vignette_return_value_1;
fragColor_1 = vec4(vignette_return_value_inlined_113_1, 1);
fragColor_1.w = 1.0;
fragColor = mix(fragColor_2, fragColor_1, 1.0 - fragColor_2.a + iTime);
}


// GLSL END


// INITIAL HLSL BEGIN

#pragma warning( disable: 3556 3571 )
struct _MarchData_1
{
    float _d;
    float3 _mat;
    float _specPower;
};
#pragma pack_matrix(row_major)
struct rm__MarchData_1
{
    float _d;
    float3 _mat;
    float _specPower;
};
#pragma pack_matrix(column_major)
struct std__MarchData_1
{
    float _d;
    float pad_0;
    float pad_1;
    float pad_2;
    float3 _mat;
    float _specPower;
};
#pragma pack_matrix(row_major)
struct std_rm__MarchData_1
{
    float _d;
    float pad_3;
    float pad_4;
    float pad_5;
    float3 _mat;
    float _specPower;
};
#pragma pack_matrix(column_major)
struct std_fp__MarchData_1
{
    float _d;
    float pad_6;
    float pad_7;
    float pad_8;
    float3 _mat;
    float _specPower;
};
#pragma pack_matrix(row_major)
struct std_rm_fp__MarchData_1
{
    float _d;
    float pad_9;
    float pad_10;
    float pad_11;
    float3 _mat;
    float _specPower;
};
#pragma pack_matrix(column_major)
float float_ctor_int(int x0)
{
    return float(x0);
}
float2 vec2_ctor(float x0, float x1)
{
    return float2(x0, x1);
}
float2 vec2_ctor_int(float x0, int x1)
{
    return float2(x0, x1);
}
float2x2 mat2_ctor(float x0, float x1, float x2, float x3)
{
    return float2x2(x0, x1, x2, x3);
}
float3 vec3_ctor(float x0, float x1, float x2)
{
    return float3(x0, x1, x2);
}
float3 vec3_ctor(float x0, float2 x1)
{
    return float3(x0, x1);
}
float3 vec3_ctor_int(int x0, float x1, float x2)
{
    return float3(x0, x1, x2);
}
float3 vec3_ctor_int_int(int x0, float x1, int x2)
{
    return float3(x0, x1, x2);
}
float3 vec3_ctor_int_int(int x0, int x1, float x2)
{
    return float3(x0, x1, x2);
}
float4 vec4_ctor(float3 x0, float x1)
{
    return float4(x0, x1);
}
float4 vec4_ctor_int(float3 x0, int x1)
{
    return float4(x0, x1);
}
// Uniforms

uniform float2 _iResolution : register(c0);
uniform float _iTime : register(c1);
#define ANGLE_USES_NESTED_BREAK
#ifdef ANGLE_ENABLE_LOOP_FLATTEN
#define LOOP [loop]
#define FLATTEN [flatten]
#else
#define LOOP
#define FLATTEN
#endif

#define ATOMIC_COUNTER_ARRAY_STRIDE 4

// Varyings

static float4 out_fragColor = {0, 0, 0, 0};
static float4 gl_FragCoord = float4(0, 0, 0, 0);

cbuffer DriverConstants : register(b1)
{
    float4 dx_ViewCoords : packoffset(c1);
    float2 dx_FragCoordOffset : packoffset(c3);
    float3 dx_DepthFront : packoffset(c2);
    float2 dx_ViewScale : packoffset(c3.z);
};

#define GL_USES_FRAG_COORD
float mod_emu(float x, float y)
{
    return x - y * floor(x / y);
}


static bool _live_tu_has_executed = {false};
static float4 _fragColor_1 = {0, 0, 0, 0};
static float _stretch_1 = {0};
static float _gunsUp_1 = {0};
static float _gunsForward_1 = {0};
static float _edWalk_1 = {0};
static float _edTwist_1 = {0};
static float _edDown_1 = {0};
static float _edShoot_1 = {0};
static float _doorOpen_1 = {0};
static float _glow_1 = {0.0};
;
static float4 _fragColor_2 = {0, 0, 0, 0};
@@ PIXEL OUTPUT @@

PS_OUTPUT main(@@ PIXEL MAIN PARAMETERS @@){
@@ MAIN PROLOGUE @@
float3 _ro_mainImage_15626 = {0, 0, 0};
float3 _lookAt_mainImage_15627 = {0, 0, 0};
float3 _col_mainImage_15628 = {0, 0, 0};
float _startScene_mainImage_15629 = {0};
float _endScene_mainImage_15630 = {0};
float _dim_mainImage_15631 = {0};
float _time_mainImage_15632 = {0};
bool _edZ_has_returned_15633 = {0};
float _edZ_return_value_15634 = {0};
float _edZ_return_value_inlined_93_15635 = {0};
float _f_remap_15636 = {0};
float _in1_remap_15637 = {0};
float _in2_remap_15638 = {0};
float _out1_remap_15639 = {0};
float _out2_remap_15640 = {0};
bool _remap_has_returned_15641 = {0};
float _remap_return_value_15642 = {0};
float _remap_return_value_inlined_94_15643 = {0};
float _t_mainImage_15644 = {0};
float _remap_return_value_inlined_95_15645 = {0};
float _edZ_return_value_inlined_96_15646 = {0};
float _edZ_return_value_inlined_97_15647 = {0};
float _edZ_return_value_inlined_98_15648 = {0};
float _edZ_return_value_inlined_99_15649 = {0};
float _edZ_return_value_inlined_100_15650 = {0};
float _edZ_return_value_inlined_101_15651 = {0};
float _remap_return_value_inlined_102_15652 = {0};
float _edZ_return_value_inlined_103_15653 = {0};
float _remap_return_value_inlined_104_15654 = {0};
float _remap_return_value_inlined_105_15655 = {0};
float _edZ_return_value_inlined_106_15656 = {0};
float _remap_return_value_inlined_107_15657 = {0};
float _remap_return_value_inlined_108_15658 = {0};
float _ternary_0_mainImage_15659 = {0};
float _remap_return_value_inlined_109_15660 = {0};
float2 _coord_mainImage_15661 = {0, 0};
bool _fireShock_has_returned_15662 = {0};
float _fireShock_return_value_15663 = {0};
float _fireShock_return_value_inlined_110_15664 = {0};
float2 _uv_mainImage_15665 = {0, 0};
float3 _ro_getRayDir_15666 = {0, 0, 0};
float3 _lookAt_getRayDir_15667 = {0, 0, 0};
float2 _uv_getRayDir_15668 = {0, 0};
bool _getRayDir_has_returned_15669 = {0};
float3 _getRayDir_return_value_15670 = {0, 0, 0};
float3 _forward_getRayDir_15671 = {0, 0, 0};
float3 _right_getRayDir_15672 = {0, 0, 0};
float3 _getRayDir_return_value_inlined_111_15673 = {0, 0, 0};
float3 _ro_getSceneColor_15674 = {0, 0, 0};
float3 _rd_getSceneColor_15675 = {0, 0, 0};
bool _getSceneColor_has_returned_15676 = {0};
float3 _getSceneColor_return_value_15677 = {0, 0, 0};
float3 _p_getSceneColor_15678 = {0, 0, 0};
float _g_getSceneColor_15679 = {0};
float _d_getSceneColor_15680 = {0};
_MarchData_1 _h_getSceneColor_15681 = {0, 0, 0, 0, 0};
float _steps_getSceneColor_15682 = {0};
float3 _p_map_15683 = {0, 0, 0};
bool _map_has_returned_15684 = {0};
_MarchData_1 _map_return_value_15685 = {0, 0, 0, 0, 0};
float3 _p_room_15686 = {0, 0, 0};
bool _room_has_returned_15687 = {0};
_MarchData_1 _room_return_value_15688 = {0, 0, 0, 0, 0};
_MarchData_1 _r_room_15690 = {0, 0, 0, 0, 0};
float2 _xy_room_15691 = {0, 0};
float _doorFrame_room_15692 = {0};
float _doorWidth_room_15693 = {0};
float _door_room_15694 = {0};
float _d_room_15695 = {0};
float3 _p_sdBox_15696 = {0, 0, 0};
float3 _b_sdBox_15697 = {0, 0, 0};
bool _sdBox_has_returned_15698 = {0};
float _sdBox_return_value_15699 = {0};
float3 _q_sdBox_15700 = {0, 0, 0};
float _sdBox_return_value_inlined_69_15701 = {0};
float _doorHole_room_15702 = {0};
float _backWall_room_15703 = {0};
float2 _p_sdOctogon_15704 = {0, 0};
float _r_sdOctogon_15705 = {0};
bool _sdOctogon_has_returned_15706 = {0};
float _sdOctogon_return_value_15707 = {0};
float _sdOctogon_return_value_inlined_70_15709 = {0};
float _sdOctogon_return_value_inlined_71_15710 = {0};
float _ocp_room_15711 = {0};
float _sdOctogon_return_value_inlined_72_15712 = {0};
float _sdBox_return_value_inlined_73_15713 = {0};
float _a_rot_15714 = {0};
bool _rot_has_returned_15715 = {0};
float2x2 _rot_return_value_15716 = {0, 0, 0, 0};
float _c_rot_15717 = {0};
float _s_rot_15718 = {0};
float2x2 _rot_return_value_inlined_74_15719 = {0, 0, 0, 0};
float _sdBox_return_value_inlined_75_15720 = {0};
float _sdBox_return_value_inlined_76_15721 = {0};
float _sdBox_return_value_inlined_77_15722 = {0};
_MarchData_1 _room_return_value_inlined_78_15723 = {0, 0, 0, 0, 0};
float3 _p_ed209_15724 = {0, 0, 0};
bool _ed209_has_returned_15725 = {0};
_MarchData_1 _ed209_return_value_15726 = {0, 0, 0, 0, 0};
float _f_legWalkAngle_15727 = {0};
bool _legWalkAngle_has_returned_15728 = {0};
float _legWalkAngle_return_value_15729 = {0};
float _legWalkAngle_return_value_inlined_54_15730 = {0};
float _edZ_return_value_inlined_55_15731 = {0};
float3 _p_legs_15732 = {0, 0, 0};
bool _legs_has_returned_15733 = {0};
_MarchData_1 _legs_return_value_15734 = {0, 0, 0, 0, 0};
_MarchData_1 _r_legs_15735 = {0, 0, 0, 0, 0};
_MarchData_1 _mat_setBodyMaterial_15736 = {0, 0, 0, 0, 0};
float _silver_legs_15737 = {0};
float _legWalkAngle_return_value_inlined_45_15738 = {0};
float _legAngle_legs_15739 = {0};
float2x2 _rot_return_value_inlined_46_15740 = {0, 0, 0, 0};
float2x2 _rot_return_value_inlined_47_15741 = {0, 0, 0, 0};
float2x2 _rot_return_value_inlined_48_15742 = {0, 0, 0, 0};
float3 _cp_legs_15743 = {0, 0, 0};
float3 _pp_legs_15744 = {0, 0, 0};
float2x2 _rot_return_value_inlined_49_15745 = {0, 0, 0, 0};
float _sdBox_return_value_inlined_50_15746 = {0};
float _sdBox_return_value_inlined_51_15747 = {0};
float3 _p_sdChamferedCube_15748 = {0, 0, 0};
float3 _r_sdChamferedCube_15749 = {0, 0, 0};
float _c_sdChamferedCube_15750 = {0};
bool _sdChamferedCube_has_returned_15751 = {0};
float _sdChamferedCube_return_value_15752 = {0};
float _sdBox_return_value_inlined_0_15753 = {0};
float _cube_sdChamferedCube_15754 = {0};
float2x2 _rot_return_value_inlined_1_15755 = {0, 0, 0, 0};
float _sdBox_return_value_inlined_2_15756 = {0};
float _sdChamferedCube_return_value_inlined_52_15757 = {0};
float3 _p_foot_15758 = {0, 0, 0};
bool _foot_has_returned_15759 = {0};
float _foot_return_value_15760 = {0};
float2x2 _rot_return_value_inlined_29_15761 = {0, 0, 0, 0};
float3 _p_toe_15762 = {0, 0, 0};
bool _toe_has_returned_15763 = {0};
float _toe_return_value_15764 = {0};
float _sdBox_return_value_inlined_28_15765 = {0};
float _toe_return_value_inlined_30_15766 = {0};
float _d_foot_15767 = {0};
float2x2 _rot_return_value_inlined_31_15768 = {0, 0, 0, 0};
float _toe_return_value_inlined_32_15769 = {0};
float _foot_return_value_inlined_53_15770 = {0};
_MarchData_1 _legs_return_value_inlined_56_15771 = {0, 0, 0, 0, 0};
_MarchData_1 _r_ed209_15772 = {0, 0, 0, 0, 0};
float _f_ed209_15773 = {0};
float _slide_ed209_15774 = {0};
float _fireShock_return_value_inlined_57_15775 = {0};
float3 _p_waist_15776 = {0, 0, 0};
bool _waist_has_returned_15777 = {0};
_MarchData_1 _waist_return_value_15778 = {0, 0, 0, 0, 0};
_MarchData_1 _r_waist_15779 = {0, 0, 0, 0, 0};
float2x2 _rot_return_value_inlined_33_15780 = {0, 0, 0, 0};
float _bump_waist_15781 = {0};
float _d_waist_15782 = {0};
float _legWalkAngle_return_value_inlined_34_15783 = {0};
float _legAngle_waist_15784 = {0};
float2x2 _rot_return_value_inlined_35_15785 = {0, 0, 0, 0};
float3 _pp_waist_15786 = {0, 0, 0};
float3 _p_sdCappedCylinder_15787 = {0, 0, 0};
float _h_sdCappedCylinder_15788 = {0};
float _r_sdCappedCylinder_15789 = {0};
bool _sdCappedCylinder_has_returned_15790 = {0};
float _sdCappedCylinder_return_value_15791 = {0};
float2 _d_sdCappedCylinder_15792 = {0, 0};
float _sdCappedCylinder_return_value_inlined_36_15793 = {0};
float _sdBox_return_value_inlined_37_15794 = {0};
float _sdCappedCylinder_return_value_inlined_38_15795 = {0};
float2x2 _rot_return_value_inlined_39_15796 = {0, 0, 0, 0};
float _sdCappedCylinder_return_value_inlined_40_15797 = {0};
float _sdBox_return_value_inlined_41_15798 = {0};
float _sdCappedCylinder_return_value_inlined_42_15799 = {0};
float _sdCappedCylinder_return_value_inlined_43_15800 = {0};
float _sdBox_return_value_inlined_44_15801 = {0};
_MarchData_1 _waist_return_value_inlined_58_15802 = {0, 0, 0, 0, 0};
_MarchData_1 _a_minResult_15803 = {0, 0, 0, 0, 0};
_MarchData_1 _b_minResult_15804 = {0, 0, 0, 0, 0};
bool _minResult_has_returned_15805 = {0};
_MarchData_1 _minResult_return_value_15806 = {0, 0, 0, 0, 0};
_MarchData_1 _minResult_return_value_inlined_59_15807 = {0, 0, 0, 0, 0};
float _legWalkAngle_return_value_inlined_60_15808 = {0};
float2x2 _rot_return_value_inlined_61_15809 = {0, 0, 0, 0};
float2x2 _rot_return_value_inlined_62_15810 = {0, 0, 0, 0};
float3 _p_headLower_15811 = {0, 0, 0};
bool _headLower_has_returned_15812 = {0};
_MarchData_1 _headLower_return_value_15813 = {0, 0, 0, 0, 0};
float3 _op_headLower_15814 = {0, 0, 0};
float3 _p_headVisor_15815 = {0, 0, 0};
float _h_headVisor_15816 = {0};
float _bump_headVisor_15817 = {0};
bool _headVisor_has_returned_15818 = {0};
_MarchData_1 _headVisor_return_value_15819 = {0, 0, 0, 0, 0};
_MarchData_1 _result_headVisor_15820 = {0, 0, 0, 0, 0};
float _sdBox_return_value_inlined_3_15821 = {0};
float3 _p_headSphere_15822 = {0, 0, 0};
bool _headSphere_has_returned_15823 = {0};
float _headSphere_return_value_15824 = {0};
float _headSphere_return_value_inlined_4_15825 = {0};
_MarchData_1 _headVisor_return_value_inlined_5_15826 = {0, 0, 0, 0, 0};
_MarchData_1 _r_headLower_15827 = {0, 0, 0, 0, 0};
_MarchData_1 _headVisor_return_value_inlined_6_15828 = {0, 0, 0, 0, 0};
float2x2 _rot_return_value_inlined_7_15829 = {0, 0, 0, 0};
float _sdBox_return_value_inlined_8_15830 = {0};
float _sdBox_return_value_inlined_9_15831 = {0};
float _sdCappedCylinder_return_value_inlined_10_15832 = {0};
float _sdCappedCylinder_return_value_inlined_11_15833 = {0};
_MarchData_1 _headLower_return_value_inlined_63_15834 = {0, 0, 0, 0, 0};
_MarchData_1 _minResult_return_value_inlined_64_15835 = {0, 0, 0, 0, 0};
_MarchData_1 _headVisor_return_value_inlined_65_15836 = {0, 0, 0, 0, 0};
_MarchData_1 _minResult_return_value_inlined_66_15837 = {0, 0, 0, 0, 0};
float3 _p_arms_15838 = {0, 0, 0};
bool _arms_has_returned_15839 = {0};
_MarchData_1 _arms_return_value_15840 = {0, 0, 0, 0, 0};
_MarchData_1 _r_arms_15842 = {0, 0, 0, 0, 0};
float2x2 _rot_return_value_inlined_23_15843 = {0, 0, 0, 0};
float3 _p_sdCapsule_15844 = {0, 0, 0};
float3 _a_sdCapsule_15845 = {0, 0, 0};
float3 _b_sdCapsule_15846 = {0, 0, 0};
float _r_sdCapsule_15847 = {0};
bool _sdCapsule_has_returned_15848 = {0};
float _sdCapsule_return_value_15849 = {0};
float3 _pa_sdCapsule_15850 = {0, 0, 0};
float3 _ba_sdCapsule_15851 = {0, 0, 0};
float _sdCapsule_return_value_inlined_24_15852 = {0};
float _sdCapsule_return_value_inlined_25_15853 = {0};
float3 _p_gunPod_15854 = {0, 0, 0};
bool _gunPod_has_returned_15855 = {0};
_MarchData_1 _gunPod_return_value_15856 = {0, 0, 0, 0, 0};
_MarchData_1 _r_gunPod_15857 = {0, 0, 0, 0, 0};
float3 _pp_gunPod_15858 = {0, 0, 0};
float3 _p_sdCappedCone_15859 = {0, 0, 0};
float3 _a_sdCappedCone_15860 = {0, 0, 0};
float3 _b_sdCappedCone_15861 = {0, 0, 0};
float _ra_sdCappedCone_15862 = {0};
float _rb_sdCappedCone_15863 = {0};
bool _sdCappedCone_has_returned_15864 = {0};
float _sdCappedCone_return_value_15865 = {0};
float _rba_sdCappedCone_15866 = {0};
float _baba_sdCappedCone_15867 = {0};
float _papa_sdCappedCone_15868 = {0};
float _paba_sdCappedCone_15869 = {0};
float _x_sdCappedCone_15870 = {0};
float _cax_sdCappedCone_15871 = {0};
float _cay_sdCappedCone_15872 = {0};
float _f_sdCappedCone_15873 = {0};
float _cbx_sdCappedCone_15874 = {0};
float _cby_sdCappedCone_15875 = {0};
float _sdCappedCone_return_value_inlined_12_15876 = {0};
float _sdCappedCylinder_return_value_inlined_13_15877 = {0};
float3 _p_sdTriPrism_15878 = {0, 0, 0};
float2 _h_sdTriPrism_15879 = {0, 0};
bool _sdTriPrism_has_returned_15880 = {0};
float _sdTriPrism_return_value_15881 = {0};
float3 _q_sdTriPrism_15882 = {0, 0, 0};
float _sdTriPrism_return_value_inlined_14_15883 = {0};
float2x2 _rot_return_value_inlined_15_15884 = {0, 0, 0, 0};
float _fs_gunPod_15885 = {0};
float _bump_gunPod_15886 = {0};
float _sdBox_return_value_inlined_16_15887 = {0};
float _d_gunPod_15888 = {0};
float _sdCappedCylinder_return_value_inlined_17_15889 = {0};
float _sdCappedCylinder_return_value_inlined_18_15890 = {0};
float _sdBox_return_value_inlined_19_15891 = {0};
float _sdCappedCylinder_return_value_inlined_20_15892 = {0};
float _fireShock_return_value_inlined_21_15893 = {0};
float _sdCappedCylinder_return_value_inlined_22_15894 = {0};
_MarchData_1 _gunPod_return_value_inlined_26_15895 = {0, 0, 0, 0, 0};
_MarchData_1 _minResult_return_value_inlined_27_15896 = {0, 0, 0, 0, 0};
_MarchData_1 _arms_return_value_inlined_67_15897 = {0, 0, 0, 0, 0};
_MarchData_1 _minResult_return_value_inlined_68_15898 = {0, 0, 0, 0, 0};
_MarchData_1 _ed209_return_value_inlined_79_15899 = {0, 0, 0, 0, 0};
_MarchData_1 _minResult_return_value_inlined_80_15900 = {0, 0, 0, 0, 0};
_MarchData_1 _r_map_15901 = {0, 0, 0, 0, 0};
float _gnd_map_15902 = {0};
_MarchData_1 _map_return_value_inlined_90_15903 = {0, 0, 0, 0, 0};
float3 _p_applyLighting_15904 = {0, 0, 0};
float3 _rd_applyLighting_15905 = {0, 0, 0};
float _d_applyLighting_15906 = {0};
_MarchData_1 _data_applyLighting_15907 = {0, 0, 0, 0, 0};
bool _applyLighting_has_returned_15908 = {0};
float3 _applyLighting_return_value_15909 = {0, 0, 0};
float3 _sunDir_applyLighting_15910 = {0, 0, 0};
float3 _p_calcNormal_15911 = {0, 0, 0};
float _t_calcNormal_15912 = {0};
bool _calcNormal_has_returned_15913 = {0};
float3 _calcNormal_return_value_15914 = {0, 0, 0};
float _d_calcNormal_15915 = {0};
float2 _e_calcNormal_15916 = {0, 0};
_MarchData_1 _map_return_value_inlined_82_15917 = {0, 0, 0, 0, 0};
_MarchData_1 _map_return_value_inlined_83_15918 = {0, 0, 0, 0, 0};
_MarchData_1 _map_return_value_inlined_84_15919 = {0, 0, 0, 0, 0};
_MarchData_1 _map_return_value_inlined_85_15920 = {0, 0, 0, 0, 0};
float3 _calcNormal_return_value_inlined_87_15921 = {0, 0, 0};
float3 _n_applyLighting_15922 = {0, 0, 0};
float _primary_applyLighting_15923 = {0};
float _bounce_applyLighting_15924 = {0};
float _spe_applyLighting_15925 = {0};
float _fre_applyLighting_15926 = {0};
float _fog_applyLighting_15927 = {0};
float3 _p_calcShadow_15928 = {0, 0, 0};
float3 _lightPos_calcShadow_15929 = {0, 0, 0};
bool _calcShadow_has_returned_15930 = {0};
float _calcShadow_return_value_15931 = {0};
float3 _rd_calcShadow_15932 = {0, 0, 0};
float _res_calcShadow_15933 = {0};
float _t_calcShadow_15934 = {0};
float _i_calcShadow_15935 = {0};
_MarchData_1 _map_return_value_inlined_81_15936 = {0, 0, 0, 0, 0};
float _h_calcShadow_15937 = {0};
float _calcShadow_return_value_inlined_88_15938 = {0};
float3 _p_ao_15939 = {0, 0, 0};
float3 _n_ao_15940 = {0, 0, 0};
float _h_ao_15941 = {0};
bool _ao_has_returned_15942 = {0};
float _ao_return_value_15943 = {0};
_MarchData_1 _map_return_value_inlined_86_15944 = {0, 0, 0, 0, 0};
float _ao_return_value_inlined_89_15945 = {0};
float3 _applyLighting_return_value_inlined_91_15946 = {0, 0, 0};
float _fireShock_return_value_inlined_92_15947 = {0};
float3 _getSceneColor_return_value_inlined_112_15948 = {0, 0, 0};
float3 _col_vignette_15949 = {0, 0, 0};
float2 _fragCoord_vignette_15950 = {0, 0};
bool _vignette_has_returned_15951 = {0};
float3 _vignette_return_value_15952 = {0, 0, 0};
float2 _q_vignette_15953 = {0, 0};
float3 _vignette_return_value_inlined_113_15954 = {0, 0, 0};
(_edWalk_1 = 1.0);
(_edTwist_1 = 0.0);
(_edDown_1 = 0.0);
(_edShoot_1 = 0.0);
(_doorOpen_1 = 1.0);
(_stretch_1 = 1.0);
(_time_mainImage_15632 = mod_emu((_iTime + 4.0), 55.0));
if ((_time_mainImage_15632 < 12.0))
{
(_startScene_mainImage_15629 = 0.0);
(_endScene_mainImage_15630 = 12.0);
(_edWalk_1 = 0.0);
(_ro_mainImage_15626 = float3(0.0, -1.5, -0.625));
(_edZ_has_returned_15633 = false);
(_edZ_return_value_15634 = lerp(5.0, -2.0, _edWalk_1));
(_edZ_has_returned_15633 = true);
(_edZ_return_value_inlined_93_15635 = _edZ_return_value_15634);
(_lookAt_mainImage_15627 = vec3_ctor_int_int(0, -1, _edZ_return_value_inlined_93_15635));
(_doorOpen_1 = smoothstep(0.0, 1.0, (_time_mainImage_15632 / 5.0)));
(_f_remap_15636 = _time_mainImage_15632);
(_in1_remap_15637 = 7.0);
(_in2_remap_15638 = 10.0);
(_out1_remap_15639 = 0.0);
(_out2_remap_15640 = 1.0);
(_remap_has_returned_15641 = false);
(_remap_return_value_15642 = lerp(_out1_remap_15639, _out2_remap_15640, clamp(((_f_remap_15636 - _in1_remap_15637) / (_in2_remap_15638 - _in1_remap_15637)), 0.0, 1.0)));
(_remap_has_returned_15641 = true);
(_remap_return_value_inlined_94_15643 = _remap_return_value_15642);
(_stretch_1 = _remap_return_value_inlined_94_15643);
}
else
{
if ((_time_mainImage_15632 < 25.0))
{
(_startScene_mainImage_15629 = 12.0);
(_endScene_mainImage_15630 = 25.0);
(_t_mainImage_15644 = (_time_mainImage_15632 - _startScene_mainImage_15629));
(_f_remap_15636 = _t_mainImage_15644);
(_in1_remap_15637 = 3.0);
(_in2_remap_15638 = 8.0);
(_out1_remap_15639 = 0.0);
(_out2_remap_15640 = 1.0);
(_remap_has_returned_15641 = false);
(_remap_return_value_15642 = lerp(_out1_remap_15639, _out2_remap_15640, clamp(((_f_remap_15636 - _in1_remap_15637) / (_in2_remap_15638 - _in1_remap_15637)), 0.0, 1.0)));
(_remap_has_returned_15641 = true);
(_remap_return_value_inlined_95_15645 = _remap_return_value_15642);
(_edWalk_1 = smoothstep(0.0, 1.0, _remap_return_value_inlined_95_15645));
(_edZ_has_returned_15633 = false);
(_edZ_return_value_15634 = lerp(5.0, -2.0, _edWalk_1));
(_edZ_has_returned_15633 = true);
(_edZ_return_value_inlined_96_15646 = _edZ_return_value_15634);
(_ro_mainImage_15626 = vec3_ctor((-0.5 * cos((_t_mainImage_15644 * 0.69999999))), (0.5 - (_t_mainImage_15644 * 0.1)), (_edZ_return_value_inlined_96_15646 - 3.0)));
(_edZ_has_returned_15633 = false);
(_edZ_return_value_15634 = lerp(5.0, -2.0, _edWalk_1));
(_edZ_has_returned_15633 = true);
(_edZ_return_value_inlined_97_15647 = _edZ_return_value_15634);
(_lookAt_mainImage_15627 = vec3_ctor_int_int(0, 0, _edZ_return_value_inlined_97_15647));
}
else
{
if ((_time_mainImage_15632 < 29.0))
{
(_startScene_mainImage_15629 = 25.0);
(_endScene_mainImage_15630 = 29.0);
(_edZ_has_returned_15633 = false);
(_edZ_return_value_15634 = lerp(5.0, -2.0, _edWalk_1));
(_edZ_has_returned_15633 = true);
(_edZ_return_value_inlined_98_15648 = _edZ_return_value_15634);
(_ro_mainImage_15626 = vec3_ctor_int(-2, (0.5 + ((_time_mainImage_15632 - _startScene_mainImage_15629) * 0.1)), (_edZ_return_value_inlined_98_15648 - 3.0)));
(_edZ_has_returned_15633 = false);
(_edZ_return_value_15634 = lerp(5.0, -2.0, _edWalk_1));
(_edZ_has_returned_15633 = true);
(_edZ_return_value_inlined_99_15649 = _edZ_return_value_15634);
(_lookAt_mainImage_15627 = vec3_ctor_int_int(0, 0, _edZ_return_value_inlined_99_15649));
}
else
{
if ((_time_mainImage_15632 < 37.0))
{
(_startScene_mainImage_15629 = 29.0);
(_endScene_mainImage_15630 = 37.0);
(_t_mainImage_15644 = (_time_mainImage_15632 - _startScene_mainImage_15629));
(_edZ_has_returned_15633 = false);
(_edZ_return_value_15634 = lerp(5.0, -2.0, _edWalk_1));
(_edZ_has_returned_15633 = true);
(_edZ_return_value_inlined_100_15650 = _edZ_return_value_15634);
(_ro_mainImage_15626 = vec3_ctor(1.5, (-1.0 - (_t_mainImage_15644 * 0.050000001)), (_edZ_return_value_inlined_100_15650 - 5.0)));
(_edZ_has_returned_15633 = false);
(_edZ_return_value_15634 = lerp(5.0, -2.0, _edWalk_1));
(_edZ_has_returned_15633 = true);
(_edZ_return_value_inlined_101_15651 = _edZ_return_value_15634);
(_lookAt_mainImage_15627 = vec3_ctor_int_int(0, -1, _edZ_return_value_inlined_101_15651));
(_f_remap_15636 = _t_mainImage_15644);
(_in1_remap_15637 = 2.0);
(_in2_remap_15638 = 5.0);
(_out1_remap_15639 = 1.0);
(_out2_remap_15640 = 0.0);
(_remap_has_returned_15641 = false);
(_remap_return_value_15642 = lerp(_out1_remap_15639, _out2_remap_15640, clamp(((_f_remap_15636 - _in1_remap_15637) / (_in2_remap_15638 - _in1_remap_15637)), 0.0, 1.0)));
(_remap_has_returned_15641 = true);
(_remap_return_value_inlined_102_15652 = _remap_return_value_15642);
(_stretch_1 = _remap_return_value_inlined_102_15652);
}
else
{
if ((_time_mainImage_15632 < 55.0))
{
(_startScene_mainImage_15629 = 37.0);
(_endScene_mainImage_15630 = 55.0);
(_t_mainImage_15644 = (_time_mainImage_15632 - _startScene_mainImage_15629));
(_edZ_has_returned_15633 = false);
(_edZ_return_value_15634 = lerp(5.0, -2.0, _edWalk_1));
(_edZ_has_returned_15633 = true);
(_edZ_return_value_inlined_103_15653 = _edZ_return_value_15634);
(_ro_mainImage_15626 = vec3_ctor(-1.8, -0.5, (_edZ_return_value_inlined_103_15653 - 2.5)));
(_f_remap_15636 = _t_mainImage_15644);
(_in1_remap_15637 = 2.0);
(_in2_remap_15638 = 3.0);
(_out1_remap_15639 = 0.0);
(_out2_remap_15640 = 1.0);
(_remap_has_returned_15641 = false);
(_remap_return_value_15642 = lerp(_out1_remap_15639, _out2_remap_15640, clamp(((_f_remap_15636 - _in1_remap_15637) / (_in2_remap_15638 - _in1_remap_15637)), 0.0, 1.0)));
(_remap_has_returned_15641 = true);
(_remap_return_value_inlined_104_15654 = _remap_return_value_15642);
(_f_remap_15636 = _t_mainImage_15644);
(_in1_remap_15637 = 11.5);
(_in2_remap_15638 = 14.5);
(_out1_remap_15639 = 0.0);
(_out2_remap_15640 = 1.0);
(_remap_has_returned_15641 = false);
(_remap_return_value_15642 = lerp(_out1_remap_15639, _out2_remap_15640, clamp(((_f_remap_15636 - _in1_remap_15637) / (_in2_remap_15638 - _in1_remap_15637)), 0.0, 1.0)));
(_remap_has_returned_15641 = true);
(_remap_return_value_inlined_105_15655 = _remap_return_value_15642);
(_stretch_1 = (_remap_return_value_inlined_104_15654 - _remap_return_value_inlined_105_15655));
(_edZ_has_returned_15633 = false);
(_edZ_return_value_15634 = lerp(5.0, -2.0, _edWalk_1));
(_edZ_has_returned_15633 = true);
(_edZ_return_value_inlined_106_15656 = _edZ_return_value_15634);
(_lookAt_mainImage_15627 = vec3_ctor_int(0, ((_stretch_1 * 0.5) - 0.5), _edZ_return_value_inlined_106_15656));
(_f_remap_15636 = _t_mainImage_15644);
(_in1_remap_15637 = 3.0);
(_in2_remap_15638 = 3.2);
(_out1_remap_15639 = 0.0);
(_out2_remap_15640 = 1.0);
(_remap_has_returned_15641 = false);
(_remap_return_value_15642 = lerp(_out1_remap_15639, _out2_remap_15640, clamp(((_f_remap_15636 - _in1_remap_15637) / (_in2_remap_15638 - _in1_remap_15637)), 0.0, 1.0)));
(_remap_has_returned_15641 = true);
(_remap_return_value_inlined_107_15657 = _remap_return_value_15642);
(_edTwist_1 = (_remap_return_value_inlined_107_15657 * _stretch_1));
(_f_remap_15636 = _t_mainImage_15644);
(_in1_remap_15637 = 3.2);
(_in2_remap_15638 = 3.4000001);
(_out1_remap_15639 = 0.0);
(_out2_remap_15640 = 1.0);
(_remap_has_returned_15641 = false);
(_remap_return_value_15642 = lerp(_out1_remap_15639, _out2_remap_15640, clamp(((_f_remap_15636 - _in1_remap_15637) / (_in2_remap_15638 - _in1_remap_15637)), 0.0, 1.0)));
(_remap_has_returned_15641 = true);
(_remap_return_value_inlined_108_15658 = _remap_return_value_15642);
(_edDown_1 = (_remap_return_value_inlined_108_15658 * _stretch_1));
if ((_t_mainImage_15644 <= 9.5))
{
(_f_remap_15636 = _t_mainImage_15644);
(_in1_remap_15637 = 4.0);
(_in2_remap_15638 = 9.5);
(_out1_remap_15639 = 0.0);
(_out2_remap_15640 = 1.0);
(_remap_has_returned_15641 = false);
(_remap_return_value_15642 = lerp(_out1_remap_15639, _out2_remap_15640, clamp(((_f_remap_15636 - _in1_remap_15637) / (_in2_remap_15638 - _in1_remap_15637)), 0.0, 1.0)));
(_remap_has_returned_15641 = true);
(_remap_return_value_inlined_109_15660 = _remap_return_value_15642);
(_ternary_0_mainImage_15659 = _remap_return_value_inlined_109_15660);
}
else
{
(_ternary_0_mainImage_15659 = 0.0);
}
(_edShoot_1 = _ternary_0_mainImage_15659);
}
}
}
}
}
(_dim_mainImage_15631 = (1.0 - cos((min(1.0, (2.0 * min(abs((_time_mainImage_15632 - _startScene_mainImage_15629)), abs((_time_mainImage_15632 - _endScene_mainImage_15630))))) * 1.5705))));
(_col_mainImage_15628 = float3(0.0, 0.0, 0.0));
(_coord_mainImage_15661 = gl_FragCoord.xy);
(_fireShock_has_returned_15662 = false);
(_fireShock_return_value_15663 = abs(sin((_edShoot_1 * 78.537498))));
(_fireShock_has_returned_15662 = true);
(_fireShock_return_value_inlined_110_15664 = _fireShock_return_value_15663);
(_coord_mainImage_15661 += ((frac((_fireShock_return_value_inlined_110_15664 * float2(23242.232, 978.23468))) - 0.5) * 10.0));
(_uv_mainImage_15665 = ((_coord_mainImage_15661 - (0.5 * _iResolution.xy)) / _iResolution.y));
(_ro_getRayDir_15666 = _ro_mainImage_15626);
(_lookAt_getRayDir_15667 = _lookAt_mainImage_15627);
(_uv_getRayDir_15668 = _uv_mainImage_15665);
(_getRayDir_has_returned_15669 = false);
(_forward_getRayDir_15671 = normalize((_lookAt_getRayDir_15667 - _ro_getRayDir_15666)));
(_right_getRayDir_15672 = normalize(cross(float3(0.0, 1.0, 0.0), _forward_getRayDir_15671)));
(_getRayDir_return_value_15670 = normalize(((_forward_getRayDir_15671 + (_right_getRayDir_15672 * _uv_getRayDir_15668.x)) + (cross(_forward_getRayDir_15671, _right_getRayDir_15672) * _uv_getRayDir_15668.y))));
(_getRayDir_has_returned_15669 = true);
(_getRayDir_return_value_inlined_111_15673 = _getRayDir_return_value_15670);
(_ro_getSceneColor_15674 = _ro_mainImage_15626);
(_rd_getSceneColor_15675 = _getRayDir_return_value_inlined_111_15673);
(_getSceneColor_has_returned_15676 = false);
(_d_getSceneColor_15680 = 0.0099999998);
{ for((_steps_getSceneColor_15682 = 0.0); ((!_getSceneColor_has_returned_15676) && (_steps_getSceneColor_15682 < 120.0)); (_steps_getSceneColor_15682++))
{
(_p_getSceneColor_15678 = (_ro_getSceneColor_15674 + (_rd_getSceneColor_15675 * _d_getSceneColor_15680)));
(_p_map_15683 = _p_getSceneColor_15678);
(_map_has_returned_15684 = false);
(_p_room_15686 = _p_map_15683);
(_room_has_returned_15687 = false);
(_r_room_15690._mat = float3(0.40000001, 0.40000001, 0.40000001));
(_r_room_15690._specPower = 10000000.0);
(_xy_room_15691 = (_p_room_15686.xy - float2(0.0, 2.0)));
(_p_room_15686.x = abs(_p_room_15686.x));
(_p_room_15686.yz += float2(0.5, -3.4000001));
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = float3(2.8, 2.5999999, 1.1));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_69_15701 = _sdBox_return_value_15699);
(_doorHole_room_15702 = _sdBox_return_value_inlined_69_15701);
(_backWall_room_15703 = length((_p_room_15686.z - 8.0)));
(_r_room_15690._d = min(_backWall_room_15703, max(length(_p_room_15686.z), ((-_doorHole_room_15702) + 0.1))));
if ((_r_room_15690._d == _backWall_room_15703))
{
(_p_sdOctogon_15704 = _xy_room_15691);
(_r_sdOctogon_15705 = 2.5999999);
(_sdOctogon_has_returned_15706 = false);
(_p_sdOctogon_15704 = abs(_p_sdOctogon_15704));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(-0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(-0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= vec2_ctor(clamp(_p_sdOctogon_15704.x, (-0.41421357 * _r_sdOctogon_15705), (0.41421357 * _r_sdOctogon_15705)), _r_sdOctogon_15705));
(_sdOctogon_return_value_15707 = (length(_p_sdOctogon_15704) * sign(_p_sdOctogon_15704.y)));
(_sdOctogon_has_returned_15706 = true);
(_sdOctogon_return_value_inlined_70_15709 = _sdOctogon_return_value_15707);
(_p_sdOctogon_15704 = _xy_room_15691);
(_r_sdOctogon_15705 = 1.9);
(_sdOctogon_has_returned_15706 = false);
(_p_sdOctogon_15704 = abs(_p_sdOctogon_15704));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(-0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(-0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= vec2_ctor(clamp(_p_sdOctogon_15704.x, (-0.41421357 * _r_sdOctogon_15705), (0.41421357 * _r_sdOctogon_15705)), _r_sdOctogon_15705));
(_sdOctogon_return_value_15707 = (length(_p_sdOctogon_15704) * sign(_p_sdOctogon_15704.y)));
(_sdOctogon_has_returned_15706 = true);
(_sdOctogon_return_value_inlined_71_15710 = _sdOctogon_return_value_15707);
(_ocp_room_15711 = min(abs(_sdOctogon_return_value_inlined_70_15709), abs(_sdOctogon_return_value_inlined_71_15710)));
(_p_sdOctogon_15704 = _xy_room_15691);
(_r_sdOctogon_15705 = 1.2);
(_sdOctogon_has_returned_15706 = false);
(_p_sdOctogon_15704 = abs(_p_sdOctogon_15704));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(-0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(-0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= vec2_ctor(clamp(_p_sdOctogon_15704.x, (-0.41421357 * _r_sdOctogon_15705), (0.41421357 * _r_sdOctogon_15705)), _r_sdOctogon_15705));
(_sdOctogon_return_value_15707 = (length(_p_sdOctogon_15704) * sign(_p_sdOctogon_15704.y)));
(_sdOctogon_has_returned_15706 = true);
(_sdOctogon_return_value_inlined_72_15712 = _sdOctogon_return_value_15707);
(_ocp_room_15711 = min(max(_ocp_room_15711, min((0.69999999 - abs((_xy_room_15691.x + 1.2))), (-_xy_room_15691.y))), max(abs(_sdOctogon_return_value_inlined_72_15712), min(_xy_room_15691.x, (0.69999999 - abs(_xy_room_15691.y))))));
if ((_ocp_room_15711 < 0.30000001))
{
(_r_room_15690._mat = float3(0.38999999, 0.56999999, 0.70999998));
}
}
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = float3(3.2, 3.0, 0.2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_73_15713 = _sdBox_return_value_15699);
(_doorFrame_room_15692 = max(_sdBox_return_value_inlined_73_15713, (-_doorHole_room_15702)));
(_doorWidth_room_15693 = 1.4);
(_p_room_15686.x -= 2.8);
(_a_rot_15714 = (_doorOpen_1 * 2.0999999));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_74_15719 = _rot_return_value_15716);
(_p_room_15686.xz = mul(_p_room_15686.xz, transpose(_rot_return_value_inlined_74_15719)));
(_p_room_15686.x += _doorWidth_room_15693);
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = vec3_ctor(_doorWidth_room_15693, float2(2.5999999, 0.1)));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_75_15720 = _sdBox_return_value_15699);
(_door_room_15694 = _sdBox_return_value_inlined_75_15720);
(_p_room_15686 = (abs(_p_room_15686) - vec3_ctor((_doorWidth_room_15693 * 0.5), 1.1, 0.14)));
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = float3(0.44999999, 0.89999998, 0.1));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_76_15721 = _sdBox_return_value_15699);
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = float3(0.34999999, 0.80000001, 1.0));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_77_15722 = _sdBox_return_value_15699);
(_d_room_15695 = min(_doorFrame_room_15692, max(_door_room_15694, (-max(_sdBox_return_value_inlined_76_15721, (-_sdBox_return_value_inlined_77_15722))))));
if ((_d_room_15695 < _r_room_15690._d))
{
(_r_room_15690._d = _d_room_15695);
(_r_room_15690._mat = float3(0.02, 0.02, 0.024));
(_r_room_15690._specPower = 10.0);
}
(_room_return_value_15688 = _r_room_15690);
(_room_has_returned_15687 = true);
(_room_return_value_inlined_78_15723 = _room_return_value_15688);
(_p_ed209_15724 = _p_map_15683);
(_ed209_has_returned_15725 = false);
(_f_legWalkAngle_15727 = 2.0);
(_legWalkAngle_has_returned_15728 = false);
(_legWalkAngle_return_value_15729 = (sin((((_edWalk_1 * 3.141) * 6.0) * _f_legWalkAngle_15727)) * 0.2));
(_legWalkAngle_has_returned_15728 = true);
(_legWalkAngle_return_value_inlined_54_15730 = _legWalkAngle_return_value_15729);
(_edZ_has_returned_15633 = false);
(_edZ_return_value_15634 = lerp(5.0, -2.0, _edWalk_1));
(_edZ_has_returned_15633 = true);
(_edZ_return_value_inlined_55_15731 = _edZ_return_value_15634);
(_p_ed209_15724.yz += vec2_ctor(((_legWalkAngle_return_value_inlined_54_15730 * 0.2) + 0.1), (-_edZ_return_value_inlined_55_15731)));
(_p_legs_15732 = _p_ed209_15724);
(_legs_has_returned_15733 = false);
(_mat_setBodyMaterial_15736 = _r_legs_15735);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_legs_15735 = _mat_setBodyMaterial_15736);
(_f_legWalkAngle_15727 = 1.0);
(_legWalkAngle_has_returned_15728 = false);
(_legWalkAngle_return_value_15729 = (sin((((_edWalk_1 * 3.141) * 6.0) * _f_legWalkAngle_15727)) * 0.2));
(_legWalkAngle_has_returned_15728 = true);
(_legWalkAngle_return_value_inlined_45_15738 = _legWalkAngle_return_value_15729);
(_legAngle_legs_15739 = _legWalkAngle_return_value_inlined_45_15738);
(_p_legs_15732.z += 0.27000001);
(_a_rot_15714 = (_legAngle_legs_15739 * sign(_p_legs_15732.x)));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_46_15740 = _rot_return_value_15716);
(_p_legs_15732.yz = mul(_p_legs_15732.yz, transpose(_rot_return_value_inlined_46_15740)));
(_p_legs_15732.z -= 0.27000001);
(_p_legs_15732.y += 0.64999998);
(_a_rot_15714 = -0.2);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_47_15741 = _rot_return_value_15716);
(_p_legs_15732.yz = mul(_p_legs_15732.yz, transpose(_rot_return_value_inlined_47_15741)));
(_a_rot_15714 = (_legAngle_legs_15739 * 0.30000001));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_48_15742 = _rot_return_value_15716);
(_p_legs_15732.xy = mul(_p_legs_15732.xy, transpose(_rot_return_value_inlined_48_15742)));
(_pp_legs_15744 = _p_legs_15732);
(_pp_legs_15744.x = abs(_pp_legs_15744.x));
(_pp_legs_15744.y += 0.47999999);
(_a_rot_15714 = -0.58525002);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_49_15745 = _rot_return_value_15716);
(_pp_legs_15744.yz = mul(_pp_legs_15744.yz, transpose(_rot_return_value_inlined_49_15745)));
(_pp_legs_15744.x -= 0.98000002);
(_cp_legs_15743 = _pp_legs_15744);
(_p_legs_15732 = _pp_legs_15744);
(_pp_legs_15744.xz = (abs(_pp_legs_15744.xz) - float2(0.12, 0.25)));
(_p_legs_15732.y += 0.68000001);
(_p_legs_15732.xy = (abs(_p_legs_15732.xy) - 0.12));
(_p_sdBox_15696 = _p_legs_15732);
(_b_sdBox_15697 = float3(0.07, 0.050000001, 1.2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_50_15746 = _sdBox_return_value_15699);
(_silver_legs_15737 = _sdBox_return_value_inlined_50_15746);
(_cp_legs_15743 -= float3(0.0, -0.69999999, 0.0));
(_p_sdBox_15696 = (_cp_legs_15743 - float3(0.0, 0.0, 1.15)));
(_b_sdBox_15697 = float3(0.17, 0.17, 0.07));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_51_15747 = _sdBox_return_value_15699);
(_r_legs_15735._d = (_sdBox_return_value_inlined_51_15747 - 0.039999999));
(_cp_legs_15743.z++);
(_p_sdChamferedCube_15748 = _cp_legs_15743.xzy);
(_r_sdChamferedCube_15749 = vec2_ctor((0.28 - (sign((abs(_cp_legs_15743.z) - 0.30000001)) * 0.0099999998)), 0.5).xyx);
(_c_sdChamferedCube_15750 = 0.18000001);
(_sdChamferedCube_has_returned_15751 = false);
(_p_sdBox_15696 = _p_sdChamferedCube_15748);
(_b_sdBox_15697 = _r_sdChamferedCube_15749);
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_0_15753 = _sdBox_return_value_15699);
(_cube_sdChamferedCube_15754 = _sdBox_return_value_inlined_0_15753);
(_a_rot_15714 = 0.78525001);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_1_15755 = _rot_return_value_15716);
(_p_sdChamferedCube_15748.xz = mul(_p_sdChamferedCube_15748.xz, transpose(_rot_return_value_inlined_1_15755)));
(_r_sdChamferedCube_15749.xz *= (((-_c_sdChamferedCube_15750) / 1.41) + 1.41));
(_p_sdBox_15696 = _p_sdChamferedCube_15748);
(_b_sdBox_15697 = _r_sdChamferedCube_15749);
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_2_15756 = _sdBox_return_value_15699);
(_sdChamferedCube_return_value_15752 = max(_cube_sdChamferedCube_15754, _sdBox_return_value_inlined_2_15756));
(_sdChamferedCube_has_returned_15751 = true);
(_sdChamferedCube_return_value_inlined_52_15757 = _sdChamferedCube_return_value_15752);
(_r_legs_15735._d = min(_r_legs_15735._d, _sdChamferedCube_return_value_inlined_52_15757));
(_p_foot_15758 = _cp_legs_15743);
(_foot_has_returned_15759 = false);
(_p_foot_15758.z += 0.80000001);
(_a_rot_15714 = 0.86000001);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_29_15761 = _rot_return_value_15716);
(_p_foot_15758.yz = mul(_p_foot_15758.yz, transpose(_rot_return_value_inlined_29_15761)));
(_p_toe_15762 = _p_foot_15758);
(_toe_has_returned_15763 = false);
(_p_toe_15762.yz += float2(0.1, 0.31999999));
(_p_sdBox_15696 = _p_toe_15762);
(_b_sdBox_15697 = vec3_ctor(((0.30000001 + (0.2 * (_p_toe_15762.z - 0.18000001))) - (_p_toe_15762.y * 0.228)), (0.30000001 + (0.2 * cos(((_p_toe_15762.z - 0.18000001) * 3.6900001)))), 0.34999999));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_28_15765 = _sdBox_return_value_15699);
(_toe_return_value_15764 = max(_sdBox_return_value_inlined_28_15765, (0.1 - _p_toe_15762.y)));
(_toe_has_returned_15763 = true);
(_toe_return_value_inlined_30_15766 = _toe_return_value_15764);
(_d_foot_15767 = _toe_return_value_inlined_30_15766);
(_a_rot_15714 = 1.5700001);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_31_15768 = _rot_return_value_15716);
(_p_foot_15758.xz = mul(_p_foot_15758.xz, transpose(_rot_return_value_inlined_31_15768)));
(_p_foot_15758.x -= 0.43000001);
(_p_foot_15758.z = (0.25 - abs(_p_foot_15758.z)));
(_p_toe_15762 = _p_foot_15758);
(_toe_has_returned_15763 = false);
(_p_toe_15762.yz += float2(0.1, 0.31999999));
(_p_sdBox_15696 = _p_toe_15762);
(_b_sdBox_15697 = vec3_ctor(((0.30000001 + (0.2 * (_p_toe_15762.z - 0.18000001))) - (_p_toe_15762.y * 0.228)), (0.30000001 + (0.2 * cos(((_p_toe_15762.z - 0.18000001) * 3.6900001)))), 0.34999999));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_28_15765 = _sdBox_return_value_15699);
(_toe_return_value_15764 = max(_sdBox_return_value_inlined_28_15765, (0.1 - _p_toe_15762.y)));
(_toe_has_returned_15763 = true);
(_toe_return_value_inlined_32_15769 = _toe_return_value_15764);
(_foot_return_value_15760 = min(_d_foot_15767, _toe_return_value_inlined_32_15769));
(_foot_has_returned_15759 = true);
(_foot_return_value_inlined_53_15770 = _foot_return_value_15760);
(_r_legs_15735._d = min(_r_legs_15735._d, _foot_return_value_inlined_53_15770));
if ((_silver_legs_15737 < _r_legs_15735._d))
{
(_r_legs_15735._d = _silver_legs_15737);
(_r_legs_15735._mat = float3(0.80000001, 0.80000001, 0.80000001));
}
(_legs_return_value_15734 = _r_legs_15735);
(_legs_has_returned_15733 = true);
(_legs_return_value_inlined_56_15771 = _legs_return_value_15734);
(_r_ed209_15772 = _legs_return_value_inlined_56_15771);
(_f_ed209_15773 = min((_stretch_1 * 2.0), 1.0));
float s1781 = {0};
if ((_f_ed209_15773 < 0.5))
{
(s1781 = smoothstep(0.0, 0.5, _f_ed209_15773));
}
else
{
(s1781 = (1.0 - (smoothstep(0.5, 1.0, _f_ed209_15773) * 0.2)));
}
(_slide_ed209_15774 = s1781);
(_p_ed209_15724.yz -= (_slide_ed209_15774 * 0.5));
(_gunsUp_1 = smoothstep(0.0, 1.0, clamp(((_stretch_1 - 0.66000003) * 6.0), 0.0, 1.0)));
(_fireShock_has_returned_15662 = false);
(_fireShock_return_value_15663 = abs(sin((_edShoot_1 * 78.537498))));
(_fireShock_has_returned_15662 = true);
(_fireShock_return_value_inlined_57_15775 = _fireShock_return_value_15663);
(_gunsForward_1 = (smoothstep(0.0, 1.0, clamp(((_stretch_1 - 0.82999998) * 6.0), 0.0, 1.0)) + (_fireShock_return_value_inlined_57_15775 * 0.5)));
(_p_waist_15776 = _p_ed209_15724);
(_waist_has_returned_15777 = false);
(_mat_setBodyMaterial_15736 = _r_waist_15779);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_waist_15779 = _mat_setBodyMaterial_15736);
(_p_waist_15776.y += 0.64999998);
(_a_rot_15714 = -0.2);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_33_15780 = _rot_return_value_15716);
(_p_waist_15776.yz = mul(_p_waist_15776.yz, transpose(_rot_return_value_inlined_33_15780)));
(_f_legWalkAngle_15727 = 1.0);
(_legWalkAngle_has_returned_15728 = false);
(_legWalkAngle_return_value_15729 = (sin((((_edWalk_1 * 3.141) * 6.0) * _f_legWalkAngle_15727)) * 0.2));
(_legWalkAngle_has_returned_15728 = true);
(_legWalkAngle_return_value_inlined_34_15783 = _legWalkAngle_return_value_15729);
(_legAngle_waist_15784 = _legWalkAngle_return_value_inlined_34_15783);
(_a_rot_15714 = (_legAngle_waist_15784 * 0.30000001));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_35_15785 = _rot_return_value_15716);
(_p_waist_15776.xy = mul(_p_waist_15776.xy, transpose(_rot_return_value_inlined_35_15785)));
(_pp_waist_15786 = _p_waist_15776);
(_pp_waist_15786.y += 0.30000001);
(_p_sdCappedCylinder_15787 = _pp_waist_15786.zyx);
(_h_sdCappedCylinder_15788 = 0.5);
(_r_sdCappedCylinder_15789 = 0.5);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_36_15793 = _sdCappedCylinder_return_value_15791);
(_r_waist_15779._d = max(_sdCappedCylinder_return_value_inlined_36_15793, (_p_waist_15776.y + 0.15000001)));
(_bump_waist_15781 = (0.5 - (abs(sin((_p_waist_15776.y * 40.0))) * 0.029999999)));
(_p_sdBox_15696 = _p_waist_15776);
(_b_sdBox_15697 = vec3_ctor(_bump_waist_15781, 0.15000001, _bump_waist_15781));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_37_15794 = _sdBox_return_value_15699);
(_d_waist_15782 = _sdBox_return_value_inlined_37_15794);
(_bump_waist_15781 = (0.30000001 - (abs(sin((_p_waist_15776.x * 40.0))) * 0.029999999)));
(_pp_waist_15786.y += 0.18000001);
(_p_sdCappedCylinder_15787 = _pp_waist_15786.zyx);
(_h_sdCappedCylinder_15788 = _bump_waist_15781);
(_r_sdCappedCylinder_15789 = 0.75);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_38_15795 = _sdCappedCylinder_return_value_15791);
(_d_waist_15782 = min(_d_waist_15782, _sdCappedCylinder_return_value_inlined_38_15795));
(_pp_waist_15786.x = abs(_pp_waist_15786.x));
(_a_rot_15714 = (-0.58525002 + (_legAngle_waist_15784 * sign(_p_waist_15776.x))));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_39_15796 = _rot_return_value_15716);
(_pp_waist_15786.yz = mul(_pp_waist_15786.yz, transpose(_rot_return_value_inlined_39_15796)));
(_pp_waist_15786.x -= 0.98000002);
(_p_sdCappedCylinder_15787 = _pp_waist_15786.zyx);
(_h_sdCappedCylinder_15788 = 0.40000001);
(_r_sdCappedCylinder_15789 = 0.23999999);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_40_15797 = _sdCappedCylinder_return_value_15791);
(_r_waist_15779._d = min(_r_waist_15779._d, max(_sdCappedCylinder_return_value_inlined_40_15797, (-_pp_waist_15786.y))));
(_p_sdBox_15696 = _pp_waist_15786);
(_b_sdBox_15697 = vec3_ctor(0.23999999, 0.2, (0.14 + (0.2 * _pp_waist_15786.y))));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_41_15798 = _sdBox_return_value_15699);
(_r_waist_15779._d = min(_r_waist_15779._d, _sdBox_return_value_inlined_41_15798));
(_p_waist_15776 = _pp_waist_15786);
(_pp_waist_15786.xz = (abs(_pp_waist_15786.xz) - float2(0.12, 0.25)));
(_p_sdCappedCylinder_15787 = _pp_waist_15786.xzy);
(_h_sdCappedCylinder_15788 = 0.1);
(_r_sdCappedCylinder_15789 = 0.32499999);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_42_15799 = _sdCappedCylinder_return_value_15791);
(_p_sdCappedCylinder_15787 = _pp_waist_15786.xzy);
(_h_sdCappedCylinder_15788 = 0.050000001);
(_r_sdCappedCylinder_15789 = 0.5);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_43_15800 = _sdCappedCylinder_return_value_15791);
(_r_waist_15779._d = min(_r_waist_15779._d, max(min(_sdCappedCylinder_return_value_inlined_42_15799, _sdCappedCylinder_return_value_inlined_43_15800), _pp_waist_15786.y)));
(_p_waist_15776.y += 0.68000001);
(_p_sdBox_15696 = _p_waist_15776);
(_b_sdBox_15697 = vec3_ctor(((sign((abs(_p_waist_15776.y) - 0.039999999)) * 0.0049999999) + 0.25999999), 0.2, 0.34));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_44_15801 = _sdBox_return_value_15699);
(_r_waist_15779._d = min(_r_waist_15779._d, _sdBox_return_value_inlined_44_15801));
if ((_d_waist_15782 < _r_waist_15779._d))
{
(_r_waist_15779._d = _d_waist_15782);
(_r_waist_15779._mat = float3(0.02, 0.02, 0.02));
}
(_waist_return_value_15778 = _r_waist_15779);
(_waist_has_returned_15777 = true);
(_waist_return_value_inlined_58_15802 = _waist_return_value_15778);
(_a_minResult_15803 = _r_ed209_15772);
(_b_minResult_15804 = _waist_return_value_inlined_58_15802);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
if ((!_live_tu_has_executed))
{
int _m_mainImage_25962 = {0};
int _n_mainImage_25963 = {0};
int _i_mainImage_25969 = {0};
int _i_calcSoftshadow_26012 = {0};
(_dim_mainImage_15631 = (1.0 * sin(((0.38 * _iTime) + 3.0))));
(_b_sdBox_15697 = vec3_ctor((1.0 * cos(_dim_mainImage_15631)), -0.1, (1.0 * sin(_dim_mainImage_15631))));
(_p_sdCappedCylinder_15787 = float3(0.0, 0.0, 0.0));
(_pp_gunPod_15858 = normalize((_p_sdCappedCylinder_15787 - _b_sdBox_15697)));
(_p_sdChamferedCube_15748 = normalize(cross(_pp_gunPod_15858, float3(0.0, 1.0, 0.0))));
(_ro_getRayDir_15666 = normalize(cross(_p_sdChamferedCube_15748, _pp_gunPod_15858)));
(_p_applyLighting_15904 = float3(0.0, 0.0, 0.0));
{ for((_m_mainImage_25962 = (0 + 0)); (_m_mainImage_25962 < 3); (_m_mainImage_25962++))
{
{ for((_n_mainImage_25963 = (0 + 0)); (_n_mainImage_25963 < 3); (_n_mainImage_25963++))
{
(_coord_mainImage_15661 = (((vec2_ctor(float_ctor_int(_m_mainImage_25962), float_ctor_int(_n_mainImage_25963)) / 3.0) - 0.5) + float2(0.0, 0.0)));
(_q_vignette_15953 = ((((2.0 * (gl_FragCoord.xy + _coord_mainImage_15661)) - _iResolution.xy) / _iResolution.y) + float2(0.0, 0.0)));
(_r_sdChamferedCube_15749 = (normalize((((_q_vignette_15953.x * _p_sdChamferedCube_15748) + (_q_vignette_15953.y * _ro_getRayDir_15666)) + (1.5 * _pp_gunPod_15858))) + float3(0.0, 0.0, 0.0)));
(_sdCappedCylinder_return_value_inlined_18_15890 = (0.0 + 0.0));
{ for((_i_mainImage_25969 = (0 + 0)); (_i_mainImage_25969 < 256); (_i_mainImage_25969++))
{
(_p_waist_15776 = ((_b_sdBox_15697 + (_sdCappedCylinder_return_value_inlined_18_15890 * _r_sdChamferedCube_15749)) + float3(0.0, 0.0, 0.0)));
(_q_sdBox_15700 = (_p_waist_15776 + float3(0.0, 0.0, 0.0)));
(_legWalkAngle_has_returned_15728 = (false + false));
(_r_sdOctogon_15705 = (0.5 + 0.0));
(_c_sdChamferedCube_15750 = ((0.34999999 + (0.2 * cos(((_iTime * 1.1) + 4.0)))) + 0.0));
(_sdCappedCylinder_return_value_inlined_40_15797 = ((0.5 + (0.15000001 * cos((_iTime * 1.7)))) + 0.0));
(_p_toe_15762 = (_q_sdBox_15700 + float3(0.0, 0.0, 0.0)));
(_ternary_0_mainImage_15659 = (_r_sdOctogon_15705 + 0.0));
(_sdBox_return_value_inlined_16_15887 = (_c_sdChamferedCube_15750 + 0.0));
(_edZ_return_value_inlined_97_15647 = (_sdCappedCylinder_return_value_inlined_40_15797 + 0.0));
(_headLower_has_returned_15812 = (false + false));
(_uv_getRayDir_15668 = (vec2_ctor(_p_toe_15762.x, length(_p_toe_15762.yz)) + float2(0.0, 0.0)));
(_doorFrame_room_15692 = (((((_ternary_0_mainImage_15659 * _ternary_0_mainImage_15659) - (_sdBox_return_value_inlined_16_15887 * _sdBox_return_value_inlined_16_15887)) + (_edZ_return_value_inlined_97_15647 * _edZ_return_value_inlined_97_15647)) / (2.0 * _edZ_return_value_inlined_97_15647)) + 0.0));
(_sdCapsule_return_value_inlined_25_15853 = (sqrt(max(((_ternary_0_mainImage_15659 * _ternary_0_mainImage_15659) - (_doorFrame_room_15692 * _doorFrame_room_15692)), 0.0)) + 0.0));
if ((((_uv_getRayDir_15668.x * _sdCapsule_return_value_inlined_25_15853) - (_uv_getRayDir_15668.y * _doorFrame_room_15692)) > (_edZ_return_value_inlined_97_15647 * max((_sdCapsule_return_value_inlined_25_15853 - _uv_getRayDir_15668.y), 0.0))))
{
(_s_rot_15718 = (length((_uv_getRayDir_15668 - vec2_ctor(_doorFrame_room_15692, _sdCapsule_return_value_inlined_25_15853))) + 0.0));
(_headLower_has_returned_15812 = (true + false));
}
else
{
(_s_rot_15718 = (max((length(_uv_getRayDir_15668) - _ternary_0_mainImage_15659), (-(length((_uv_getRayDir_15668 - vec2_ctor_int(_edZ_return_value_inlined_97_15647, 0))) - _sdBox_return_value_inlined_16_15887))) + 0.0));
(_headLower_has_returned_15812 = (true + false));
}
(_spe_applyLighting_15925 = (_s_rot_15718 + 0.0));
(_toe_return_value_inlined_30_15766 = (_spe_applyLighting_15925 + 0.0));
(_legWalkAngle_has_returned_15728 = (true + false));
(_sdBox_return_value_15699 = (_toe_return_value_inlined_30_15766 + 0.0));
(_cax_sdCappedCone_15871 = (_sdBox_return_value_15699 + 0.0));
if (((_cax_sdCappedCone_15871 < 9.9999997e-05) || (_sdCappedCylinder_return_value_inlined_18_15890 > 5.0)))
{
break;
}
(_sdCappedCylinder_return_value_inlined_18_15890 += (_cax_sdCappedCone_15871 + 0.0));
}
}
(_lookAt_getRayDir_15667 = (float3(0.0, 0.0, 0.0) + float3(0.0, 0.0, 0.0)));
if ((_sdCappedCylinder_return_value_inlined_18_15890 < 5.0))
{
(_p_waist_15776 = ((_b_sdBox_15697 + (_sdCappedCylinder_return_value_inlined_18_15890 * _r_sdChamferedCube_15749)) + float3(0.0, 0.0, 0.0)));
(_p_calcNormal_15911 = (_p_waist_15776 + float3(0.0, 0.0, 0.0)));
(_applyLighting_has_returned_15908 = (false + false));
(_h_sdTriPrism_15879 = (float2(0.57730001, -0.57730001) + float2(0.0, 0.0)));
(_q_sdBox_15700 = ((_p_calcNormal_15911 + (_h_sdTriPrism_15879.xyy * 0.00050000002)) + float3(0.0, 0.0, 0.0)));
(_legWalkAngle_has_returned_15728 = (false + false));
(_r_sdOctogon_15705 = (0.5 + 0.0));
(_c_sdChamferedCube_15750 = ((0.34999999 + (0.2 * cos(((_iTime * 1.1) + 4.0)))) + 0.0));
(_sdCappedCylinder_return_value_inlined_40_15797 = ((0.5 + (0.15000001 * cos((_iTime * 1.7)))) + 0.0));
(_p_toe_15762 = (_q_sdBox_15700 + float3(0.0, 0.0, 0.0)));
(_ternary_0_mainImage_15659 = (_r_sdOctogon_15705 + 0.0));
(_sdBox_return_value_inlined_16_15887 = (_c_sdChamferedCube_15750 + 0.0));
(_edZ_return_value_inlined_97_15647 = (_sdCappedCylinder_return_value_inlined_40_15797 + 0.0));
(_headLower_has_returned_15812 = (false + false));
(_uv_getRayDir_15668 = (vec2_ctor(_p_toe_15762.x, length(_p_toe_15762.yz)) + float2(0.0, 0.0)));
(_doorFrame_room_15692 = (((((_ternary_0_mainImage_15659 * _ternary_0_mainImage_15659) - (_sdBox_return_value_inlined_16_15887 * _sdBox_return_value_inlined_16_15887)) + (_edZ_return_value_inlined_97_15647 * _edZ_return_value_inlined_97_15647)) / (2.0 * _edZ_return_value_inlined_97_15647)) + 0.0));
(_sdCapsule_return_value_inlined_25_15853 = (sqrt(max(((_ternary_0_mainImage_15659 * _ternary_0_mainImage_15659) - (_doorFrame_room_15692 * _doorFrame_room_15692)), 0.0)) + 0.0));
if ((((_uv_getRayDir_15668.x * _sdCapsule_return_value_inlined_25_15853) - (_uv_getRayDir_15668.y * _doorFrame_room_15692)) > (_edZ_return_value_inlined_97_15647 * max((_sdCapsule_return_value_inlined_25_15853 - _uv_getRayDir_15668.y), 0.0))))
{
(_s_rot_15718 = (length((_uv_getRayDir_15668 - vec2_ctor(_doorFrame_room_15692, _sdCapsule_return_value_inlined_25_15853))) + 0.0));
(_headLower_has_returned_15812 = (true + false));
}
else
{
(_s_rot_15718 = (max((length(_uv_getRayDir_15668) - _ternary_0_mainImage_15659), (-(length((_uv_getRayDir_15668 - vec2_ctor_int(_edZ_return_value_inlined_97_15647, 0))) - _sdBox_return_value_inlined_16_15887))) + 0.0));
(_headLower_has_returned_15812 = (true + false));
}
(_spe_applyLighting_15925 = (_s_rot_15718 + 0.0));
(_toe_return_value_inlined_30_15766 = (_spe_applyLighting_15925 + 0.0));
(_legWalkAngle_has_returned_15728 = (true + false));
(_a_rot_15714 = (_toe_return_value_inlined_30_15766 + 0.0));
(_q_sdBox_15700 = ((_p_calcNormal_15911 + (_h_sdTriPrism_15879.yyx * 0.00050000002)) + float3(0.0, 0.0, 0.0)));
(_legWalkAngle_has_returned_15728 = (false + false));
(_r_sdOctogon_15705 = (0.5 + 0.0));
(_c_sdChamferedCube_15750 = ((0.34999999 + (0.2 * cos(((_iTime * 1.1) + 4.0)))) + 0.0));
(_sdCappedCylinder_return_value_inlined_40_15797 = ((0.5 + (0.15000001 * cos((_iTime * 1.7)))) + 0.0));
(_p_toe_15762 = (_q_sdBox_15700 + float3(0.0, 0.0, 0.0)));
(_ternary_0_mainImage_15659 = (_r_sdOctogon_15705 + 0.0));
(_sdBox_return_value_inlined_16_15887 = (_c_sdChamferedCube_15750 + 0.0));
(_edZ_return_value_inlined_97_15647 = (_sdCappedCylinder_return_value_inlined_40_15797 + 0.0));
(_headLower_has_returned_15812 = (false + false));
(_uv_getRayDir_15668 = (vec2_ctor(_p_toe_15762.x, length(_p_toe_15762.yz)) + float2(0.0, 0.0)));
(_doorFrame_room_15692 = (((((_ternary_0_mainImage_15659 * _ternary_0_mainImage_15659) - (_sdBox_return_value_inlined_16_15887 * _sdBox_return_value_inlined_16_15887)) + (_edZ_return_value_inlined_97_15647 * _edZ_return_value_inlined_97_15647)) / (2.0 * _edZ_return_value_inlined_97_15647)) + 0.0));
(_sdCapsule_return_value_inlined_25_15853 = (sqrt(max(((_ternary_0_mainImage_15659 * _ternary_0_mainImage_15659) - (_doorFrame_room_15692 * _doorFrame_room_15692)), 0.0)) + 0.0));
if ((((_uv_getRayDir_15668.x * _sdCapsule_return_value_inlined_25_15853) - (_uv_getRayDir_15668.y * _doorFrame_room_15692)) > (_edZ_return_value_inlined_97_15647 * max((_sdCapsule_return_value_inlined_25_15853 - _uv_getRayDir_15668.y), 0.0))))
{
(_s_rot_15718 = (length((_uv_getRayDir_15668 - vec2_ctor(_doorFrame_room_15692, _sdCapsule_return_value_inlined_25_15853))) + 0.0));
(_headLower_has_returned_15812 = (true + false));
}
else
{
(_s_rot_15718 = (max((length(_uv_getRayDir_15668) - _ternary_0_mainImage_15659), (-(length((_uv_getRayDir_15668 - vec2_ctor_int(_edZ_return_value_inlined_97_15647, 0))) - _sdBox_return_value_inlined_16_15887))) + 0.0));
(_headLower_has_returned_15812 = (true + false));
}
(_spe_applyLighting_15925 = (_s_rot_15718 + 0.0));
(_toe_return_value_inlined_30_15766 = (_spe_applyLighting_15925 + 0.0));
(_legWalkAngle_has_returned_15728 = (true + false));
(_startScene_mainImage_15629 = (_toe_return_value_inlined_30_15766 + 0.0));
(_q_sdBox_15700 = ((_p_calcNormal_15911 + (_h_sdTriPrism_15879.yxy * 0.00050000002)) + float3(0.0, 0.0, 0.0)));
(_legWalkAngle_has_returned_15728 = (false + false));
(_r_sdOctogon_15705 = (0.5 + 0.0));
(_c_sdChamferedCube_15750 = ((0.34999999 + (0.2 * cos(((_iTime * 1.1) + 4.0)))) + 0.0));
(_sdCappedCylinder_return_value_inlined_40_15797 = ((0.5 + (0.15000001 * cos((_iTime * 1.7)))) + 0.0));
(_p_toe_15762 = (_q_sdBox_15700 + float3(0.0, 0.0, 0.0)));
(_ternary_0_mainImage_15659 = (_r_sdOctogon_15705 + 0.0));
(_sdBox_return_value_inlined_16_15887 = (_c_sdChamferedCube_15750 + 0.0));
(_edZ_return_value_inlined_97_15647 = (_sdCappedCylinder_return_value_inlined_40_15797 + 0.0));
(_headLower_has_returned_15812 = (false + false));
(_uv_getRayDir_15668 = (vec2_ctor(_p_toe_15762.x, length(_p_toe_15762.yz)) + float2(0.0, 0.0)));
(_doorFrame_room_15692 = (((((_ternary_0_mainImage_15659 * _ternary_0_mainImage_15659) - (_sdBox_return_value_inlined_16_15887 * _sdBox_return_value_inlined_16_15887)) + (_edZ_return_value_inlined_97_15647 * _edZ_return_value_inlined_97_15647)) / (2.0 * _edZ_return_value_inlined_97_15647)) + 0.0));
(_sdCapsule_return_value_inlined_25_15853 = (sqrt(max(((_ternary_0_mainImage_15659 * _ternary_0_mainImage_15659) - (_doorFrame_room_15692 * _doorFrame_room_15692)), 0.0)) + 0.0));
if ((((_uv_getRayDir_15668.x * _sdCapsule_return_value_inlined_25_15853) - (_uv_getRayDir_15668.y * _doorFrame_room_15692)) > (_edZ_return_value_inlined_97_15647 * max((_sdCapsule_return_value_inlined_25_15853 - _uv_getRayDir_15668.y), 0.0))))
{
(_s_rot_15718 = (length((_uv_getRayDir_15668 - vec2_ctor(_doorFrame_room_15692, _sdCapsule_return_value_inlined_25_15853))) + 0.0));
(_headLower_has_returned_15812 = (true + false));
}
else
{
(_s_rot_15718 = (max((length(_uv_getRayDir_15668) - _ternary_0_mainImage_15659), (-(length((_uv_getRayDir_15668 - vec2_ctor_int(_edZ_return_value_inlined_97_15647, 0))) - _sdBox_return_value_inlined_16_15887))) + 0.0));
(_headLower_has_returned_15812 = (true + false));
}
(_spe_applyLighting_15925 = (_s_rot_15718 + 0.0));
(_toe_return_value_inlined_30_15766 = (_spe_applyLighting_15925 + 0.0));
(_legWalkAngle_has_returned_15728 = (true + false));
(_edZ_return_value_inlined_93_15635 = (_toe_return_value_inlined_30_15766 + 0.0));
(_q_sdBox_15700 = ((_p_calcNormal_15911 + (_h_sdTriPrism_15879.xxx * 0.00050000002)) + float3(0.0, 0.0, 0.0)));
(_legWalkAngle_has_returned_15728 = (false + false));
(_r_sdOctogon_15705 = (0.5 + 0.0));
(_c_sdChamferedCube_15750 = ((0.34999999 + (0.2 * cos(((_iTime * 1.1) + 4.0)))) + 0.0));
(_sdCappedCylinder_return_value_inlined_40_15797 = ((0.5 + (0.15000001 * cos((_iTime * 1.7)))) + 0.0));
(_p_toe_15762 = (_q_sdBox_15700 + float3(0.0, 0.0, 0.0)));
(_ternary_0_mainImage_15659 = (_r_sdOctogon_15705 + 0.0));
(_sdBox_return_value_inlined_16_15887 = (_c_sdChamferedCube_15750 + 0.0));
(_edZ_return_value_inlined_97_15647 = (_sdCappedCylinder_return_value_inlined_40_15797 + 0.0));
(_headLower_has_returned_15812 = (false + false));
(_uv_getRayDir_15668 = (vec2_ctor(_p_toe_15762.x, length(_p_toe_15762.yz)) + float2(0.0, 0.0)));
(_doorFrame_room_15692 = (((((_ternary_0_mainImage_15659 * _ternary_0_mainImage_15659) - (_sdBox_return_value_inlined_16_15887 * _sdBox_return_value_inlined_16_15887)) + (_edZ_return_value_inlined_97_15647 * _edZ_return_value_inlined_97_15647)) / (2.0 * _edZ_return_value_inlined_97_15647)) + 0.0));
(_sdCapsule_return_value_inlined_25_15853 = (sqrt(max(((_ternary_0_mainImage_15659 * _ternary_0_mainImage_15659) - (_doorFrame_room_15692 * _doorFrame_room_15692)), 0.0)) + 0.0));
if ((((_uv_getRayDir_15668.x * _sdCapsule_return_value_inlined_25_15853) - (_uv_getRayDir_15668.y * _doorFrame_room_15692)) > (_edZ_return_value_inlined_97_15647 * max((_sdCapsule_return_value_inlined_25_15853 - _uv_getRayDir_15668.y), 0.0))))
{
(_s_rot_15718 = (length((_uv_getRayDir_15668 - vec2_ctor(_doorFrame_room_15692, _sdCapsule_return_value_inlined_25_15853))) + 0.0));
(_headLower_has_returned_15812 = (true + false));
}
else
{
(_s_rot_15718 = (max((length(_uv_getRayDir_15668) - _ternary_0_mainImage_15659), (-(length((_uv_getRayDir_15668 - vec2_ctor_int(_edZ_return_value_inlined_97_15647, 0))) - _sdBox_return_value_inlined_16_15887))) + 0.0));
(_headLower_has_returned_15812 = (true + false));
}
(_spe_applyLighting_15925 = (_s_rot_15718 + 0.0));
(_toe_return_value_inlined_30_15766 = (_spe_applyLighting_15925 + 0.0));
(_legWalkAngle_has_returned_15728 = (true + false));
(_edZ_return_value_inlined_99_15649 = (_toe_return_value_inlined_30_15766 + 0.0));
(_op_headLower_15814 = (normalize(((((_h_sdTriPrism_15879.xyy * _a_rot_15714) + (_h_sdTriPrism_15879.yyx * _startScene_mainImage_15629)) + (_h_sdTriPrism_15879.yxy * _edZ_return_value_inlined_93_15635)) + (_h_sdTriPrism_15879.xxx * _edZ_return_value_inlined_99_15649))) + float3(0.0, 0.0, 0.0)));
(_applyLighting_has_returned_15908 = (true + false));
(_a_sdCapsule_15845 = (_op_headLower_15814 + float3(0.0, 0.0, 0.0)));
(_p_sdTriPrism_15878 = (_a_sdCapsule_15845 + float3(0.0, 0.0, 0.0)));
(_pp_legs_15744 = (float3(0.57703, 0.57703, 0.57703) + float3(0.0, 0.0, 0.0)));
(_doorWidth_room_15693 = (clamp(dot(_p_sdTriPrism_15878, _pp_legs_15744), 0.0, 1.0) + 0.0));
if ((_doorWidth_room_15693 > 0.001))
{
(_p_getSceneColor_15678 = ((_p_waist_15776 + (_p_sdTriPrism_15878 * 0.001)) + float3(0.0, 0.0, 0.0)));
(_p_arms_15838 = (_pp_legs_15744 + float3(0.0, 0.0, 0.0)));
(_foot_return_value_15760 = (0.001 + 0.0));
(_x_sdCappedCone_15870 = (1.0 + 0.0));
(_fireShock_return_value_inlined_21_15893 = (32.0 + 0.0));
(_sdOctogon_has_returned_15706 = (false + false));
(_ao_return_value_inlined_89_15945 = (1.0 + 0.0));
(_remap_return_value_inlined_104_15654 = (_foot_return_value_15760 + 0.0));
{ for((_i_calcSoftshadow_26012 = (0 + 0)); (_i_calcSoftshadow_26012 < 64); (_i_calcSoftshadow_26012++))
{
(_q_sdBox_15700 = ((_p_getSceneColor_15678 + (_p_arms_15838 * _remap_return_value_inlined_104_15654)) + float3(0.0, 0.0, 0.0)));
(_legWalkAngle_has_returned_15728 = (false + false));
(_r_sdOctogon_15705 = (0.5 + 0.0));
(_c_sdChamferedCube_15750 = ((0.34999999 + (0.2 * cos(((_iTime * 1.1) + 4.0)))) + 0.0));
(_sdCappedCylinder_return_value_inlined_40_15797 = ((0.5 + (0.15000001 * cos((_iTime * 1.7)))) + 0.0));
(_p_toe_15762 = (_q_sdBox_15700 + float3(0.0, 0.0, 0.0)));
(_ternary_0_mainImage_15659 = (_r_sdOctogon_15705 + 0.0));
(_sdBox_return_value_inlined_16_15887 = (_c_sdChamferedCube_15750 + 0.0));
(_edZ_return_value_inlined_97_15647 = (_sdCappedCylinder_return_value_inlined_40_15797 + 0.0));
(_headLower_has_returned_15812 = (false + false));
(_uv_getRayDir_15668 = (vec2_ctor(_p_toe_15762.x, length(_p_toe_15762.yz)) + float2(0.0, 0.0)));
(_doorFrame_room_15692 = (((((_ternary_0_mainImage_15659 * _ternary_0_mainImage_15659) - (_sdBox_return_value_inlined_16_15887 * _sdBox_return_value_inlined_16_15887)) + (_edZ_return_value_inlined_97_15647 * _edZ_return_value_inlined_97_15647)) / (2.0 * _edZ_return_value_inlined_97_15647)) + 0.0));
(_sdCapsule_return_value_inlined_25_15853 = (sqrt(max(((_ternary_0_mainImage_15659 * _ternary_0_mainImage_15659) - (_doorFrame_room_15692 * _doorFrame_room_15692)), 0.0)) + 0.0));
if ((((_uv_getRayDir_15668.x * _sdCapsule_return_value_inlined_25_15853) - (_uv_getRayDir_15668.y * _doorFrame_room_15692)) > (_edZ_return_value_inlined_97_15647 * max((_sdCapsule_return_value_inlined_25_15853 - _uv_getRayDir_15668.y), 0.0))))
{
(_s_rot_15718 = (length((_uv_getRayDir_15668 - vec2_ctor(_doorFrame_room_15692, _sdCapsule_return_value_inlined_25_15853))) + 0.0));
(_headLower_has_returned_15812 = (true + false));
}
else
{
(_s_rot_15718 = (max((length(_uv_getRayDir_15668) - _ternary_0_mainImage_15659), (-(length((_uv_getRayDir_15668 - vec2_ctor_int(_edZ_return_value_inlined_97_15647, 0))) - _sdBox_return_value_inlined_16_15887))) + 0.0));
(_headLower_has_returned_15812 = (true + false));
}
(_spe_applyLighting_15925 = (_s_rot_15718 + 0.0));
(_toe_return_value_inlined_30_15766 = (_spe_applyLighting_15925 + 0.0));
(_legWalkAngle_has_returned_15728 = (true + false));
(_out2_remap_15640 = (_toe_return_value_inlined_30_15766 + 0.0));
(_edZ_return_value_inlined_55_15731 = (_out2_remap_15640 + 0.0));
(_ao_return_value_inlined_89_15945 = (min(_ao_return_value_inlined_89_15945, ((_fireShock_return_value_inlined_21_15893 * _edZ_return_value_inlined_55_15731) / _remap_return_value_inlined_104_15654)) + 0.0));
(_remap_return_value_inlined_104_15654 += (clamp(_edZ_return_value_inlined_55_15731, 0.003, 0.1) + 0.0));
if (((_ao_return_value_inlined_89_15945 < 0.0020000001) || (_remap_return_value_inlined_104_15654 > _x_sdCappedCone_15870)))
{
break;
}
}
}
(_bounce_applyLighting_15924 = (clamp(_ao_return_value_inlined_89_15945, 0.0, 1.0) + 0.0));
(_sdOctogon_has_returned_15706 = (true + false));
(_sdBox_return_value_inlined_9_15831 = (_bounce_applyLighting_15924 + 0.0));
(_doorWidth_room_15693 *= (_sdBox_return_value_inlined_9_15831 + 0.0));
}
(_calcShadow_return_value_inlined_88_15938 = ((0.5 + (0.5 * dot(_p_sdTriPrism_15878, float3(0.0, 1.0, 0.0)))) + 0.0));
(_lookAt_getRayDir_15667 = (((float3(0.2, 0.30000001, 0.40000001) * _calcShadow_return_value_inlined_88_15938) + (float3(0.80000001, 0.69999999, 0.5) * _doorWidth_room_15693)) + float3(0.0, 0.0, 0.0)));
}
(_lookAt_getRayDir_15667 = (sqrt(_lookAt_getRayDir_15667) + float3(0.0, 0.0, 0.0)));
(_p_applyLighting_15904 += (_lookAt_getRayDir_15667 + float3(0.0, 0.0, 0.0)));
}
}
}
}
(_p_applyLighting_15904 /= 9.0);
(_fragColor_2 = vec4_ctor(_p_applyLighting_15904, 1.0));
(_fragColor_2.w = 1.0);
(_live_tu_has_executed = true);
}
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_59_15807 = _minResult_return_value_15806);
(_r_ed209_15772 = _minResult_return_value_inlined_59_15807);
(_f_legWalkAngle_15727 = 2.0);
(_legWalkAngle_has_returned_15728 = false);
(_legWalkAngle_return_value_15729 = (sin((((_edWalk_1 * 3.141) * 6.0) * _f_legWalkAngle_15727)) * 0.2));
(_legWalkAngle_has_returned_15728 = true);
(_legWalkAngle_return_value_inlined_60_15808 = _legWalkAngle_return_value_15729);
(_a_rot_15714 = (0.1 * ((((-_edDown_1) + _legWalkAngle_return_value_inlined_60_15808) + smoothstep(0.0, 1.0, clamp(((_stretch_1 - 0.5) * 6.0), 0.0, 1.0))) - 1.0)));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_61_15809 = _rot_return_value_15716);
(_p_ed209_15724.yz = mul(_p_ed209_15724.yz, transpose(_rot_return_value_inlined_61_15809)));
(_a_rot_15714 = (_edTwist_1 * 0.2));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_62_15810 = _rot_return_value_15716);
(_p_ed209_15724.xz = mul(_p_ed209_15724.xz, transpose(_rot_return_value_inlined_62_15810)));
(_p_headLower_15811 = _p_ed209_15724);
(_headLower_has_returned_15812 = false);
(_op_headLower_15814 = _p_headLower_15811);
(_p_headVisor_15815 = (_p_headLower_15811 * float3(0.94999999, -1.4, 0.94999999)));
(_h_headVisor_15816 = 1.0);
(_bump_headVisor_15817 = 0.0);
(_headVisor_has_returned_15818 = false);
(_bump_headVisor_15817 *= ((sin((_p_headVisor_15815.x * 150.0)) * sin((_p_headVisor_15815.y * 150.0))) * 0.0020000001));
(_p_sdBox_15696 = _p_headVisor_15815);
(_b_sdBox_15697 = vec3_ctor_int_int(1, _h_headVisor_15816, 2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_3_15821 = _sdBox_return_value_15699);
(_result_headVisor_15820._d = _sdBox_return_value_inlined_3_15821);
(_p_headSphere_15822 = _p_headVisor_15815);
(_headSphere_has_returned_15823 = false);
(_headSphere_return_value_15824 = ((length((_p_headSphere_15822 / float3(1.0, 0.80000001, 1.0))) - 1.0) * 0.80000001));
(_headSphere_has_returned_15823 = true);
(_headSphere_return_value_inlined_4_15825 = _headSphere_return_value_15824);
(_result_headVisor_15820._d = (max(lerp(_result_headVisor_15820._d, _headSphere_return_value_inlined_4_15825, 0.56999999), (-_p_headVisor_15815.y)) - _bump_headVisor_15817));
(_result_headVisor_15820._mat = float3(0.050000001, 0.050000001, 0.050000001));
(_result_headVisor_15820._specPower = 30.0);
(_headVisor_return_value_15819 = _result_headVisor_15820);
(_headVisor_has_returned_15818 = true);
(_headVisor_return_value_inlined_5_15826 = _headVisor_return_value_15819);
(_r_headLower_15827 = _headVisor_return_value_inlined_5_15826);
(_p_headVisor_15815 = ((_p_headLower_15811 + float3(0.0, 0.0099999998, 0.0)) * float3(0.94999999, 0.94999999, 0.94999999)));
(_h_headVisor_15816 = 1.0);
(_bump_headVisor_15817 = 0.0);
(_headVisor_has_returned_15818 = false);
(_bump_headVisor_15817 *= ((sin((_p_headVisor_15815.x * 150.0)) * sin((_p_headVisor_15815.y * 150.0))) * 0.0020000001));
(_p_sdBox_15696 = _p_headVisor_15815);
(_b_sdBox_15697 = vec3_ctor_int_int(1, _h_headVisor_15816, 2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_3_15821 = _sdBox_return_value_15699);
(_result_headVisor_15820._d = _sdBox_return_value_inlined_3_15821);
(_p_headSphere_15822 = _p_headVisor_15815);
(_headSphere_has_returned_15823 = false);
(_headSphere_return_value_15824 = ((length((_p_headSphere_15822 / float3(1.0, 0.80000001, 1.0))) - 1.0) * 0.80000001));
(_headSphere_has_returned_15823 = true);
(_headSphere_return_value_inlined_4_15825 = _headSphere_return_value_15824);
(_result_headVisor_15820._d = (max(lerp(_result_headVisor_15820._d, _headSphere_return_value_inlined_4_15825, 0.56999999), (-_p_headVisor_15815.y)) - _bump_headVisor_15817));
(_result_headVisor_15820._mat = float3(0.050000001, 0.050000001, 0.050000001));
(_result_headVisor_15820._specPower = 30.0);
(_headVisor_return_value_15819 = _result_headVisor_15820);
(_headVisor_has_returned_15818 = true);
(_headVisor_return_value_inlined_6_15828 = _headVisor_return_value_15819);
(_r_headLower_15827._d = min(_r_headLower_15827._d, max(max(_headVisor_return_value_inlined_6_15828._d, (_p_headLower_15811.y - 0.34999999)), (((_p_headLower_15811.y * 0.625) - _p_headLower_15811.z) - 0.66000003))));
(_a_rot_15714 = ((0.075000003 * (_gunsUp_1 - 1.0)) * sign(_p_headLower_15811.x)));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_7_15829 = _rot_return_value_15716);
(_p_headLower_15811.xy = mul(_p_headLower_15811.xy, transpose(_rot_return_value_inlined_7_15829)));
(_p_headLower_15811.x = (abs(_p_headLower_15811.x) - 1.33));
(_p_headLower_15811.y -= (0.1 - (_p_headLower_15811.x * 0.1)));
(_p_sdBox_15696 = _p_headLower_15811);
(_b_sdBox_15697 = vec3_ctor(0.40000001, (0.059999999 * (1.0 - _p_headLower_15811.x)), (0.30000001 - (_p_headLower_15811.x * 0.2))));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_8_15830 = _sdBox_return_value_15699);
(_r_headLower_15827._d = min(_r_headLower_15827._d, _sdBox_return_value_inlined_8_15830));
(_p_headLower_15811 = _op_headLower_15814);
(_p_headLower_15811.y = (abs((abs((_p_headLower_15811.y + 0.147)) - 0.055599999)) - 0.027799999));
(_p_sdBox_15696 = (_p_headLower_15811 + float3(0.0, 0.0, 1.5)));
(_b_sdBox_15697 = vec3_ctor(lerp(0.25, 0.55000001, (-_op_headLower_15814.y)), 0.015, 0.1));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_9_15831 = _sdBox_return_value_15699);
(_r_headLower_15827._d = max(_r_headLower_15827._d, (-_sdBox_return_value_inlined_9_15831)));
(_p_headLower_15811 = _op_headLower_15814);
(_p_headLower_15811.y = (abs((_p_headLower_15811.y + 0.16)) - 0.059999999));
(_p_headLower_15811.z -= -1.1);
(_p_sdCappedCylinder_15787 = _p_headLower_15811.xzy);
(_h_sdCappedCylinder_15788 = 1.0);
(_r_sdCappedCylinder_15789 = 0.029999999);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_10_15832 = _sdCappedCylinder_return_value_15791);
(_p_sdCappedCylinder_15787 = _p_headLower_15811.xzy);
(_h_sdCappedCylinder_15788 = 0.55000001);
(_r_sdCappedCylinder_15789 = 1.0);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_11_15833 = _sdCappedCylinder_return_value_15791);
(_r_headLower_15827._d = max(_r_headLower_15827._d, (-max(max(_sdCappedCylinder_return_value_inlined_10_15832, (-_sdCappedCylinder_return_value_inlined_11_15833)), (_p_headLower_15811.z + 0.2)))));
(_mat_setBodyMaterial_15736 = _r_headLower_15827);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_headLower_15827 = _mat_setBodyMaterial_15736);
(_headLower_return_value_15813 = _r_headLower_15827);
(_headLower_has_returned_15812 = true);
(_headLower_return_value_inlined_63_15834 = _headLower_return_value_15813);
(_a_minResult_15803 = _r_ed209_15772);
(_b_minResult_15804 = _headLower_return_value_inlined_63_15834);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_64_15835 = _minResult_return_value_15806);
(_p_headVisor_15815 = _p_ed209_15724);
(_h_headVisor_15816 = 0.80000001);
(_bump_headVisor_15817 = 1.0);
(_headVisor_has_returned_15818 = false);
(_bump_headVisor_15817 *= ((sin((_p_headVisor_15815.x * 150.0)) * sin((_p_headVisor_15815.y * 150.0))) * 0.0020000001));
(_p_sdBox_15696 = _p_headVisor_15815);
(_b_sdBox_15697 = vec3_ctor_int_int(1, _h_headVisor_15816, 2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_3_15821 = _sdBox_return_value_15699);
(_result_headVisor_15820._d = _sdBox_return_value_inlined_3_15821);
(_p_headSphere_15822 = _p_headVisor_15815);
(_headSphere_has_returned_15823 = false);
(_headSphere_return_value_15824 = ((length((_p_headSphere_15822 / float3(1.0, 0.80000001, 1.0))) - 1.0) * 0.80000001));
(_headSphere_has_returned_15823 = true);
(_headSphere_return_value_inlined_4_15825 = _headSphere_return_value_15824);
(_result_headVisor_15820._d = (max(lerp(_result_headVisor_15820._d, _headSphere_return_value_inlined_4_15825, 0.56999999), (-_p_headVisor_15815.y)) - _bump_headVisor_15817));
(_result_headVisor_15820._mat = float3(0.050000001, 0.050000001, 0.050000001));
(_result_headVisor_15820._specPower = 30.0);
(_headVisor_return_value_15819 = _result_headVisor_15820);
(_headVisor_has_returned_15818 = true);
(_headVisor_return_value_inlined_65_15836 = _headVisor_return_value_15819);
(_a_minResult_15803 = _minResult_return_value_inlined_64_15835);
(_b_minResult_15804 = _headVisor_return_value_inlined_65_15836);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_66_15837 = _minResult_return_value_15806);
(_p_arms_15838 = _p_ed209_15724);
(_arms_has_returned_15839 = false);
(_mat_setBodyMaterial_15736 = _r_arms_15842);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_arms_15842 = _mat_setBodyMaterial_15736);
(_p_arms_15838.x = abs(_p_arms_15838.x));
(_p_arms_15838.yz += float2(0.23999999, 0.0));
(_a_rot_15714 = (0.15000001 * (_gunsUp_1 - 1.0)));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_23_15843 = _rot_return_value_15716);
(_p_arms_15838.xy = mul(_p_arms_15838.xy, transpose(_rot_return_value_inlined_23_15843)));
(_p_sdCapsule_15844 = _p_arms_15838);
(_a_sdCapsule_15845 = float3(0.0, 0.0, 0.0));
(_b_sdCapsule_15846 = float3(1.5, 0.0, 0.0));
(_r_sdCapsule_15847 = 0.2);
(_sdCapsule_has_returned_15848 = false);
(_pa_sdCapsule_15850 = (_p_sdCapsule_15844 - _a_sdCapsule_15845));
(_ba_sdCapsule_15851 = (_b_sdCapsule_15846 - _a_sdCapsule_15845));
(_sdCapsule_return_value_15849 = (length((_pa_sdCapsule_15850 - (_ba_sdCapsule_15851 * clamp((dot(_pa_sdCapsule_15850, _ba_sdCapsule_15851) / dot(_ba_sdCapsule_15851, _ba_sdCapsule_15851)), 0.0, 1.0)))) - _r_sdCapsule_15847));
(_sdCapsule_has_returned_15848 = true);
(_sdCapsule_return_value_inlined_24_15852 = _sdCapsule_return_value_15849);
(_p_sdCapsule_15844 = _p_arms_15838);
(_a_sdCapsule_15845 = float3(1.5, 0.0, 0.0));
(_b_sdCapsule_15846 = float3(1.5, 0.0, -0.30000001));
(_r_sdCapsule_15847 = 0.2);
(_sdCapsule_has_returned_15848 = false);
(_pa_sdCapsule_15850 = (_p_sdCapsule_15844 - _a_sdCapsule_15845));
(_ba_sdCapsule_15851 = (_b_sdCapsule_15846 - _a_sdCapsule_15845));
(_sdCapsule_return_value_15849 = (length((_pa_sdCapsule_15850 - (_ba_sdCapsule_15851 * clamp((dot(_pa_sdCapsule_15850, _ba_sdCapsule_15851) / dot(_ba_sdCapsule_15851, _ba_sdCapsule_15851)), 0.0, 1.0)))) - _r_sdCapsule_15847));
(_sdCapsule_has_returned_15848 = true);
(_sdCapsule_return_value_inlined_25_15853 = _sdCapsule_return_value_15849);
(_r_arms_15842._d = min(_sdCapsule_return_value_inlined_24_15852, _sdCapsule_return_value_inlined_25_15853));
(_p_arms_15838 -= float3(1.5, 0.0, -0.30000001));
(_p_arms_15838.z -= (_gunsForward_1 * 0.15000001));
(_p_gunPod_15854 = _p_arms_15838);
(_gunPod_has_returned_15855 = false);
(_mat_setBodyMaterial_15736 = _r_gunPod_15857);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_gunPod_15857 = _mat_setBodyMaterial_15736);
(_p_gunPod_15854.yz += float2(0.1, 0.44999999));
(_pp_gunPod_15858 = _p_gunPod_15854);
(_pp_gunPod_15858.z = (abs(_pp_gunPod_15858.z) - 0.5));
(_p_sdCappedCone_15859 = _pp_gunPod_15858);
(_a_sdCappedCone_15860 = float3(0.0, 0.0, 0.0));
(_b_sdCappedCone_15861 = float3(0.0, 0.0, -0.1));
(_ra_sdCappedCone_15862 = 0.25);
(_rb_sdCappedCone_15863 = 0.34999999);
(_sdCappedCone_has_returned_15864 = false);
(_rba_sdCappedCone_15866 = (_rb_sdCappedCone_15863 - _ra_sdCappedCone_15862));
(_baba_sdCappedCone_15867 = dot((_b_sdCappedCone_15861 - _a_sdCappedCone_15860), (_b_sdCappedCone_15861 - _a_sdCappedCone_15860)));
(_papa_sdCappedCone_15868 = dot((_p_sdCappedCone_15859 - _a_sdCappedCone_15860), (_p_sdCappedCone_15859 - _a_sdCappedCone_15860)));
(_paba_sdCappedCone_15869 = (dot((_p_sdCappedCone_15859 - _a_sdCappedCone_15860), (_b_sdCappedCone_15861 - _a_sdCappedCone_15860)) / _baba_sdCappedCone_15867));
(_x_sdCappedCone_15870 = sqrt((_papa_sdCappedCone_15868 - ((_paba_sdCappedCone_15869 * _paba_sdCappedCone_15869) * _baba_sdCappedCone_15867))));
float s1782 = {0};
if ((_paba_sdCappedCone_15869 < 0.5))
{
(s1782 = _ra_sdCappedCone_15862);
}
else
{
(s1782 = _rb_sdCappedCone_15863);
}
(_cax_sdCappedCone_15871 = max(0.0, (_x_sdCappedCone_15870 - s1782)));
(_cay_sdCappedCone_15872 = (abs((_paba_sdCappedCone_15869 - 0.5)) - 0.5));
(_f_sdCappedCone_15873 = clamp((((_rba_sdCappedCone_15866 * (_x_sdCappedCone_15870 - _ra_sdCappedCone_15862)) + (_paba_sdCappedCone_15869 * _baba_sdCappedCone_15867)) / ((_rba_sdCappedCone_15866 * _rba_sdCappedCone_15866) + _baba_sdCappedCone_15867)), 0.0, 1.0));
(_cbx_sdCappedCone_15874 = ((_x_sdCappedCone_15870 - _ra_sdCappedCone_15862) - (_f_sdCappedCone_15873 * _rba_sdCappedCone_15866)));
(_cby_sdCappedCone_15875 = (_paba_sdCappedCone_15869 - _f_sdCappedCone_15873));
float s1783 = {0};
if (((_cbx_sdCappedCone_15874 < 0.0) && (_cay_sdCappedCone_15872 < 0.0)))
{
(s1783 = -1.0);
}
else
{
(s1783 = 1.0);
}
(_sdCappedCone_return_value_15865 = (s1783 * sqrt(min(((_cax_sdCappedCone_15871 * _cax_sdCappedCone_15871) + ((_cay_sdCappedCone_15872 * _cay_sdCappedCone_15872) * _baba_sdCappedCone_15867)), ((_cbx_sdCappedCone_15874 * _cbx_sdCappedCone_15874) + ((_cby_sdCappedCone_15875 * _cby_sdCappedCone_15875) * _baba_sdCappedCone_15867))))));
(_sdCappedCone_has_returned_15864 = true);
(_sdCappedCone_return_value_inlined_12_15876 = _sdCappedCone_return_value_15865);
(_r_gunPod_15857._d = _sdCappedCone_return_value_inlined_12_15876);
(_p_sdCappedCylinder_15787 = _p_gunPod_15854);
(_h_sdCappedCylinder_15788 = 0.34999999);
(_r_sdCappedCylinder_15789 = 0.40000001);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_13_15877 = _sdCappedCylinder_return_value_15791);
(_r_gunPod_15857._d = min(_r_gunPod_15857._d, _sdCappedCylinder_return_value_inlined_13_15877));
(_pp_gunPod_15858 = vec3_ctor(_p_gunPod_15854.x, (0.28 - _p_gunPod_15854.y), _p_gunPod_15854.z));
(_p_sdTriPrism_15878 = _pp_gunPod_15858);
(_h_sdTriPrism_15879 = float2(0.1, 0.5));
(_sdTriPrism_has_returned_15880 = false);
(_q_sdTriPrism_15882 = abs(_p_sdTriPrism_15878));
(_sdTriPrism_return_value_15881 = max((_q_sdTriPrism_15882.z - _h_sdTriPrism_15879.y), (max(((_q_sdTriPrism_15882.x * 0.86602497) + (_p_sdTriPrism_15878.y * 0.5)), (-_p_sdTriPrism_15878.y)) - (_h_sdTriPrism_15879.x * 0.5))));
(_sdTriPrism_has_returned_15880 = true);
(_sdTriPrism_return_value_inlined_14_15883 = _sdTriPrism_return_value_15881);
(_r_gunPod_15857._d = min(_r_gunPod_15857._d, _sdTriPrism_return_value_inlined_14_15883));
(_pp_gunPod_15858 = _p_gunPod_15854);
(_pp_gunPod_15858.x = abs(_p_gunPod_15854.x));
(_a_rot_15714 = 0.78525001);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_15_15884 = _rot_return_value_15716);
(_pp_gunPod_15858.xy = mul(_pp_gunPod_15858.xy, transpose(_rot_return_value_inlined_15_15884)));
(_bump_gunPod_15886 = (sign(sin((_pp_gunPod_15858.z * 33.299999))) * 0.003));
(_p_sdBox_15696 = _pp_gunPod_15858);
(_b_sdBox_15697 = vec3_ctor((0.1 - _bump_gunPod_15886), (0.38 - _bump_gunPod_15886), 0.34));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_16_15887 = _sdBox_return_value_15699);
(_d_gunPod_15888 = (_sdBox_return_value_inlined_16_15887 - 0.02));
(_pp_gunPod_15858 = (_p_gunPod_15854 - float3(0.0, 0.0, -0.60000002)));
(_pp_gunPod_15858.x = (abs(_pp_gunPod_15858.x) - 0.1));
(_p_sdCappedCylinder_15787 = _pp_gunPod_15858);
(_h_sdCappedCylinder_15788 = 0.059999999);
(_r_sdCappedCylinder_15789 = 0.15000001);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_17_15889 = _sdCappedCylinder_return_value_15791);
(_p_sdCappedCylinder_15787 = (_pp_gunPod_15858 + float3(0.0, 0.12, -0.050000001)));
(_h_sdCappedCylinder_15788 = 0.059999999);
(_r_sdCappedCylinder_15789 = 0.050000001);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_18_15890 = _sdCappedCylinder_return_value_15791);
(_p_sdBox_15696 = (_p_gunPod_15854 + float3(0.0, 0.0, 0.54000002)));
(_b_sdBox_15697 = float3(0.1, 0.059999999, 0.039999999));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_19_15891 = _sdBox_return_value_15699);
(_d_gunPod_15888 = min(min(min(_d_gunPod_15888, _sdCappedCylinder_return_value_inlined_17_15889), _sdCappedCylinder_return_value_inlined_18_15890), _sdBox_return_value_inlined_19_15891));
if ((_d_gunPod_15888 < _r_gunPod_15857._d))
{
(_p_sdCappedCylinder_15787 = (_pp_gunPod_15858 + float3(0.0, 0.0, 0.1)));
(_h_sdCappedCylinder_15788 = 0.029999999);
(_r_sdCappedCylinder_15789 = 0.2);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_20_15892 = _sdCappedCylinder_return_value_15791);
(_d_gunPod_15888 = max(_d_gunPod_15888, (-_sdCappedCylinder_return_value_inlined_20_15892)));
(_r_gunPod_15857._d = _d_gunPod_15888);
(_r_gunPod_15857._mat = float3(0.02, 0.02, 0.02));
}
(_fireShock_has_returned_15662 = false);
(_fireShock_return_value_15663 = abs(sin((_edShoot_1 * 78.537498))));
(_fireShock_has_returned_15662 = true);
(_fireShock_return_value_inlined_21_15893 = _fireShock_return_value_15663);
(_fs_gunPod_15885 = _fireShock_return_value_inlined_21_15893);
if ((_fs_gunPod_15885 > 0.5))
{
(_p_sdCappedCylinder_15787 = _pp_gunPod_15858);
(_h_sdCappedCylinder_15788 = (0.0099999998 + (_pp_gunPod_15858.z * 0.050000001)));
(_r_sdCappedCylinder_15789 = ((frac((_fs_gunPod_15885 * 3322.4231)) * 0.5) + 0.89999998));
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_22_15894 = _sdCappedCylinder_return_value_15791);
(_d_gunPod_15888 = _sdCappedCylinder_return_value_inlined_22_15894);
if ((_d_gunPod_15888 < _r_gunPod_15857._d))
{
(_r_gunPod_15857._d = _d_gunPod_15888);
(_r_gunPod_15857._mat = float3(1.0, 1.0, 1.0));
(_glow_1 += (0.1 / (0.0099999998 + ((_d_gunPod_15888 * _d_gunPod_15888) * 400.0))));
}
}
(_gunPod_return_value_15856 = _r_gunPod_15857);
(_gunPod_has_returned_15855 = true);
(_gunPod_return_value_inlined_26_15895 = _gunPod_return_value_15856);
(_a_minResult_15803 = _r_arms_15842);
(_b_minResult_15804 = _gunPod_return_value_inlined_26_15895);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_27_15896 = _minResult_return_value_15806);
(_arms_return_value_15840 = _minResult_return_value_inlined_27_15896);
(_arms_has_returned_15839 = true);
(_arms_return_value_inlined_67_15897 = _arms_return_value_15840);
(_a_minResult_15803 = _minResult_return_value_inlined_66_15837);
(_b_minResult_15804 = _arms_return_value_inlined_67_15897);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_68_15898 = _minResult_return_value_15806);
(_ed209_return_value_15726 = _minResult_return_value_inlined_68_15898);
(_ed209_has_returned_15725 = true);
(_ed209_return_value_inlined_79_15899 = _ed209_return_value_15726);
(_a_minResult_15803 = _room_return_value_inlined_78_15723);
(_b_minResult_15804 = _ed209_return_value_inlined_79_15899);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_80_15900 = _minResult_return_value_15806);
(_r_map_15901 = _minResult_return_value_inlined_80_15900);
(_gnd_map_15902 = length((_p_map_15683.y + 3.0)));
if ((_gnd_map_15902 < _r_map_15901._d))
{
(_r_map_15901._d = _gnd_map_15902);
(_r_map_15901._mat = float3(0.1, 0.1, 0.1));
}
(_map_return_value_15685 = _r_map_15901);
(_map_has_returned_15684 = true);
(_map_return_value_inlined_90_15903 = _map_return_value_15685);
(_h_getSceneColor_15681 = _map_return_value_inlined_90_15903);
if ((abs(_h_getSceneColor_15681._d) < (0.0015 * _d_getSceneColor_15680)))
{
break;
}
if ((_d_getSceneColor_15680 > 64.0))
{
(_getSceneColor_return_value_15677 = float3(0.0, 0.0, 0.0));
(_getSceneColor_has_returned_15676 = true);
}
if ((!_getSceneColor_has_returned_15676))
{
(_d_getSceneColor_15680 += _h_getSceneColor_15681._d);
}
}
}
if ((!_getSceneColor_has_returned_15676))
{
(_g_getSceneColor_15679 = _glow_1);
(_p_applyLighting_15904 = _p_getSceneColor_15678);
(_rd_applyLighting_15905 = _rd_getSceneColor_15675);
(_d_applyLighting_15906 = _d_getSceneColor_15680);
(_data_applyLighting_15907 = _h_getSceneColor_15681);
(_applyLighting_has_returned_15908 = false);
(_sunDir_applyLighting_15910 = normalize((float3(10.0, 10.0, -10.0) - _p_applyLighting_15904)));
(_p_calcNormal_15911 = _p_applyLighting_15904);
(_t_calcNormal_15912 = _d_applyLighting_15906);
(_calcNormal_has_returned_15913 = false);
(_d_calcNormal_15915 = ((0.0099999998 * _t_calcNormal_15912) * 0.33000001));
(_e_calcNormal_15916 = (float2(0.57730001, -0.57730001) * _d_calcNormal_15915));
(_p_map_15683 = (_p_calcNormal_15911 + _e_calcNormal_15916.xyy));
(_map_has_returned_15684 = false);
(_p_room_15686 = _p_map_15683);
(_room_has_returned_15687 = false);
(_r_room_15690._mat = float3(0.40000001, 0.40000001, 0.40000001));
(_r_room_15690._specPower = 10000000.0);
(_xy_room_15691 = (_p_room_15686.xy - float2(0.0, 2.0)));
(_p_room_15686.x = abs(_p_room_15686.x));
(_p_room_15686.yz += float2(0.5, -3.4000001));
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = float3(2.8, 2.5999999, 1.1));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_69_15701 = _sdBox_return_value_15699);
(_doorHole_room_15702 = _sdBox_return_value_inlined_69_15701);
(_backWall_room_15703 = length((_p_room_15686.z - 8.0)));
(_r_room_15690._d = min(_backWall_room_15703, max(length(_p_room_15686.z), ((-_doorHole_room_15702) + 0.1))));
if ((_r_room_15690._d == _backWall_room_15703))
{
(_p_sdOctogon_15704 = _xy_room_15691);
(_r_sdOctogon_15705 = 2.5999999);
(_sdOctogon_has_returned_15706 = false);
(_p_sdOctogon_15704 = abs(_p_sdOctogon_15704));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(-0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(-0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= vec2_ctor(clamp(_p_sdOctogon_15704.x, (-0.41421357 * _r_sdOctogon_15705), (0.41421357 * _r_sdOctogon_15705)), _r_sdOctogon_15705));
(_sdOctogon_return_value_15707 = (length(_p_sdOctogon_15704) * sign(_p_sdOctogon_15704.y)));
(_sdOctogon_has_returned_15706 = true);
(_sdOctogon_return_value_inlined_70_15709 = _sdOctogon_return_value_15707);
(_p_sdOctogon_15704 = _xy_room_15691);
(_r_sdOctogon_15705 = 1.9);
(_sdOctogon_has_returned_15706 = false);
(_p_sdOctogon_15704 = abs(_p_sdOctogon_15704));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(-0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(-0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= vec2_ctor(clamp(_p_sdOctogon_15704.x, (-0.41421357 * _r_sdOctogon_15705), (0.41421357 * _r_sdOctogon_15705)), _r_sdOctogon_15705));
(_sdOctogon_return_value_15707 = (length(_p_sdOctogon_15704) * sign(_p_sdOctogon_15704.y)));
(_sdOctogon_has_returned_15706 = true);
(_sdOctogon_return_value_inlined_71_15710 = _sdOctogon_return_value_15707);
(_ocp_room_15711 = min(abs(_sdOctogon_return_value_inlined_70_15709), abs(_sdOctogon_return_value_inlined_71_15710)));
(_p_sdOctogon_15704 = _xy_room_15691);
(_r_sdOctogon_15705 = 1.2);
(_sdOctogon_has_returned_15706 = false);
(_p_sdOctogon_15704 = abs(_p_sdOctogon_15704));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(-0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(-0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= vec2_ctor(clamp(_p_sdOctogon_15704.x, (-0.41421357 * _r_sdOctogon_15705), (0.41421357 * _r_sdOctogon_15705)), _r_sdOctogon_15705));
(_sdOctogon_return_value_15707 = (length(_p_sdOctogon_15704) * sign(_p_sdOctogon_15704.y)));
(_sdOctogon_has_returned_15706 = true);
(_sdOctogon_return_value_inlined_72_15712 = _sdOctogon_return_value_15707);
(_ocp_room_15711 = min(max(_ocp_room_15711, min((0.69999999 - abs((_xy_room_15691.x + 1.2))), (-_xy_room_15691.y))), max(abs(_sdOctogon_return_value_inlined_72_15712), min(_xy_room_15691.x, (0.69999999 - abs(_xy_room_15691.y))))));
if ((_ocp_room_15711 < 0.30000001))
{
(_r_room_15690._mat = float3(0.38999999, 0.56999999, 0.70999998));
}
}
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = float3(3.2, 3.0, 0.2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_73_15713 = _sdBox_return_value_15699);
(_doorFrame_room_15692 = max(_sdBox_return_value_inlined_73_15713, (-_doorHole_room_15702)));
(_doorWidth_room_15693 = 1.4);
(_p_room_15686.x -= 2.8);
(_a_rot_15714 = (_doorOpen_1 * 2.0999999));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_74_15719 = _rot_return_value_15716);
(_p_room_15686.xz = mul(_p_room_15686.xz, transpose(_rot_return_value_inlined_74_15719)));
(_p_room_15686.x += _doorWidth_room_15693);
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = vec3_ctor(_doorWidth_room_15693, float2(2.5999999, 0.1)));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_75_15720 = _sdBox_return_value_15699);
(_door_room_15694 = _sdBox_return_value_inlined_75_15720);
(_p_room_15686 = (abs(_p_room_15686) - vec3_ctor((_doorWidth_room_15693 * 0.5), 1.1, 0.14)));
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = float3(0.44999999, 0.89999998, 0.1));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_76_15721 = _sdBox_return_value_15699);
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = float3(0.34999999, 0.80000001, 1.0));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_77_15722 = _sdBox_return_value_15699);
(_d_room_15695 = min(_doorFrame_room_15692, max(_door_room_15694, (-max(_sdBox_return_value_inlined_76_15721, (-_sdBox_return_value_inlined_77_15722))))));
if ((_d_room_15695 < _r_room_15690._d))
{
(_r_room_15690._d = _d_room_15695);
(_r_room_15690._mat = float3(0.02, 0.02, 0.024));
(_r_room_15690._specPower = 10.0);
}
(_room_return_value_15688 = _r_room_15690);
(_room_has_returned_15687 = true);
(_room_return_value_inlined_78_15723 = _room_return_value_15688);
(_p_ed209_15724 = _p_map_15683);
(_ed209_has_returned_15725 = false);
(_f_legWalkAngle_15727 = 2.0);
(_legWalkAngle_has_returned_15728 = false);
(_legWalkAngle_return_value_15729 = (sin((((_edWalk_1 * 3.141) * 6.0) * _f_legWalkAngle_15727)) * 0.2));
(_legWalkAngle_has_returned_15728 = true);
(_legWalkAngle_return_value_inlined_54_15730 = _legWalkAngle_return_value_15729);
(_edZ_has_returned_15633 = false);
(_edZ_return_value_15634 = lerp(5.0, -2.0, _edWalk_1));
(_edZ_has_returned_15633 = true);
(_edZ_return_value_inlined_55_15731 = _edZ_return_value_15634);
(_p_ed209_15724.yz += vec2_ctor(((_legWalkAngle_return_value_inlined_54_15730 * 0.2) + 0.1), (-_edZ_return_value_inlined_55_15731)));
(_p_legs_15732 = _p_ed209_15724);
(_legs_has_returned_15733 = false);
(_mat_setBodyMaterial_15736 = _r_legs_15735);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_legs_15735 = _mat_setBodyMaterial_15736);
(_f_legWalkAngle_15727 = 1.0);
(_legWalkAngle_has_returned_15728 = false);
(_legWalkAngle_return_value_15729 = (sin((((_edWalk_1 * 3.141) * 6.0) * _f_legWalkAngle_15727)) * 0.2));
(_legWalkAngle_has_returned_15728 = true);
(_legWalkAngle_return_value_inlined_45_15738 = _legWalkAngle_return_value_15729);
(_legAngle_legs_15739 = _legWalkAngle_return_value_inlined_45_15738);
(_p_legs_15732.z += 0.27000001);
(_a_rot_15714 = (_legAngle_legs_15739 * sign(_p_legs_15732.x)));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_46_15740 = _rot_return_value_15716);
(_p_legs_15732.yz = mul(_p_legs_15732.yz, transpose(_rot_return_value_inlined_46_15740)));
(_p_legs_15732.z -= 0.27000001);
(_p_legs_15732.y += 0.64999998);
(_a_rot_15714 = -0.2);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_47_15741 = _rot_return_value_15716);
(_p_legs_15732.yz = mul(_p_legs_15732.yz, transpose(_rot_return_value_inlined_47_15741)));
(_a_rot_15714 = (_legAngle_legs_15739 * 0.30000001));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_48_15742 = _rot_return_value_15716);
(_p_legs_15732.xy = mul(_p_legs_15732.xy, transpose(_rot_return_value_inlined_48_15742)));
(_pp_legs_15744 = _p_legs_15732);
(_pp_legs_15744.x = abs(_pp_legs_15744.x));
(_pp_legs_15744.y += 0.47999999);
(_a_rot_15714 = -0.58525002);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_49_15745 = _rot_return_value_15716);
(_pp_legs_15744.yz = mul(_pp_legs_15744.yz, transpose(_rot_return_value_inlined_49_15745)));
(_pp_legs_15744.x -= 0.98000002);
(_cp_legs_15743 = _pp_legs_15744);
(_p_legs_15732 = _pp_legs_15744);
(_pp_legs_15744.xz = (abs(_pp_legs_15744.xz) - float2(0.12, 0.25)));
(_p_legs_15732.y += 0.68000001);
(_p_legs_15732.xy = (abs(_p_legs_15732.xy) - 0.12));
(_p_sdBox_15696 = _p_legs_15732);
(_b_sdBox_15697 = float3(0.07, 0.050000001, 1.2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_50_15746 = _sdBox_return_value_15699);
(_silver_legs_15737 = _sdBox_return_value_inlined_50_15746);
(_cp_legs_15743 -= float3(0.0, -0.69999999, 0.0));
(_p_sdBox_15696 = (_cp_legs_15743 - float3(0.0, 0.0, 1.15)));
(_b_sdBox_15697 = float3(0.17, 0.17, 0.07));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_51_15747 = _sdBox_return_value_15699);
(_r_legs_15735._d = (_sdBox_return_value_inlined_51_15747 - 0.039999999));
(_cp_legs_15743.z++);
(_p_sdChamferedCube_15748 = _cp_legs_15743.xzy);
(_r_sdChamferedCube_15749 = vec2_ctor((0.28 - (sign((abs(_cp_legs_15743.z) - 0.30000001)) * 0.0099999998)), 0.5).xyx);
(_c_sdChamferedCube_15750 = 0.18000001);
(_sdChamferedCube_has_returned_15751 = false);
(_p_sdBox_15696 = _p_sdChamferedCube_15748);
(_b_sdBox_15697 = _r_sdChamferedCube_15749);
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_0_15753 = _sdBox_return_value_15699);
(_cube_sdChamferedCube_15754 = _sdBox_return_value_inlined_0_15753);
(_a_rot_15714 = 0.78525001);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_1_15755 = _rot_return_value_15716);
(_p_sdChamferedCube_15748.xz = mul(_p_sdChamferedCube_15748.xz, transpose(_rot_return_value_inlined_1_15755)));
(_r_sdChamferedCube_15749.xz *= (((-_c_sdChamferedCube_15750) / 1.41) + 1.41));
(_p_sdBox_15696 = _p_sdChamferedCube_15748);
(_b_sdBox_15697 = _r_sdChamferedCube_15749);
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_2_15756 = _sdBox_return_value_15699);
(_sdChamferedCube_return_value_15752 = max(_cube_sdChamferedCube_15754, _sdBox_return_value_inlined_2_15756));
(_sdChamferedCube_has_returned_15751 = true);
(_sdChamferedCube_return_value_inlined_52_15757 = _sdChamferedCube_return_value_15752);
(_r_legs_15735._d = min(_r_legs_15735._d, _sdChamferedCube_return_value_inlined_52_15757));
(_p_foot_15758 = _cp_legs_15743);
(_foot_has_returned_15759 = false);
(_p_foot_15758.z += 0.80000001);
(_a_rot_15714 = 0.86000001);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_29_15761 = _rot_return_value_15716);
(_p_foot_15758.yz = mul(_p_foot_15758.yz, transpose(_rot_return_value_inlined_29_15761)));
(_p_toe_15762 = _p_foot_15758);
(_toe_has_returned_15763 = false);
(_p_toe_15762.yz += float2(0.1, 0.31999999));
(_p_sdBox_15696 = _p_toe_15762);
(_b_sdBox_15697 = vec3_ctor(((0.30000001 + (0.2 * (_p_toe_15762.z - 0.18000001))) - (_p_toe_15762.y * 0.228)), (0.30000001 + (0.2 * cos(((_p_toe_15762.z - 0.18000001) * 3.6900001)))), 0.34999999));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_28_15765 = _sdBox_return_value_15699);
(_toe_return_value_15764 = max(_sdBox_return_value_inlined_28_15765, (0.1 - _p_toe_15762.y)));
(_toe_has_returned_15763 = true);
(_toe_return_value_inlined_30_15766 = _toe_return_value_15764);
(_d_foot_15767 = _toe_return_value_inlined_30_15766);
(_a_rot_15714 = 1.5700001);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_31_15768 = _rot_return_value_15716);
(_p_foot_15758.xz = mul(_p_foot_15758.xz, transpose(_rot_return_value_inlined_31_15768)));
(_p_foot_15758.x -= 0.43000001);
(_p_foot_15758.z = (0.25 - abs(_p_foot_15758.z)));
(_p_toe_15762 = _p_foot_15758);
(_toe_has_returned_15763 = false);
(_p_toe_15762.yz += float2(0.1, 0.31999999));
(_p_sdBox_15696 = _p_toe_15762);
(_b_sdBox_15697 = vec3_ctor(((0.30000001 + (0.2 * (_p_toe_15762.z - 0.18000001))) - (_p_toe_15762.y * 0.228)), (0.30000001 + (0.2 * cos(((_p_toe_15762.z - 0.18000001) * 3.6900001)))), 0.34999999));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_28_15765 = _sdBox_return_value_15699);
(_toe_return_value_15764 = max(_sdBox_return_value_inlined_28_15765, (0.1 - _p_toe_15762.y)));
(_toe_has_returned_15763 = true);
(_toe_return_value_inlined_32_15769 = _toe_return_value_15764);
(_foot_return_value_15760 = min(_d_foot_15767, _toe_return_value_inlined_32_15769));
(_foot_has_returned_15759 = true);
(_foot_return_value_inlined_53_15770 = _foot_return_value_15760);
(_r_legs_15735._d = min(_r_legs_15735._d, _foot_return_value_inlined_53_15770));
if ((_silver_legs_15737 < _r_legs_15735._d))
{
(_r_legs_15735._d = _silver_legs_15737);
(_r_legs_15735._mat = float3(0.80000001, 0.80000001, 0.80000001));
}
(_legs_return_value_15734 = _r_legs_15735);
(_legs_has_returned_15733 = true);
(_legs_return_value_inlined_56_15771 = _legs_return_value_15734);
(_r_ed209_15772 = _legs_return_value_inlined_56_15771);
(_f_ed209_15773 = min((_stretch_1 * 2.0), 1.0));
float s1784 = {0};
if ((_f_ed209_15773 < 0.5))
{
(s1784 = smoothstep(0.0, 0.5, _f_ed209_15773));
}
else
{
(s1784 = (1.0 - (smoothstep(0.5, 1.0, _f_ed209_15773) * 0.2)));
}
(_slide_ed209_15774 = s1784);
(_p_ed209_15724.yz -= (_slide_ed209_15774 * 0.5));
(_gunsUp_1 = smoothstep(0.0, 1.0, clamp(((_stretch_1 - 0.66000003) * 6.0), 0.0, 1.0)));
(_fireShock_has_returned_15662 = false);
(_fireShock_return_value_15663 = abs(sin((_edShoot_1 * 78.537498))));
(_fireShock_has_returned_15662 = true);
(_fireShock_return_value_inlined_57_15775 = _fireShock_return_value_15663);
(_gunsForward_1 = (smoothstep(0.0, 1.0, clamp(((_stretch_1 - 0.82999998) * 6.0), 0.0, 1.0)) + (_fireShock_return_value_inlined_57_15775 * 0.5)));
(_p_waist_15776 = _p_ed209_15724);
(_waist_has_returned_15777 = false);
(_mat_setBodyMaterial_15736 = _r_waist_15779);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_waist_15779 = _mat_setBodyMaterial_15736);
(_p_waist_15776.y += 0.64999998);
(_a_rot_15714 = -0.2);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_33_15780 = _rot_return_value_15716);
(_p_waist_15776.yz = mul(_p_waist_15776.yz, transpose(_rot_return_value_inlined_33_15780)));
(_f_legWalkAngle_15727 = 1.0);
(_legWalkAngle_has_returned_15728 = false);
(_legWalkAngle_return_value_15729 = (sin((((_edWalk_1 * 3.141) * 6.0) * _f_legWalkAngle_15727)) * 0.2));
(_legWalkAngle_has_returned_15728 = true);
(_legWalkAngle_return_value_inlined_34_15783 = _legWalkAngle_return_value_15729);
(_legAngle_waist_15784 = _legWalkAngle_return_value_inlined_34_15783);
(_a_rot_15714 = (_legAngle_waist_15784 * 0.30000001));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_35_15785 = _rot_return_value_15716);
(_p_waist_15776.xy = mul(_p_waist_15776.xy, transpose(_rot_return_value_inlined_35_15785)));
(_pp_waist_15786 = _p_waist_15776);
(_pp_waist_15786.y += 0.30000001);
(_p_sdCappedCylinder_15787 = _pp_waist_15786.zyx);
(_h_sdCappedCylinder_15788 = 0.5);
(_r_sdCappedCylinder_15789 = 0.5);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_36_15793 = _sdCappedCylinder_return_value_15791);
(_r_waist_15779._d = max(_sdCappedCylinder_return_value_inlined_36_15793, (_p_waist_15776.y + 0.15000001)));
(_bump_waist_15781 = (0.5 - (abs(sin((_p_waist_15776.y * 40.0))) * 0.029999999)));
(_p_sdBox_15696 = _p_waist_15776);
(_b_sdBox_15697 = vec3_ctor(_bump_waist_15781, 0.15000001, _bump_waist_15781));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_37_15794 = _sdBox_return_value_15699);
(_d_waist_15782 = _sdBox_return_value_inlined_37_15794);
(_bump_waist_15781 = (0.30000001 - (abs(sin((_p_waist_15776.x * 40.0))) * 0.029999999)));
(_pp_waist_15786.y += 0.18000001);
(_p_sdCappedCylinder_15787 = _pp_waist_15786.zyx);
(_h_sdCappedCylinder_15788 = _bump_waist_15781);
(_r_sdCappedCylinder_15789 = 0.75);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_38_15795 = _sdCappedCylinder_return_value_15791);
(_d_waist_15782 = min(_d_waist_15782, _sdCappedCylinder_return_value_inlined_38_15795));
(_pp_waist_15786.x = abs(_pp_waist_15786.x));
(_a_rot_15714 = (-0.58525002 + (_legAngle_waist_15784 * sign(_p_waist_15776.x))));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_39_15796 = _rot_return_value_15716);
(_pp_waist_15786.yz = mul(_pp_waist_15786.yz, transpose(_rot_return_value_inlined_39_15796)));
(_pp_waist_15786.x -= 0.98000002);
(_p_sdCappedCylinder_15787 = _pp_waist_15786.zyx);
(_h_sdCappedCylinder_15788 = 0.40000001);
(_r_sdCappedCylinder_15789 = 0.23999999);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_40_15797 = _sdCappedCylinder_return_value_15791);
(_r_waist_15779._d = min(_r_waist_15779._d, max(_sdCappedCylinder_return_value_inlined_40_15797, (-_pp_waist_15786.y))));
(_p_sdBox_15696 = _pp_waist_15786);
(_b_sdBox_15697 = vec3_ctor(0.23999999, 0.2, (0.14 + (0.2 * _pp_waist_15786.y))));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_41_15798 = _sdBox_return_value_15699);
(_r_waist_15779._d = min(_r_waist_15779._d, _sdBox_return_value_inlined_41_15798));
(_p_waist_15776 = _pp_waist_15786);
(_pp_waist_15786.xz = (abs(_pp_waist_15786.xz) - float2(0.12, 0.25)));
(_p_sdCappedCylinder_15787 = _pp_waist_15786.xzy);
(_h_sdCappedCylinder_15788 = 0.1);
(_r_sdCappedCylinder_15789 = 0.32499999);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_42_15799 = _sdCappedCylinder_return_value_15791);
(_p_sdCappedCylinder_15787 = _pp_waist_15786.xzy);
(_h_sdCappedCylinder_15788 = 0.050000001);
(_r_sdCappedCylinder_15789 = 0.5);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_43_15800 = _sdCappedCylinder_return_value_15791);
(_r_waist_15779._d = min(_r_waist_15779._d, max(min(_sdCappedCylinder_return_value_inlined_42_15799, _sdCappedCylinder_return_value_inlined_43_15800), _pp_waist_15786.y)));
(_p_waist_15776.y += 0.68000001);
(_p_sdBox_15696 = _p_waist_15776);
(_b_sdBox_15697 = vec3_ctor(((sign((abs(_p_waist_15776.y) - 0.039999999)) * 0.0049999999) + 0.25999999), 0.2, 0.34));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_44_15801 = _sdBox_return_value_15699);
(_r_waist_15779._d = min(_r_waist_15779._d, _sdBox_return_value_inlined_44_15801));
if ((_d_waist_15782 < _r_waist_15779._d))
{
(_r_waist_15779._d = _d_waist_15782);
(_r_waist_15779._mat = float3(0.02, 0.02, 0.02));
}
(_waist_return_value_15778 = _r_waist_15779);
(_waist_has_returned_15777 = true);
(_waist_return_value_inlined_58_15802 = _waist_return_value_15778);
(_a_minResult_15803 = _r_ed209_15772);
(_b_minResult_15804 = _waist_return_value_inlined_58_15802);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_59_15807 = _minResult_return_value_15806);
(_r_ed209_15772 = _minResult_return_value_inlined_59_15807);
(_f_legWalkAngle_15727 = 2.0);
(_legWalkAngle_has_returned_15728 = false);
(_legWalkAngle_return_value_15729 = (sin((((_edWalk_1 * 3.141) * 6.0) * _f_legWalkAngle_15727)) * 0.2));
(_legWalkAngle_has_returned_15728 = true);
(_legWalkAngle_return_value_inlined_60_15808 = _legWalkAngle_return_value_15729);
(_a_rot_15714 = (0.1 * ((((-_edDown_1) + _legWalkAngle_return_value_inlined_60_15808) + smoothstep(0.0, 1.0, clamp(((_stretch_1 - 0.5) * 6.0), 0.0, 1.0))) - 1.0)));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_61_15809 = _rot_return_value_15716);
(_p_ed209_15724.yz = mul(_p_ed209_15724.yz, transpose(_rot_return_value_inlined_61_15809)));
(_a_rot_15714 = (_edTwist_1 * 0.2));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_62_15810 = _rot_return_value_15716);
(_p_ed209_15724.xz = mul(_p_ed209_15724.xz, transpose(_rot_return_value_inlined_62_15810)));
(_p_headLower_15811 = _p_ed209_15724);
(_headLower_has_returned_15812 = false);
(_op_headLower_15814 = _p_headLower_15811);
(_p_headVisor_15815 = (_p_headLower_15811 * float3(0.94999999, -1.4, 0.94999999)));
(_h_headVisor_15816 = 1.0);
(_bump_headVisor_15817 = 0.0);
(_headVisor_has_returned_15818 = false);
(_bump_headVisor_15817 *= ((sin((_p_headVisor_15815.x * 150.0)) * sin((_p_headVisor_15815.y * 150.0))) * 0.0020000001));
(_p_sdBox_15696 = _p_headVisor_15815);
(_b_sdBox_15697 = vec3_ctor_int_int(1, _h_headVisor_15816, 2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_3_15821 = _sdBox_return_value_15699);
(_result_headVisor_15820._d = _sdBox_return_value_inlined_3_15821);
(_p_headSphere_15822 = _p_headVisor_15815);
(_headSphere_has_returned_15823 = false);
(_headSphere_return_value_15824 = ((length((_p_headSphere_15822 / float3(1.0, 0.80000001, 1.0))) - 1.0) * 0.80000001));
(_headSphere_has_returned_15823 = true);
(_headSphere_return_value_inlined_4_15825 = _headSphere_return_value_15824);
(_result_headVisor_15820._d = (max(lerp(_result_headVisor_15820._d, _headSphere_return_value_inlined_4_15825, 0.56999999), (-_p_headVisor_15815.y)) - _bump_headVisor_15817));
(_result_headVisor_15820._mat = float3(0.050000001, 0.050000001, 0.050000001));
(_result_headVisor_15820._specPower = 30.0);
(_headVisor_return_value_15819 = _result_headVisor_15820);
(_headVisor_has_returned_15818 = true);
(_headVisor_return_value_inlined_5_15826 = _headVisor_return_value_15819);
(_r_headLower_15827 = _headVisor_return_value_inlined_5_15826);
(_p_headVisor_15815 = ((_p_headLower_15811 + float3(0.0, 0.0099999998, 0.0)) * float3(0.94999999, 0.94999999, 0.94999999)));
(_h_headVisor_15816 = 1.0);
(_bump_headVisor_15817 = 0.0);
(_headVisor_has_returned_15818 = false);
(_bump_headVisor_15817 *= ((sin((_p_headVisor_15815.x * 150.0)) * sin((_p_headVisor_15815.y * 150.0))) * 0.0020000001));
(_p_sdBox_15696 = _p_headVisor_15815);
(_b_sdBox_15697 = vec3_ctor_int_int(1, _h_headVisor_15816, 2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_3_15821 = _sdBox_return_value_15699);
(_result_headVisor_15820._d = _sdBox_return_value_inlined_3_15821);
(_p_headSphere_15822 = _p_headVisor_15815);
(_headSphere_has_returned_15823 = false);
(_headSphere_return_value_15824 = ((length((_p_headSphere_15822 / float3(1.0, 0.80000001, 1.0))) - 1.0) * 0.80000001));
(_headSphere_has_returned_15823 = true);
(_headSphere_return_value_inlined_4_15825 = _headSphere_return_value_15824);
(_result_headVisor_15820._d = (max(lerp(_result_headVisor_15820._d, _headSphere_return_value_inlined_4_15825, 0.56999999), (-_p_headVisor_15815.y)) - _bump_headVisor_15817));
(_result_headVisor_15820._mat = float3(0.050000001, 0.050000001, 0.050000001));
(_result_headVisor_15820._specPower = 30.0);
(_headVisor_return_value_15819 = _result_headVisor_15820);
(_headVisor_has_returned_15818 = true);
(_headVisor_return_value_inlined_6_15828 = _headVisor_return_value_15819);
(_r_headLower_15827._d = min(_r_headLower_15827._d, max(max(_headVisor_return_value_inlined_6_15828._d, (_p_headLower_15811.y - 0.34999999)), (((_p_headLower_15811.y * 0.625) - _p_headLower_15811.z) - 0.66000003))));
(_a_rot_15714 = ((0.075000003 * (_gunsUp_1 - 1.0)) * sign(_p_headLower_15811.x)));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_7_15829 = _rot_return_value_15716);
(_p_headLower_15811.xy = mul(_p_headLower_15811.xy, transpose(_rot_return_value_inlined_7_15829)));
(_p_headLower_15811.x = (abs(_p_headLower_15811.x) - 1.33));
(_p_headLower_15811.y -= (0.1 - (_p_headLower_15811.x * 0.1)));
(_p_sdBox_15696 = _p_headLower_15811);
(_b_sdBox_15697 = vec3_ctor(0.40000001, (0.059999999 * (1.0 - _p_headLower_15811.x)), (0.30000001 - (_p_headLower_15811.x * 0.2))));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_8_15830 = _sdBox_return_value_15699);
(_r_headLower_15827._d = min(_r_headLower_15827._d, _sdBox_return_value_inlined_8_15830));
(_p_headLower_15811 = _op_headLower_15814);
(_p_headLower_15811.y = (abs((abs((_p_headLower_15811.y + 0.147)) - 0.055599999)) - 0.027799999));
(_p_sdBox_15696 = (_p_headLower_15811 + float3(0.0, 0.0, 1.5)));
(_b_sdBox_15697 = vec3_ctor(lerp(0.25, 0.55000001, (-_op_headLower_15814.y)), 0.015, 0.1));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_9_15831 = _sdBox_return_value_15699);
(_r_headLower_15827._d = max(_r_headLower_15827._d, (-_sdBox_return_value_inlined_9_15831)));
(_p_headLower_15811 = _op_headLower_15814);
(_p_headLower_15811.y = (abs((_p_headLower_15811.y + 0.16)) - 0.059999999));
(_p_headLower_15811.z -= -1.1);
(_p_sdCappedCylinder_15787 = _p_headLower_15811.xzy);
(_h_sdCappedCylinder_15788 = 1.0);
(_r_sdCappedCylinder_15789 = 0.029999999);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_10_15832 = _sdCappedCylinder_return_value_15791);
(_p_sdCappedCylinder_15787 = _p_headLower_15811.xzy);
(_h_sdCappedCylinder_15788 = 0.55000001);
(_r_sdCappedCylinder_15789 = 1.0);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_11_15833 = _sdCappedCylinder_return_value_15791);
(_r_headLower_15827._d = max(_r_headLower_15827._d, (-max(max(_sdCappedCylinder_return_value_inlined_10_15832, (-_sdCappedCylinder_return_value_inlined_11_15833)), (_p_headLower_15811.z + 0.2)))));
(_mat_setBodyMaterial_15736 = _r_headLower_15827);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_headLower_15827 = _mat_setBodyMaterial_15736);
(_headLower_return_value_15813 = _r_headLower_15827);
(_headLower_has_returned_15812 = true);
(_headLower_return_value_inlined_63_15834 = _headLower_return_value_15813);
(_a_minResult_15803 = _r_ed209_15772);
(_b_minResult_15804 = _headLower_return_value_inlined_63_15834);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_64_15835 = _minResult_return_value_15806);
(_p_headVisor_15815 = _p_ed209_15724);
(_h_headVisor_15816 = 0.80000001);
(_bump_headVisor_15817 = 1.0);
(_headVisor_has_returned_15818 = false);
(_bump_headVisor_15817 *= ((sin((_p_headVisor_15815.x * 150.0)) * sin((_p_headVisor_15815.y * 150.0))) * 0.0020000001));
(_p_sdBox_15696 = _p_headVisor_15815);
(_b_sdBox_15697 = vec3_ctor_int_int(1, _h_headVisor_15816, 2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_3_15821 = _sdBox_return_value_15699);
(_result_headVisor_15820._d = _sdBox_return_value_inlined_3_15821);
(_p_headSphere_15822 = _p_headVisor_15815);
(_headSphere_has_returned_15823 = false);
(_headSphere_return_value_15824 = ((length((_p_headSphere_15822 / float3(1.0, 0.80000001, 1.0))) - 1.0) * 0.80000001));
(_headSphere_has_returned_15823 = true);
(_headSphere_return_value_inlined_4_15825 = _headSphere_return_value_15824);
(_result_headVisor_15820._d = (max(lerp(_result_headVisor_15820._d, _headSphere_return_value_inlined_4_15825, 0.56999999), (-_p_headVisor_15815.y)) - _bump_headVisor_15817));
(_result_headVisor_15820._mat = float3(0.050000001, 0.050000001, 0.050000001));
(_result_headVisor_15820._specPower = 30.0);
(_headVisor_return_value_15819 = _result_headVisor_15820);
(_headVisor_has_returned_15818 = true);
(_headVisor_return_value_inlined_65_15836 = _headVisor_return_value_15819);
(_a_minResult_15803 = _minResult_return_value_inlined_64_15835);
(_b_minResult_15804 = _headVisor_return_value_inlined_65_15836);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_66_15837 = _minResult_return_value_15806);
(_p_arms_15838 = _p_ed209_15724);
(_arms_has_returned_15839 = false);
(_mat_setBodyMaterial_15736 = _r_arms_15842);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_arms_15842 = _mat_setBodyMaterial_15736);
(_p_arms_15838.x = abs(_p_arms_15838.x));
(_p_arms_15838.yz += float2(0.23999999, 0.0));
(_a_rot_15714 = (0.15000001 * (_gunsUp_1 - 1.0)));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_23_15843 = _rot_return_value_15716);
(_p_arms_15838.xy = mul(_p_arms_15838.xy, transpose(_rot_return_value_inlined_23_15843)));
(_p_sdCapsule_15844 = _p_arms_15838);
(_a_sdCapsule_15845 = float3(0.0, 0.0, 0.0));
(_b_sdCapsule_15846 = float3(1.5, 0.0, 0.0));
(_r_sdCapsule_15847 = 0.2);
(_sdCapsule_has_returned_15848 = false);
(_pa_sdCapsule_15850 = (_p_sdCapsule_15844 - _a_sdCapsule_15845));
(_ba_sdCapsule_15851 = (_b_sdCapsule_15846 - _a_sdCapsule_15845));
(_sdCapsule_return_value_15849 = (length((_pa_sdCapsule_15850 - (_ba_sdCapsule_15851 * clamp((dot(_pa_sdCapsule_15850, _ba_sdCapsule_15851) / dot(_ba_sdCapsule_15851, _ba_sdCapsule_15851)), 0.0, 1.0)))) - _r_sdCapsule_15847));
(_sdCapsule_has_returned_15848 = true);
(_sdCapsule_return_value_inlined_24_15852 = _sdCapsule_return_value_15849);
(_p_sdCapsule_15844 = _p_arms_15838);
(_a_sdCapsule_15845 = float3(1.5, 0.0, 0.0));
(_b_sdCapsule_15846 = float3(1.5, 0.0, -0.30000001));
(_r_sdCapsule_15847 = 0.2);
(_sdCapsule_has_returned_15848 = false);
(_pa_sdCapsule_15850 = (_p_sdCapsule_15844 - _a_sdCapsule_15845));
(_ba_sdCapsule_15851 = (_b_sdCapsule_15846 - _a_sdCapsule_15845));
(_sdCapsule_return_value_15849 = (length((_pa_sdCapsule_15850 - (_ba_sdCapsule_15851 * clamp((dot(_pa_sdCapsule_15850, _ba_sdCapsule_15851) / dot(_ba_sdCapsule_15851, _ba_sdCapsule_15851)), 0.0, 1.0)))) - _r_sdCapsule_15847));
(_sdCapsule_has_returned_15848 = true);
(_sdCapsule_return_value_inlined_25_15853 = _sdCapsule_return_value_15849);
(_r_arms_15842._d = min(_sdCapsule_return_value_inlined_24_15852, _sdCapsule_return_value_inlined_25_15853));
(_p_arms_15838 -= float3(1.5, 0.0, -0.30000001));
(_p_arms_15838.z -= (_gunsForward_1 * 0.15000001));
(_p_gunPod_15854 = _p_arms_15838);
(_gunPod_has_returned_15855 = false);
(_mat_setBodyMaterial_15736 = _r_gunPod_15857);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_gunPod_15857 = _mat_setBodyMaterial_15736);
(_p_gunPod_15854.yz += float2(0.1, 0.44999999));
(_pp_gunPod_15858 = _p_gunPod_15854);
(_pp_gunPod_15858.z = (abs(_pp_gunPod_15858.z) - 0.5));
(_p_sdCappedCone_15859 = _pp_gunPod_15858);
(_a_sdCappedCone_15860 = float3(0.0, 0.0, 0.0));
(_b_sdCappedCone_15861 = float3(0.0, 0.0, -0.1));
(_ra_sdCappedCone_15862 = 0.25);
(_rb_sdCappedCone_15863 = 0.34999999);
(_sdCappedCone_has_returned_15864 = false);
(_rba_sdCappedCone_15866 = (_rb_sdCappedCone_15863 - _ra_sdCappedCone_15862));
(_baba_sdCappedCone_15867 = dot((_b_sdCappedCone_15861 - _a_sdCappedCone_15860), (_b_sdCappedCone_15861 - _a_sdCappedCone_15860)));
(_papa_sdCappedCone_15868 = dot((_p_sdCappedCone_15859 - _a_sdCappedCone_15860), (_p_sdCappedCone_15859 - _a_sdCappedCone_15860)));
(_paba_sdCappedCone_15869 = (dot((_p_sdCappedCone_15859 - _a_sdCappedCone_15860), (_b_sdCappedCone_15861 - _a_sdCappedCone_15860)) / _baba_sdCappedCone_15867));
(_x_sdCappedCone_15870 = sqrt((_papa_sdCappedCone_15868 - ((_paba_sdCappedCone_15869 * _paba_sdCappedCone_15869) * _baba_sdCappedCone_15867))));
float s1785 = {0};
if ((_paba_sdCappedCone_15869 < 0.5))
{
(s1785 = _ra_sdCappedCone_15862);
}
else
{
(s1785 = _rb_sdCappedCone_15863);
}
(_cax_sdCappedCone_15871 = max(0.0, (_x_sdCappedCone_15870 - s1785)));
(_cay_sdCappedCone_15872 = (abs((_paba_sdCappedCone_15869 - 0.5)) - 0.5));
(_f_sdCappedCone_15873 = clamp((((_rba_sdCappedCone_15866 * (_x_sdCappedCone_15870 - _ra_sdCappedCone_15862)) + (_paba_sdCappedCone_15869 * _baba_sdCappedCone_15867)) / ((_rba_sdCappedCone_15866 * _rba_sdCappedCone_15866) + _baba_sdCappedCone_15867)), 0.0, 1.0));
(_cbx_sdCappedCone_15874 = ((_x_sdCappedCone_15870 - _ra_sdCappedCone_15862) - (_f_sdCappedCone_15873 * _rba_sdCappedCone_15866)));
(_cby_sdCappedCone_15875 = (_paba_sdCappedCone_15869 - _f_sdCappedCone_15873));
float s1786 = {0};
if (((_cbx_sdCappedCone_15874 < 0.0) && (_cay_sdCappedCone_15872 < 0.0)))
{
(s1786 = -1.0);
}
else
{
(s1786 = 1.0);
}
(_sdCappedCone_return_value_15865 = (s1786 * sqrt(min(((_cax_sdCappedCone_15871 * _cax_sdCappedCone_15871) + ((_cay_sdCappedCone_15872 * _cay_sdCappedCone_15872) * _baba_sdCappedCone_15867)), ((_cbx_sdCappedCone_15874 * _cbx_sdCappedCone_15874) + ((_cby_sdCappedCone_15875 * _cby_sdCappedCone_15875) * _baba_sdCappedCone_15867))))));
(_sdCappedCone_has_returned_15864 = true);
(_sdCappedCone_return_value_inlined_12_15876 = _sdCappedCone_return_value_15865);
(_r_gunPod_15857._d = _sdCappedCone_return_value_inlined_12_15876);
(_p_sdCappedCylinder_15787 = _p_gunPod_15854);
(_h_sdCappedCylinder_15788 = 0.34999999);
(_r_sdCappedCylinder_15789 = 0.40000001);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_13_15877 = _sdCappedCylinder_return_value_15791);
(_r_gunPod_15857._d = min(_r_gunPod_15857._d, _sdCappedCylinder_return_value_inlined_13_15877));
(_pp_gunPod_15858 = vec3_ctor(_p_gunPod_15854.x, (0.28 - _p_gunPod_15854.y), _p_gunPod_15854.z));
(_p_sdTriPrism_15878 = _pp_gunPod_15858);
(_h_sdTriPrism_15879 = float2(0.1, 0.5));
(_sdTriPrism_has_returned_15880 = false);
(_q_sdTriPrism_15882 = abs(_p_sdTriPrism_15878));
(_sdTriPrism_return_value_15881 = max((_q_sdTriPrism_15882.z - _h_sdTriPrism_15879.y), (max(((_q_sdTriPrism_15882.x * 0.86602497) + (_p_sdTriPrism_15878.y * 0.5)), (-_p_sdTriPrism_15878.y)) - (_h_sdTriPrism_15879.x * 0.5))));
(_sdTriPrism_has_returned_15880 = true);
(_sdTriPrism_return_value_inlined_14_15883 = _sdTriPrism_return_value_15881);
(_r_gunPod_15857._d = min(_r_gunPod_15857._d, _sdTriPrism_return_value_inlined_14_15883));
(_pp_gunPod_15858 = _p_gunPod_15854);
(_pp_gunPod_15858.x = abs(_p_gunPod_15854.x));
(_a_rot_15714 = 0.78525001);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_15_15884 = _rot_return_value_15716);
(_pp_gunPod_15858.xy = mul(_pp_gunPod_15858.xy, transpose(_rot_return_value_inlined_15_15884)));
(_bump_gunPod_15886 = (sign(sin((_pp_gunPod_15858.z * 33.299999))) * 0.003));
(_p_sdBox_15696 = _pp_gunPod_15858);
(_b_sdBox_15697 = vec3_ctor((0.1 - _bump_gunPod_15886), (0.38 - _bump_gunPod_15886), 0.34));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_16_15887 = _sdBox_return_value_15699);
(_d_gunPod_15888 = (_sdBox_return_value_inlined_16_15887 - 0.02));
(_pp_gunPod_15858 = (_p_gunPod_15854 - float3(0.0, 0.0, -0.60000002)));
(_pp_gunPod_15858.x = (abs(_pp_gunPod_15858.x) - 0.1));
(_p_sdCappedCylinder_15787 = _pp_gunPod_15858);
(_h_sdCappedCylinder_15788 = 0.059999999);
(_r_sdCappedCylinder_15789 = 0.15000001);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_17_15889 = _sdCappedCylinder_return_value_15791);
(_p_sdCappedCylinder_15787 = (_pp_gunPod_15858 + float3(0.0, 0.12, -0.050000001)));
(_h_sdCappedCylinder_15788 = 0.059999999);
(_r_sdCappedCylinder_15789 = 0.050000001);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_18_15890 = _sdCappedCylinder_return_value_15791);
(_p_sdBox_15696 = (_p_gunPod_15854 + float3(0.0, 0.0, 0.54000002)));
(_b_sdBox_15697 = float3(0.1, 0.059999999, 0.039999999));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_19_15891 = _sdBox_return_value_15699);
(_d_gunPod_15888 = min(min(min(_d_gunPod_15888, _sdCappedCylinder_return_value_inlined_17_15889), _sdCappedCylinder_return_value_inlined_18_15890), _sdBox_return_value_inlined_19_15891));
if ((_d_gunPod_15888 < _r_gunPod_15857._d))
{
(_p_sdCappedCylinder_15787 = (_pp_gunPod_15858 + float3(0.0, 0.0, 0.1)));
(_h_sdCappedCylinder_15788 = 0.029999999);
(_r_sdCappedCylinder_15789 = 0.2);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_20_15892 = _sdCappedCylinder_return_value_15791);
(_d_gunPod_15888 = max(_d_gunPod_15888, (-_sdCappedCylinder_return_value_inlined_20_15892)));
(_r_gunPod_15857._d = _d_gunPod_15888);
(_r_gunPod_15857._mat = float3(0.02, 0.02, 0.02));
}
(_fireShock_has_returned_15662 = false);
(_fireShock_return_value_15663 = abs(sin((_edShoot_1 * 78.537498))));
(_fireShock_has_returned_15662 = true);
(_fireShock_return_value_inlined_21_15893 = _fireShock_return_value_15663);
(_fs_gunPod_15885 = _fireShock_return_value_inlined_21_15893);
if ((_fs_gunPod_15885 > 0.5))
{
(_p_sdCappedCylinder_15787 = _pp_gunPod_15858);
(_h_sdCappedCylinder_15788 = (0.0099999998 + (_pp_gunPod_15858.z * 0.050000001)));
(_r_sdCappedCylinder_15789 = ((frac((_fs_gunPod_15885 * 3322.4231)) * 0.5) + 0.89999998));
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_22_15894 = _sdCappedCylinder_return_value_15791);
(_d_gunPod_15888 = _sdCappedCylinder_return_value_inlined_22_15894);
if ((_d_gunPod_15888 < _r_gunPod_15857._d))
{
(_r_gunPod_15857._d = _d_gunPod_15888);
(_r_gunPod_15857._mat = float3(1.0, 1.0, 1.0));
(_glow_1 += (0.1 / (0.0099999998 + ((_d_gunPod_15888 * _d_gunPod_15888) * 400.0))));
}
}
(_gunPod_return_value_15856 = _r_gunPod_15857);
(_gunPod_has_returned_15855 = true);
(_gunPod_return_value_inlined_26_15895 = _gunPod_return_value_15856);
(_a_minResult_15803 = _r_arms_15842);
(_b_minResult_15804 = _gunPod_return_value_inlined_26_15895);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_27_15896 = _minResult_return_value_15806);
(_arms_return_value_15840 = _minResult_return_value_inlined_27_15896);
(_arms_has_returned_15839 = true);
(_arms_return_value_inlined_67_15897 = _arms_return_value_15840);
(_a_minResult_15803 = _minResult_return_value_inlined_66_15837);
(_b_minResult_15804 = _arms_return_value_inlined_67_15897);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_68_15898 = _minResult_return_value_15806);
(_ed209_return_value_15726 = _minResult_return_value_inlined_68_15898);
(_ed209_has_returned_15725 = true);
(_ed209_return_value_inlined_79_15899 = _ed209_return_value_15726);
(_a_minResult_15803 = _room_return_value_inlined_78_15723);
(_b_minResult_15804 = _ed209_return_value_inlined_79_15899);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_80_15900 = _minResult_return_value_15806);
(_r_map_15901 = _minResult_return_value_inlined_80_15900);
(_gnd_map_15902 = length((_p_map_15683.y + 3.0)));
if ((_gnd_map_15902 < _r_map_15901._d))
{
(_r_map_15901._d = _gnd_map_15902);
(_r_map_15901._mat = float3(0.1, 0.1, 0.1));
}
(_map_return_value_15685 = _r_map_15901);
(_map_has_returned_15684 = true);
(_map_return_value_inlined_82_15917 = _map_return_value_15685);
(_p_map_15683 = (_p_calcNormal_15911 + _e_calcNormal_15916.yyx));
(_map_has_returned_15684 = false);
(_p_room_15686 = _p_map_15683);
(_room_has_returned_15687 = false);
(_r_room_15690._mat = float3(0.40000001, 0.40000001, 0.40000001));
(_r_room_15690._specPower = 10000000.0);
(_xy_room_15691 = (_p_room_15686.xy - float2(0.0, 2.0)));
(_p_room_15686.x = abs(_p_room_15686.x));
(_p_room_15686.yz += float2(0.5, -3.4000001));
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = float3(2.8, 2.5999999, 1.1));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_69_15701 = _sdBox_return_value_15699);
(_doorHole_room_15702 = _sdBox_return_value_inlined_69_15701);
(_backWall_room_15703 = length((_p_room_15686.z - 8.0)));
(_r_room_15690._d = min(_backWall_room_15703, max(length(_p_room_15686.z), ((-_doorHole_room_15702) + 0.1))));
if ((_r_room_15690._d == _backWall_room_15703))
{
(_p_sdOctogon_15704 = _xy_room_15691);
(_r_sdOctogon_15705 = 2.5999999);
(_sdOctogon_has_returned_15706 = false);
(_p_sdOctogon_15704 = abs(_p_sdOctogon_15704));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(-0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(-0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= vec2_ctor(clamp(_p_sdOctogon_15704.x, (-0.41421357 * _r_sdOctogon_15705), (0.41421357 * _r_sdOctogon_15705)), _r_sdOctogon_15705));
(_sdOctogon_return_value_15707 = (length(_p_sdOctogon_15704) * sign(_p_sdOctogon_15704.y)));
(_sdOctogon_has_returned_15706 = true);
(_sdOctogon_return_value_inlined_70_15709 = _sdOctogon_return_value_15707);
(_p_sdOctogon_15704 = _xy_room_15691);
(_r_sdOctogon_15705 = 1.9);
(_sdOctogon_has_returned_15706 = false);
(_p_sdOctogon_15704 = abs(_p_sdOctogon_15704));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(-0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(-0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= vec2_ctor(clamp(_p_sdOctogon_15704.x, (-0.41421357 * _r_sdOctogon_15705), (0.41421357 * _r_sdOctogon_15705)), _r_sdOctogon_15705));
(_sdOctogon_return_value_15707 = (length(_p_sdOctogon_15704) * sign(_p_sdOctogon_15704.y)));
(_sdOctogon_has_returned_15706 = true);
(_sdOctogon_return_value_inlined_71_15710 = _sdOctogon_return_value_15707);
(_ocp_room_15711 = min(abs(_sdOctogon_return_value_inlined_70_15709), abs(_sdOctogon_return_value_inlined_71_15710)));
(_p_sdOctogon_15704 = _xy_room_15691);
(_r_sdOctogon_15705 = 1.2);
(_sdOctogon_has_returned_15706 = false);
(_p_sdOctogon_15704 = abs(_p_sdOctogon_15704));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(-0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(-0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= vec2_ctor(clamp(_p_sdOctogon_15704.x, (-0.41421357 * _r_sdOctogon_15705), (0.41421357 * _r_sdOctogon_15705)), _r_sdOctogon_15705));
(_sdOctogon_return_value_15707 = (length(_p_sdOctogon_15704) * sign(_p_sdOctogon_15704.y)));
(_sdOctogon_has_returned_15706 = true);
(_sdOctogon_return_value_inlined_72_15712 = _sdOctogon_return_value_15707);
(_ocp_room_15711 = min(max(_ocp_room_15711, min((0.69999999 - abs((_xy_room_15691.x + 1.2))), (-_xy_room_15691.y))), max(abs(_sdOctogon_return_value_inlined_72_15712), min(_xy_room_15691.x, (0.69999999 - abs(_xy_room_15691.y))))));
if ((_ocp_room_15711 < 0.30000001))
{
(_r_room_15690._mat = float3(0.38999999, 0.56999999, 0.70999998));
}
}
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = float3(3.2, 3.0, 0.2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_73_15713 = _sdBox_return_value_15699);
(_doorFrame_room_15692 = max(_sdBox_return_value_inlined_73_15713, (-_doorHole_room_15702)));
(_doorWidth_room_15693 = 1.4);
(_p_room_15686.x -= 2.8);
(_a_rot_15714 = (_doorOpen_1 * 2.0999999));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_74_15719 = _rot_return_value_15716);
(_p_room_15686.xz = mul(_p_room_15686.xz, transpose(_rot_return_value_inlined_74_15719)));
(_p_room_15686.x += _doorWidth_room_15693);
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = vec3_ctor(_doorWidth_room_15693, float2(2.5999999, 0.1)));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_75_15720 = _sdBox_return_value_15699);
(_door_room_15694 = _sdBox_return_value_inlined_75_15720);
(_p_room_15686 = (abs(_p_room_15686) - vec3_ctor((_doorWidth_room_15693 * 0.5), 1.1, 0.14)));
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = float3(0.44999999, 0.89999998, 0.1));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_76_15721 = _sdBox_return_value_15699);
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = float3(0.34999999, 0.80000001, 1.0));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_77_15722 = _sdBox_return_value_15699);
(_d_room_15695 = min(_doorFrame_room_15692, max(_door_room_15694, (-max(_sdBox_return_value_inlined_76_15721, (-_sdBox_return_value_inlined_77_15722))))));
if ((_d_room_15695 < _r_room_15690._d))
{
(_r_room_15690._d = _d_room_15695);
(_r_room_15690._mat = float3(0.02, 0.02, 0.024));
(_r_room_15690._specPower = 10.0);
}
(_room_return_value_15688 = _r_room_15690);
(_room_has_returned_15687 = true);
(_room_return_value_inlined_78_15723 = _room_return_value_15688);
(_p_ed209_15724 = _p_map_15683);
(_ed209_has_returned_15725 = false);
(_f_legWalkAngle_15727 = 2.0);
(_legWalkAngle_has_returned_15728 = false);
(_legWalkAngle_return_value_15729 = (sin((((_edWalk_1 * 3.141) * 6.0) * _f_legWalkAngle_15727)) * 0.2));
(_legWalkAngle_has_returned_15728 = true);
(_legWalkAngle_return_value_inlined_54_15730 = _legWalkAngle_return_value_15729);
(_edZ_has_returned_15633 = false);
(_edZ_return_value_15634 = lerp(5.0, -2.0, _edWalk_1));
(_edZ_has_returned_15633 = true);
(_edZ_return_value_inlined_55_15731 = _edZ_return_value_15634);
(_p_ed209_15724.yz += vec2_ctor(((_legWalkAngle_return_value_inlined_54_15730 * 0.2) + 0.1), (-_edZ_return_value_inlined_55_15731)));
(_p_legs_15732 = _p_ed209_15724);
(_legs_has_returned_15733 = false);
(_mat_setBodyMaterial_15736 = _r_legs_15735);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_legs_15735 = _mat_setBodyMaterial_15736);
(_f_legWalkAngle_15727 = 1.0);
(_legWalkAngle_has_returned_15728 = false);
(_legWalkAngle_return_value_15729 = (sin((((_edWalk_1 * 3.141) * 6.0) * _f_legWalkAngle_15727)) * 0.2));
(_legWalkAngle_has_returned_15728 = true);
(_legWalkAngle_return_value_inlined_45_15738 = _legWalkAngle_return_value_15729);
(_legAngle_legs_15739 = _legWalkAngle_return_value_inlined_45_15738);
(_p_legs_15732.z += 0.27000001);
(_a_rot_15714 = (_legAngle_legs_15739 * sign(_p_legs_15732.x)));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_46_15740 = _rot_return_value_15716);
(_p_legs_15732.yz = mul(_p_legs_15732.yz, transpose(_rot_return_value_inlined_46_15740)));
(_p_legs_15732.z -= 0.27000001);
(_p_legs_15732.y += 0.64999998);
(_a_rot_15714 = -0.2);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_47_15741 = _rot_return_value_15716);
(_p_legs_15732.yz = mul(_p_legs_15732.yz, transpose(_rot_return_value_inlined_47_15741)));
(_a_rot_15714 = (_legAngle_legs_15739 * 0.30000001));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_48_15742 = _rot_return_value_15716);
(_p_legs_15732.xy = mul(_p_legs_15732.xy, transpose(_rot_return_value_inlined_48_15742)));
(_pp_legs_15744 = _p_legs_15732);
(_pp_legs_15744.x = abs(_pp_legs_15744.x));
(_pp_legs_15744.y += 0.47999999);
(_a_rot_15714 = -0.58525002);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_49_15745 = _rot_return_value_15716);
(_pp_legs_15744.yz = mul(_pp_legs_15744.yz, transpose(_rot_return_value_inlined_49_15745)));
(_pp_legs_15744.x -= 0.98000002);
(_cp_legs_15743 = _pp_legs_15744);
(_p_legs_15732 = _pp_legs_15744);
(_pp_legs_15744.xz = (abs(_pp_legs_15744.xz) - float2(0.12, 0.25)));
(_p_legs_15732.y += 0.68000001);
(_p_legs_15732.xy = (abs(_p_legs_15732.xy) - 0.12));
(_p_sdBox_15696 = _p_legs_15732);
(_b_sdBox_15697 = float3(0.07, 0.050000001, 1.2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_50_15746 = _sdBox_return_value_15699);
(_silver_legs_15737 = _sdBox_return_value_inlined_50_15746);
(_cp_legs_15743 -= float3(0.0, -0.69999999, 0.0));
(_p_sdBox_15696 = (_cp_legs_15743 - float3(0.0, 0.0, 1.15)));
(_b_sdBox_15697 = float3(0.17, 0.17, 0.07));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_51_15747 = _sdBox_return_value_15699);
(_r_legs_15735._d = (_sdBox_return_value_inlined_51_15747 - 0.039999999));
(_cp_legs_15743.z++);
(_p_sdChamferedCube_15748 = _cp_legs_15743.xzy);
(_r_sdChamferedCube_15749 = vec2_ctor((0.28 - (sign((abs(_cp_legs_15743.z) - 0.30000001)) * 0.0099999998)), 0.5).xyx);
(_c_sdChamferedCube_15750 = 0.18000001);
(_sdChamferedCube_has_returned_15751 = false);
(_p_sdBox_15696 = _p_sdChamferedCube_15748);
(_b_sdBox_15697 = _r_sdChamferedCube_15749);
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_0_15753 = _sdBox_return_value_15699);
(_cube_sdChamferedCube_15754 = _sdBox_return_value_inlined_0_15753);
(_a_rot_15714 = 0.78525001);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_1_15755 = _rot_return_value_15716);
(_p_sdChamferedCube_15748.xz = mul(_p_sdChamferedCube_15748.xz, transpose(_rot_return_value_inlined_1_15755)));
(_r_sdChamferedCube_15749.xz *= (((-_c_sdChamferedCube_15750) / 1.41) + 1.41));
(_p_sdBox_15696 = _p_sdChamferedCube_15748);
(_b_sdBox_15697 = _r_sdChamferedCube_15749);
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_2_15756 = _sdBox_return_value_15699);
(_sdChamferedCube_return_value_15752 = max(_cube_sdChamferedCube_15754, _sdBox_return_value_inlined_2_15756));
(_sdChamferedCube_has_returned_15751 = true);
(_sdChamferedCube_return_value_inlined_52_15757 = _sdChamferedCube_return_value_15752);
(_r_legs_15735._d = min(_r_legs_15735._d, _sdChamferedCube_return_value_inlined_52_15757));
(_p_foot_15758 = _cp_legs_15743);
(_foot_has_returned_15759 = false);
(_p_foot_15758.z += 0.80000001);
(_a_rot_15714 = 0.86000001);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_29_15761 = _rot_return_value_15716);
(_p_foot_15758.yz = mul(_p_foot_15758.yz, transpose(_rot_return_value_inlined_29_15761)));
(_p_toe_15762 = _p_foot_15758);
(_toe_has_returned_15763 = false);
(_p_toe_15762.yz += float2(0.1, 0.31999999));
(_p_sdBox_15696 = _p_toe_15762);
(_b_sdBox_15697 = vec3_ctor(((0.30000001 + (0.2 * (_p_toe_15762.z - 0.18000001))) - (_p_toe_15762.y * 0.228)), (0.30000001 + (0.2 * cos(((_p_toe_15762.z - 0.18000001) * 3.6900001)))), 0.34999999));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_28_15765 = _sdBox_return_value_15699);
(_toe_return_value_15764 = max(_sdBox_return_value_inlined_28_15765, (0.1 - _p_toe_15762.y)));
(_toe_has_returned_15763 = true);
(_toe_return_value_inlined_30_15766 = _toe_return_value_15764);
(_d_foot_15767 = _toe_return_value_inlined_30_15766);
(_a_rot_15714 = 1.5700001);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_31_15768 = _rot_return_value_15716);
(_p_foot_15758.xz = mul(_p_foot_15758.xz, transpose(_rot_return_value_inlined_31_15768)));
(_p_foot_15758.x -= 0.43000001);
(_p_foot_15758.z = (0.25 - abs(_p_foot_15758.z)));
(_p_toe_15762 = _p_foot_15758);
(_toe_has_returned_15763 = false);
(_p_toe_15762.yz += float2(0.1, 0.31999999));
(_p_sdBox_15696 = _p_toe_15762);
(_b_sdBox_15697 = vec3_ctor(((0.30000001 + (0.2 * (_p_toe_15762.z - 0.18000001))) - (_p_toe_15762.y * 0.228)), (0.30000001 + (0.2 * cos(((_p_toe_15762.z - 0.18000001) * 3.6900001)))), 0.34999999));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_28_15765 = _sdBox_return_value_15699);
(_toe_return_value_15764 = max(_sdBox_return_value_inlined_28_15765, (0.1 - _p_toe_15762.y)));
(_toe_has_returned_15763 = true);
(_toe_return_value_inlined_32_15769 = _toe_return_value_15764);
(_foot_return_value_15760 = min(_d_foot_15767, _toe_return_value_inlined_32_15769));
(_foot_has_returned_15759 = true);
(_foot_return_value_inlined_53_15770 = _foot_return_value_15760);
(_r_legs_15735._d = min(_r_legs_15735._d, _foot_return_value_inlined_53_15770));
if ((_silver_legs_15737 < _r_legs_15735._d))
{
(_r_legs_15735._d = _silver_legs_15737);
(_r_legs_15735._mat = float3(0.80000001, 0.80000001, 0.80000001));
}
(_legs_return_value_15734 = _r_legs_15735);
(_legs_has_returned_15733 = true);
(_legs_return_value_inlined_56_15771 = _legs_return_value_15734);
(_r_ed209_15772 = _legs_return_value_inlined_56_15771);
(_f_ed209_15773 = min((_stretch_1 * 2.0), 1.0));
float s1787 = {0};
if ((_f_ed209_15773 < 0.5))
{
(s1787 = smoothstep(0.0, 0.5, _f_ed209_15773));
}
else
{
(s1787 = (1.0 - (smoothstep(0.5, 1.0, _f_ed209_15773) * 0.2)));
}
(_slide_ed209_15774 = s1787);
(_p_ed209_15724.yz -= (_slide_ed209_15774 * 0.5));
(_gunsUp_1 = smoothstep(0.0, 1.0, clamp(((_stretch_1 - 0.66000003) * 6.0), 0.0, 1.0)));
(_fireShock_has_returned_15662 = false);
(_fireShock_return_value_15663 = abs(sin((_edShoot_1 * 78.537498))));
(_fireShock_has_returned_15662 = true);
(_fireShock_return_value_inlined_57_15775 = _fireShock_return_value_15663);
(_gunsForward_1 = (smoothstep(0.0, 1.0, clamp(((_stretch_1 - 0.82999998) * 6.0), 0.0, 1.0)) + (_fireShock_return_value_inlined_57_15775 * 0.5)));
(_p_waist_15776 = _p_ed209_15724);
(_waist_has_returned_15777 = false);
(_mat_setBodyMaterial_15736 = _r_waist_15779);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_waist_15779 = _mat_setBodyMaterial_15736);
(_p_waist_15776.y += 0.64999998);
(_a_rot_15714 = -0.2);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_33_15780 = _rot_return_value_15716);
(_p_waist_15776.yz = mul(_p_waist_15776.yz, transpose(_rot_return_value_inlined_33_15780)));
(_f_legWalkAngle_15727 = 1.0);
(_legWalkAngle_has_returned_15728 = false);
(_legWalkAngle_return_value_15729 = (sin((((_edWalk_1 * 3.141) * 6.0) * _f_legWalkAngle_15727)) * 0.2));
(_legWalkAngle_has_returned_15728 = true);
(_legWalkAngle_return_value_inlined_34_15783 = _legWalkAngle_return_value_15729);
(_legAngle_waist_15784 = _legWalkAngle_return_value_inlined_34_15783);
(_a_rot_15714 = (_legAngle_waist_15784 * 0.30000001));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_35_15785 = _rot_return_value_15716);
(_p_waist_15776.xy = mul(_p_waist_15776.xy, transpose(_rot_return_value_inlined_35_15785)));
(_pp_waist_15786 = _p_waist_15776);
(_pp_waist_15786.y += 0.30000001);
(_p_sdCappedCylinder_15787 = _pp_waist_15786.zyx);
(_h_sdCappedCylinder_15788 = 0.5);
(_r_sdCappedCylinder_15789 = 0.5);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_36_15793 = _sdCappedCylinder_return_value_15791);
(_r_waist_15779._d = max(_sdCappedCylinder_return_value_inlined_36_15793, (_p_waist_15776.y + 0.15000001)));
(_bump_waist_15781 = (0.5 - (abs(sin((_p_waist_15776.y * 40.0))) * 0.029999999)));
(_p_sdBox_15696 = _p_waist_15776);
(_b_sdBox_15697 = vec3_ctor(_bump_waist_15781, 0.15000001, _bump_waist_15781));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_37_15794 = _sdBox_return_value_15699);
(_d_waist_15782 = _sdBox_return_value_inlined_37_15794);
(_bump_waist_15781 = (0.30000001 - (abs(sin((_p_waist_15776.x * 40.0))) * 0.029999999)));
(_pp_waist_15786.y += 0.18000001);
(_p_sdCappedCylinder_15787 = _pp_waist_15786.zyx);
(_h_sdCappedCylinder_15788 = _bump_waist_15781);
(_r_sdCappedCylinder_15789 = 0.75);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_38_15795 = _sdCappedCylinder_return_value_15791);
(_d_waist_15782 = min(_d_waist_15782, _sdCappedCylinder_return_value_inlined_38_15795));
(_pp_waist_15786.x = abs(_pp_waist_15786.x));
(_a_rot_15714 = (-0.58525002 + (_legAngle_waist_15784 * sign(_p_waist_15776.x))));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_39_15796 = _rot_return_value_15716);
(_pp_waist_15786.yz = mul(_pp_waist_15786.yz, transpose(_rot_return_value_inlined_39_15796)));
(_pp_waist_15786.x -= 0.98000002);
(_p_sdCappedCylinder_15787 = _pp_waist_15786.zyx);
(_h_sdCappedCylinder_15788 = 0.40000001);
(_r_sdCappedCylinder_15789 = 0.23999999);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_40_15797 = _sdCappedCylinder_return_value_15791);
(_r_waist_15779._d = min(_r_waist_15779._d, max(_sdCappedCylinder_return_value_inlined_40_15797, (-_pp_waist_15786.y))));
(_p_sdBox_15696 = _pp_waist_15786);
(_b_sdBox_15697 = vec3_ctor(0.23999999, 0.2, (0.14 + (0.2 * _pp_waist_15786.y))));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_41_15798 = _sdBox_return_value_15699);
(_r_waist_15779._d = min(_r_waist_15779._d, _sdBox_return_value_inlined_41_15798));
(_p_waist_15776 = _pp_waist_15786);
(_pp_waist_15786.xz = (abs(_pp_waist_15786.xz) - float2(0.12, 0.25)));
(_p_sdCappedCylinder_15787 = _pp_waist_15786.xzy);
(_h_sdCappedCylinder_15788 = 0.1);
(_r_sdCappedCylinder_15789 = 0.32499999);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_42_15799 = _sdCappedCylinder_return_value_15791);
(_p_sdCappedCylinder_15787 = _pp_waist_15786.xzy);
(_h_sdCappedCylinder_15788 = 0.050000001);
(_r_sdCappedCylinder_15789 = 0.5);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_43_15800 = _sdCappedCylinder_return_value_15791);
(_r_waist_15779._d = min(_r_waist_15779._d, max(min(_sdCappedCylinder_return_value_inlined_42_15799, _sdCappedCylinder_return_value_inlined_43_15800), _pp_waist_15786.y)));
(_p_waist_15776.y += 0.68000001);
(_p_sdBox_15696 = _p_waist_15776);
(_b_sdBox_15697 = vec3_ctor(((sign((abs(_p_waist_15776.y) - 0.039999999)) * 0.0049999999) + 0.25999999), 0.2, 0.34));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_44_15801 = _sdBox_return_value_15699);
(_r_waist_15779._d = min(_r_waist_15779._d, _sdBox_return_value_inlined_44_15801));
if ((_d_waist_15782 < _r_waist_15779._d))
{
(_r_waist_15779._d = _d_waist_15782);
(_r_waist_15779._mat = float3(0.02, 0.02, 0.02));
}
(_waist_return_value_15778 = _r_waist_15779);
(_waist_has_returned_15777 = true);
(_waist_return_value_inlined_58_15802 = _waist_return_value_15778);
(_a_minResult_15803 = _r_ed209_15772);
(_b_minResult_15804 = _waist_return_value_inlined_58_15802);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_59_15807 = _minResult_return_value_15806);
(_r_ed209_15772 = _minResult_return_value_inlined_59_15807);
(_f_legWalkAngle_15727 = 2.0);
(_legWalkAngle_has_returned_15728 = false);
(_legWalkAngle_return_value_15729 = (sin((((_edWalk_1 * 3.141) * 6.0) * _f_legWalkAngle_15727)) * 0.2));
(_legWalkAngle_has_returned_15728 = true);
(_legWalkAngle_return_value_inlined_60_15808 = _legWalkAngle_return_value_15729);
(_a_rot_15714 = (0.1 * ((((-_edDown_1) + _legWalkAngle_return_value_inlined_60_15808) + smoothstep(0.0, 1.0, clamp(((_stretch_1 - 0.5) * 6.0), 0.0, 1.0))) - 1.0)));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_61_15809 = _rot_return_value_15716);
(_p_ed209_15724.yz = mul(_p_ed209_15724.yz, transpose(_rot_return_value_inlined_61_15809)));
(_a_rot_15714 = (_edTwist_1 * 0.2));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_62_15810 = _rot_return_value_15716);
(_p_ed209_15724.xz = mul(_p_ed209_15724.xz, transpose(_rot_return_value_inlined_62_15810)));
(_p_headLower_15811 = _p_ed209_15724);
(_headLower_has_returned_15812 = false);
(_op_headLower_15814 = _p_headLower_15811);
(_p_headVisor_15815 = (_p_headLower_15811 * float3(0.94999999, -1.4, 0.94999999)));
(_h_headVisor_15816 = 1.0);
(_bump_headVisor_15817 = 0.0);
(_headVisor_has_returned_15818 = false);
(_bump_headVisor_15817 *= ((sin((_p_headVisor_15815.x * 150.0)) * sin((_p_headVisor_15815.y * 150.0))) * 0.0020000001));
(_p_sdBox_15696 = _p_headVisor_15815);
(_b_sdBox_15697 = vec3_ctor_int_int(1, _h_headVisor_15816, 2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_3_15821 = _sdBox_return_value_15699);
(_result_headVisor_15820._d = _sdBox_return_value_inlined_3_15821);
(_p_headSphere_15822 = _p_headVisor_15815);
(_headSphere_has_returned_15823 = false);
(_headSphere_return_value_15824 = ((length((_p_headSphere_15822 / float3(1.0, 0.80000001, 1.0))) - 1.0) * 0.80000001));
(_headSphere_has_returned_15823 = true);
(_headSphere_return_value_inlined_4_15825 = _headSphere_return_value_15824);
(_result_headVisor_15820._d = (max(lerp(_result_headVisor_15820._d, _headSphere_return_value_inlined_4_15825, 0.56999999), (-_p_headVisor_15815.y)) - _bump_headVisor_15817));
(_result_headVisor_15820._mat = float3(0.050000001, 0.050000001, 0.050000001));
(_result_headVisor_15820._specPower = 30.0);
(_headVisor_return_value_15819 = _result_headVisor_15820);
(_headVisor_has_returned_15818 = true);
(_headVisor_return_value_inlined_5_15826 = _headVisor_return_value_15819);
(_r_headLower_15827 = _headVisor_return_value_inlined_5_15826);
(_p_headVisor_15815 = ((_p_headLower_15811 + float3(0.0, 0.0099999998, 0.0)) * float3(0.94999999, 0.94999999, 0.94999999)));
(_h_headVisor_15816 = 1.0);
(_bump_headVisor_15817 = 0.0);
(_headVisor_has_returned_15818 = false);
(_bump_headVisor_15817 *= ((sin((_p_headVisor_15815.x * 150.0)) * sin((_p_headVisor_15815.y * 150.0))) * 0.0020000001));
(_p_sdBox_15696 = _p_headVisor_15815);
(_b_sdBox_15697 = vec3_ctor_int_int(1, _h_headVisor_15816, 2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_3_15821 = _sdBox_return_value_15699);
(_result_headVisor_15820._d = _sdBox_return_value_inlined_3_15821);
(_p_headSphere_15822 = _p_headVisor_15815);
(_headSphere_has_returned_15823 = false);
(_headSphere_return_value_15824 = ((length((_p_headSphere_15822 / float3(1.0, 0.80000001, 1.0))) - 1.0) * 0.80000001));
(_headSphere_has_returned_15823 = true);
(_headSphere_return_value_inlined_4_15825 = _headSphere_return_value_15824);
(_result_headVisor_15820._d = (max(lerp(_result_headVisor_15820._d, _headSphere_return_value_inlined_4_15825, 0.56999999), (-_p_headVisor_15815.y)) - _bump_headVisor_15817));
(_result_headVisor_15820._mat = float3(0.050000001, 0.050000001, 0.050000001));
(_result_headVisor_15820._specPower = 30.0);
(_headVisor_return_value_15819 = _result_headVisor_15820);
(_headVisor_has_returned_15818 = true);
(_headVisor_return_value_inlined_6_15828 = _headVisor_return_value_15819);
(_r_headLower_15827._d = min(_r_headLower_15827._d, max(max(_headVisor_return_value_inlined_6_15828._d, (_p_headLower_15811.y - 0.34999999)), (((_p_headLower_15811.y * 0.625) - _p_headLower_15811.z) - 0.66000003))));
(_a_rot_15714 = ((0.075000003 * (_gunsUp_1 - 1.0)) * sign(_p_headLower_15811.x)));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_7_15829 = _rot_return_value_15716);
(_p_headLower_15811.xy = mul(_p_headLower_15811.xy, transpose(_rot_return_value_inlined_7_15829)));
(_p_headLower_15811.x = (abs(_p_headLower_15811.x) - 1.33));
(_p_headLower_15811.y -= (0.1 - (_p_headLower_15811.x * 0.1)));
(_p_sdBox_15696 = _p_headLower_15811);
(_b_sdBox_15697 = vec3_ctor(0.40000001, (0.059999999 * (1.0 - _p_headLower_15811.x)), (0.30000001 - (_p_headLower_15811.x * 0.2))));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_8_15830 = _sdBox_return_value_15699);
(_r_headLower_15827._d = min(_r_headLower_15827._d, _sdBox_return_value_inlined_8_15830));
(_p_headLower_15811 = _op_headLower_15814);
(_p_headLower_15811.y = (abs((abs((_p_headLower_15811.y + 0.147)) - 0.055599999)) - 0.027799999));
(_p_sdBox_15696 = (_p_headLower_15811 + float3(0.0, 0.0, 1.5)));
(_b_sdBox_15697 = vec3_ctor(lerp(0.25, 0.55000001, (-_op_headLower_15814.y)), 0.015, 0.1));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_9_15831 = _sdBox_return_value_15699);
(_r_headLower_15827._d = max(_r_headLower_15827._d, (-_sdBox_return_value_inlined_9_15831)));
(_p_headLower_15811 = _op_headLower_15814);
(_p_headLower_15811.y = (abs((_p_headLower_15811.y + 0.16)) - 0.059999999));
(_p_headLower_15811.z -= -1.1);
(_p_sdCappedCylinder_15787 = _p_headLower_15811.xzy);
(_h_sdCappedCylinder_15788 = 1.0);
(_r_sdCappedCylinder_15789 = 0.029999999);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_10_15832 = _sdCappedCylinder_return_value_15791);
(_p_sdCappedCylinder_15787 = _p_headLower_15811.xzy);
(_h_sdCappedCylinder_15788 = 0.55000001);
(_r_sdCappedCylinder_15789 = 1.0);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_11_15833 = _sdCappedCylinder_return_value_15791);
(_r_headLower_15827._d = max(_r_headLower_15827._d, (-max(max(_sdCappedCylinder_return_value_inlined_10_15832, (-_sdCappedCylinder_return_value_inlined_11_15833)), (_p_headLower_15811.z + 0.2)))));
(_mat_setBodyMaterial_15736 = _r_headLower_15827);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_headLower_15827 = _mat_setBodyMaterial_15736);
(_headLower_return_value_15813 = _r_headLower_15827);
(_headLower_has_returned_15812 = true);
(_headLower_return_value_inlined_63_15834 = _headLower_return_value_15813);
(_a_minResult_15803 = _r_ed209_15772);
(_b_minResult_15804 = _headLower_return_value_inlined_63_15834);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_64_15835 = _minResult_return_value_15806);
(_p_headVisor_15815 = _p_ed209_15724);
(_h_headVisor_15816 = 0.80000001);
(_bump_headVisor_15817 = 1.0);
(_headVisor_has_returned_15818 = false);
(_bump_headVisor_15817 *= ((sin((_p_headVisor_15815.x * 150.0)) * sin((_p_headVisor_15815.y * 150.0))) * 0.0020000001));
(_p_sdBox_15696 = _p_headVisor_15815);
(_b_sdBox_15697 = vec3_ctor_int_int(1, _h_headVisor_15816, 2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_3_15821 = _sdBox_return_value_15699);
(_result_headVisor_15820._d = _sdBox_return_value_inlined_3_15821);
(_p_headSphere_15822 = _p_headVisor_15815);
(_headSphere_has_returned_15823 = false);
(_headSphere_return_value_15824 = ((length((_p_headSphere_15822 / float3(1.0, 0.80000001, 1.0))) - 1.0) * 0.80000001));
(_headSphere_has_returned_15823 = true);
(_headSphere_return_value_inlined_4_15825 = _headSphere_return_value_15824);
(_result_headVisor_15820._d = (max(lerp(_result_headVisor_15820._d, _headSphere_return_value_inlined_4_15825, 0.56999999), (-_p_headVisor_15815.y)) - _bump_headVisor_15817));
(_result_headVisor_15820._mat = float3(0.050000001, 0.050000001, 0.050000001));
(_result_headVisor_15820._specPower = 30.0);
(_headVisor_return_value_15819 = _result_headVisor_15820);
(_headVisor_has_returned_15818 = true);
(_headVisor_return_value_inlined_65_15836 = _headVisor_return_value_15819);
(_a_minResult_15803 = _minResult_return_value_inlined_64_15835);
(_b_minResult_15804 = _headVisor_return_value_inlined_65_15836);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_66_15837 = _minResult_return_value_15806);
(_p_arms_15838 = _p_ed209_15724);
(_arms_has_returned_15839 = false);
(_mat_setBodyMaterial_15736 = _r_arms_15842);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_arms_15842 = _mat_setBodyMaterial_15736);
(_p_arms_15838.x = abs(_p_arms_15838.x));
(_p_arms_15838.yz += float2(0.23999999, 0.0));
(_a_rot_15714 = (0.15000001 * (_gunsUp_1 - 1.0)));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_23_15843 = _rot_return_value_15716);
(_p_arms_15838.xy = mul(_p_arms_15838.xy, transpose(_rot_return_value_inlined_23_15843)));
(_p_sdCapsule_15844 = _p_arms_15838);
(_a_sdCapsule_15845 = float3(0.0, 0.0, 0.0));
(_b_sdCapsule_15846 = float3(1.5, 0.0, 0.0));
(_r_sdCapsule_15847 = 0.2);
(_sdCapsule_has_returned_15848 = false);
(_pa_sdCapsule_15850 = (_p_sdCapsule_15844 - _a_sdCapsule_15845));
(_ba_sdCapsule_15851 = (_b_sdCapsule_15846 - _a_sdCapsule_15845));
(_sdCapsule_return_value_15849 = (length((_pa_sdCapsule_15850 - (_ba_sdCapsule_15851 * clamp((dot(_pa_sdCapsule_15850, _ba_sdCapsule_15851) / dot(_ba_sdCapsule_15851, _ba_sdCapsule_15851)), 0.0, 1.0)))) - _r_sdCapsule_15847));
(_sdCapsule_has_returned_15848 = true);
(_sdCapsule_return_value_inlined_24_15852 = _sdCapsule_return_value_15849);
(_p_sdCapsule_15844 = _p_arms_15838);
(_a_sdCapsule_15845 = float3(1.5, 0.0, 0.0));
(_b_sdCapsule_15846 = float3(1.5, 0.0, -0.30000001));
(_r_sdCapsule_15847 = 0.2);
(_sdCapsule_has_returned_15848 = false);
(_pa_sdCapsule_15850 = (_p_sdCapsule_15844 - _a_sdCapsule_15845));
(_ba_sdCapsule_15851 = (_b_sdCapsule_15846 - _a_sdCapsule_15845));
(_sdCapsule_return_value_15849 = (length((_pa_sdCapsule_15850 - (_ba_sdCapsule_15851 * clamp((dot(_pa_sdCapsule_15850, _ba_sdCapsule_15851) / dot(_ba_sdCapsule_15851, _ba_sdCapsule_15851)), 0.0, 1.0)))) - _r_sdCapsule_15847));
(_sdCapsule_has_returned_15848 = true);
(_sdCapsule_return_value_inlined_25_15853 = _sdCapsule_return_value_15849);
(_r_arms_15842._d = min(_sdCapsule_return_value_inlined_24_15852, _sdCapsule_return_value_inlined_25_15853));
(_p_arms_15838 -= float3(1.5, 0.0, -0.30000001));
(_p_arms_15838.z -= (_gunsForward_1 * 0.15000001));
(_p_gunPod_15854 = _p_arms_15838);
(_gunPod_has_returned_15855 = false);
(_mat_setBodyMaterial_15736 = _r_gunPod_15857);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_gunPod_15857 = _mat_setBodyMaterial_15736);
(_p_gunPod_15854.yz += float2(0.1, 0.44999999));
(_pp_gunPod_15858 = _p_gunPod_15854);
(_pp_gunPod_15858.z = (abs(_pp_gunPod_15858.z) - 0.5));
(_p_sdCappedCone_15859 = _pp_gunPod_15858);
(_a_sdCappedCone_15860 = float3(0.0, 0.0, 0.0));
(_b_sdCappedCone_15861 = float3(0.0, 0.0, -0.1));
(_ra_sdCappedCone_15862 = 0.25);
(_rb_sdCappedCone_15863 = 0.34999999);
(_sdCappedCone_has_returned_15864 = false);
(_rba_sdCappedCone_15866 = (_rb_sdCappedCone_15863 - _ra_sdCappedCone_15862));
(_baba_sdCappedCone_15867 = dot((_b_sdCappedCone_15861 - _a_sdCappedCone_15860), (_b_sdCappedCone_15861 - _a_sdCappedCone_15860)));
(_papa_sdCappedCone_15868 = dot((_p_sdCappedCone_15859 - _a_sdCappedCone_15860), (_p_sdCappedCone_15859 - _a_sdCappedCone_15860)));
(_paba_sdCappedCone_15869 = (dot((_p_sdCappedCone_15859 - _a_sdCappedCone_15860), (_b_sdCappedCone_15861 - _a_sdCappedCone_15860)) / _baba_sdCappedCone_15867));
(_x_sdCappedCone_15870 = sqrt((_papa_sdCappedCone_15868 - ((_paba_sdCappedCone_15869 * _paba_sdCappedCone_15869) * _baba_sdCappedCone_15867))));
float s1788 = {0};
if ((_paba_sdCappedCone_15869 < 0.5))
{
(s1788 = _ra_sdCappedCone_15862);
}
else
{
(s1788 = _rb_sdCappedCone_15863);
}
(_cax_sdCappedCone_15871 = max(0.0, (_x_sdCappedCone_15870 - s1788)));
(_cay_sdCappedCone_15872 = (abs((_paba_sdCappedCone_15869 - 0.5)) - 0.5));
(_f_sdCappedCone_15873 = clamp((((_rba_sdCappedCone_15866 * (_x_sdCappedCone_15870 - _ra_sdCappedCone_15862)) + (_paba_sdCappedCone_15869 * _baba_sdCappedCone_15867)) / ((_rba_sdCappedCone_15866 * _rba_sdCappedCone_15866) + _baba_sdCappedCone_15867)), 0.0, 1.0));
(_cbx_sdCappedCone_15874 = ((_x_sdCappedCone_15870 - _ra_sdCappedCone_15862) - (_f_sdCappedCone_15873 * _rba_sdCappedCone_15866)));
(_cby_sdCappedCone_15875 = (_paba_sdCappedCone_15869 - _f_sdCappedCone_15873));
float s1789 = {0};
if (((_cbx_sdCappedCone_15874 < 0.0) && (_cay_sdCappedCone_15872 < 0.0)))
{
(s1789 = -1.0);
}
else
{
(s1789 = 1.0);
}
(_sdCappedCone_return_value_15865 = (s1789 * sqrt(min(((_cax_sdCappedCone_15871 * _cax_sdCappedCone_15871) + ((_cay_sdCappedCone_15872 * _cay_sdCappedCone_15872) * _baba_sdCappedCone_15867)), ((_cbx_sdCappedCone_15874 * _cbx_sdCappedCone_15874) + ((_cby_sdCappedCone_15875 * _cby_sdCappedCone_15875) * _baba_sdCappedCone_15867))))));
(_sdCappedCone_has_returned_15864 = true);
(_sdCappedCone_return_value_inlined_12_15876 = _sdCappedCone_return_value_15865);
(_r_gunPod_15857._d = _sdCappedCone_return_value_inlined_12_15876);
(_p_sdCappedCylinder_15787 = _p_gunPod_15854);
(_h_sdCappedCylinder_15788 = 0.34999999);
(_r_sdCappedCylinder_15789 = 0.40000001);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_13_15877 = _sdCappedCylinder_return_value_15791);
(_r_gunPod_15857._d = min(_r_gunPod_15857._d, _sdCappedCylinder_return_value_inlined_13_15877));
(_pp_gunPod_15858 = vec3_ctor(_p_gunPod_15854.x, (0.28 - _p_gunPod_15854.y), _p_gunPod_15854.z));
(_p_sdTriPrism_15878 = _pp_gunPod_15858);
(_h_sdTriPrism_15879 = float2(0.1, 0.5));
(_sdTriPrism_has_returned_15880 = false);
(_q_sdTriPrism_15882 = abs(_p_sdTriPrism_15878));
(_sdTriPrism_return_value_15881 = max((_q_sdTriPrism_15882.z - _h_sdTriPrism_15879.y), (max(((_q_sdTriPrism_15882.x * 0.86602497) + (_p_sdTriPrism_15878.y * 0.5)), (-_p_sdTriPrism_15878.y)) - (_h_sdTriPrism_15879.x * 0.5))));
(_sdTriPrism_has_returned_15880 = true);
(_sdTriPrism_return_value_inlined_14_15883 = _sdTriPrism_return_value_15881);
(_r_gunPod_15857._d = min(_r_gunPod_15857._d, _sdTriPrism_return_value_inlined_14_15883));
(_pp_gunPod_15858 = _p_gunPod_15854);
(_pp_gunPod_15858.x = abs(_p_gunPod_15854.x));
(_a_rot_15714 = 0.78525001);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_15_15884 = _rot_return_value_15716);
(_pp_gunPod_15858.xy = mul(_pp_gunPod_15858.xy, transpose(_rot_return_value_inlined_15_15884)));
(_bump_gunPod_15886 = (sign(sin((_pp_gunPod_15858.z * 33.299999))) * 0.003));
(_p_sdBox_15696 = _pp_gunPod_15858);
(_b_sdBox_15697 = vec3_ctor((0.1 - _bump_gunPod_15886), (0.38 - _bump_gunPod_15886), 0.34));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_16_15887 = _sdBox_return_value_15699);
(_d_gunPod_15888 = (_sdBox_return_value_inlined_16_15887 - 0.02));
(_pp_gunPod_15858 = (_p_gunPod_15854 - float3(0.0, 0.0, -0.60000002)));
(_pp_gunPod_15858.x = (abs(_pp_gunPod_15858.x) - 0.1));
(_p_sdCappedCylinder_15787 = _pp_gunPod_15858);
(_h_sdCappedCylinder_15788 = 0.059999999);
(_r_sdCappedCylinder_15789 = 0.15000001);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_17_15889 = _sdCappedCylinder_return_value_15791);
(_p_sdCappedCylinder_15787 = (_pp_gunPod_15858 + float3(0.0, 0.12, -0.050000001)));
(_h_sdCappedCylinder_15788 = 0.059999999);
(_r_sdCappedCylinder_15789 = 0.050000001);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_18_15890 = _sdCappedCylinder_return_value_15791);
(_p_sdBox_15696 = (_p_gunPod_15854 + float3(0.0, 0.0, 0.54000002)));
(_b_sdBox_15697 = float3(0.1, 0.059999999, 0.039999999));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_19_15891 = _sdBox_return_value_15699);
(_d_gunPod_15888 = min(min(min(_d_gunPod_15888, _sdCappedCylinder_return_value_inlined_17_15889), _sdCappedCylinder_return_value_inlined_18_15890), _sdBox_return_value_inlined_19_15891));
if ((_d_gunPod_15888 < _r_gunPod_15857._d))
{
(_p_sdCappedCylinder_15787 = (_pp_gunPod_15858 + float3(0.0, 0.0, 0.1)));
(_h_sdCappedCylinder_15788 = 0.029999999);
(_r_sdCappedCylinder_15789 = 0.2);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_20_15892 = _sdCappedCylinder_return_value_15791);
(_d_gunPod_15888 = max(_d_gunPod_15888, (-_sdCappedCylinder_return_value_inlined_20_15892)));
(_r_gunPod_15857._d = _d_gunPod_15888);
(_r_gunPod_15857._mat = float3(0.02, 0.02, 0.02));
}
(_fireShock_has_returned_15662 = false);
(_fireShock_return_value_15663 = abs(sin((_edShoot_1 * 78.537498))));
(_fireShock_has_returned_15662 = true);
(_fireShock_return_value_inlined_21_15893 = _fireShock_return_value_15663);
(_fs_gunPod_15885 = _fireShock_return_value_inlined_21_15893);
if ((_fs_gunPod_15885 > 0.5))
{
(_p_sdCappedCylinder_15787 = _pp_gunPod_15858);
(_h_sdCappedCylinder_15788 = (0.0099999998 + (_pp_gunPod_15858.z * 0.050000001)));
(_r_sdCappedCylinder_15789 = ((frac((_fs_gunPod_15885 * 3322.4231)) * 0.5) + 0.89999998));
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_22_15894 = _sdCappedCylinder_return_value_15791);
(_d_gunPod_15888 = _sdCappedCylinder_return_value_inlined_22_15894);
if ((_d_gunPod_15888 < _r_gunPod_15857._d))
{
(_r_gunPod_15857._d = _d_gunPod_15888);
(_r_gunPod_15857._mat = float3(1.0, 1.0, 1.0));
(_glow_1 += (0.1 / (0.0099999998 + ((_d_gunPod_15888 * _d_gunPod_15888) * 400.0))));
}
}
(_gunPod_return_value_15856 = _r_gunPod_15857);
(_gunPod_has_returned_15855 = true);
(_gunPod_return_value_inlined_26_15895 = _gunPod_return_value_15856);
(_a_minResult_15803 = _r_arms_15842);
(_b_minResult_15804 = _gunPod_return_value_inlined_26_15895);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_27_15896 = _minResult_return_value_15806);
(_arms_return_value_15840 = _minResult_return_value_inlined_27_15896);
(_arms_has_returned_15839 = true);
(_arms_return_value_inlined_67_15897 = _arms_return_value_15840);
(_a_minResult_15803 = _minResult_return_value_inlined_66_15837);
(_b_minResult_15804 = _arms_return_value_inlined_67_15897);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_68_15898 = _minResult_return_value_15806);
(_ed209_return_value_15726 = _minResult_return_value_inlined_68_15898);
(_ed209_has_returned_15725 = true);
(_ed209_return_value_inlined_79_15899 = _ed209_return_value_15726);
(_a_minResult_15803 = _room_return_value_inlined_78_15723);
(_b_minResult_15804 = _ed209_return_value_inlined_79_15899);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_80_15900 = _minResult_return_value_15806);
(_r_map_15901 = _minResult_return_value_inlined_80_15900);
(_gnd_map_15902 = length((_p_map_15683.y + 3.0)));
if ((_gnd_map_15902 < _r_map_15901._d))
{
(_r_map_15901._d = _gnd_map_15902);
(_r_map_15901._mat = float3(0.1, 0.1, 0.1));
}
(_map_return_value_15685 = _r_map_15901);
(_map_has_returned_15684 = true);
(_map_return_value_inlined_83_15918 = _map_return_value_15685);
(_p_map_15683 = (_p_calcNormal_15911 + _e_calcNormal_15916.yxy));
(_map_has_returned_15684 = false);
(_p_room_15686 = _p_map_15683);
(_room_has_returned_15687 = false);
(_r_room_15690._mat = float3(0.40000001, 0.40000001, 0.40000001));
(_r_room_15690._specPower = 10000000.0);
(_xy_room_15691 = (_p_room_15686.xy - float2(0.0, 2.0)));
(_p_room_15686.x = abs(_p_room_15686.x));
(_p_room_15686.yz += float2(0.5, -3.4000001));
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = float3(2.8, 2.5999999, 1.1));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_69_15701 = _sdBox_return_value_15699);
(_doorHole_room_15702 = _sdBox_return_value_inlined_69_15701);
(_backWall_room_15703 = length((_p_room_15686.z - 8.0)));
(_r_room_15690._d = min(_backWall_room_15703, max(length(_p_room_15686.z), ((-_doorHole_room_15702) + 0.1))));
if ((_r_room_15690._d == _backWall_room_15703))
{
(_p_sdOctogon_15704 = _xy_room_15691);
(_r_sdOctogon_15705 = 2.5999999);
(_sdOctogon_has_returned_15706 = false);
(_p_sdOctogon_15704 = abs(_p_sdOctogon_15704));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(-0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(-0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= vec2_ctor(clamp(_p_sdOctogon_15704.x, (-0.41421357 * _r_sdOctogon_15705), (0.41421357 * _r_sdOctogon_15705)), _r_sdOctogon_15705));
(_sdOctogon_return_value_15707 = (length(_p_sdOctogon_15704) * sign(_p_sdOctogon_15704.y)));
(_sdOctogon_has_returned_15706 = true);
(_sdOctogon_return_value_inlined_70_15709 = _sdOctogon_return_value_15707);
(_p_sdOctogon_15704 = _xy_room_15691);
(_r_sdOctogon_15705 = 1.9);
(_sdOctogon_has_returned_15706 = false);
(_p_sdOctogon_15704 = abs(_p_sdOctogon_15704));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(-0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(-0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= vec2_ctor(clamp(_p_sdOctogon_15704.x, (-0.41421357 * _r_sdOctogon_15705), (0.41421357 * _r_sdOctogon_15705)), _r_sdOctogon_15705));
(_sdOctogon_return_value_15707 = (length(_p_sdOctogon_15704) * sign(_p_sdOctogon_15704.y)));
(_sdOctogon_has_returned_15706 = true);
(_sdOctogon_return_value_inlined_71_15710 = _sdOctogon_return_value_15707);
(_ocp_room_15711 = min(abs(_sdOctogon_return_value_inlined_70_15709), abs(_sdOctogon_return_value_inlined_71_15710)));
(_p_sdOctogon_15704 = _xy_room_15691);
(_r_sdOctogon_15705 = 1.2);
(_sdOctogon_has_returned_15706 = false);
(_p_sdOctogon_15704 = abs(_p_sdOctogon_15704));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(-0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(-0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= vec2_ctor(clamp(_p_sdOctogon_15704.x, (-0.41421357 * _r_sdOctogon_15705), (0.41421357 * _r_sdOctogon_15705)), _r_sdOctogon_15705));
(_sdOctogon_return_value_15707 = (length(_p_sdOctogon_15704) * sign(_p_sdOctogon_15704.y)));
(_sdOctogon_has_returned_15706 = true);
(_sdOctogon_return_value_inlined_72_15712 = _sdOctogon_return_value_15707);
(_ocp_room_15711 = min(max(_ocp_room_15711, min((0.69999999 - abs((_xy_room_15691.x + 1.2))), (-_xy_room_15691.y))), max(abs(_sdOctogon_return_value_inlined_72_15712), min(_xy_room_15691.x, (0.69999999 - abs(_xy_room_15691.y))))));
if ((_ocp_room_15711 < 0.30000001))
{
(_r_room_15690._mat = float3(0.38999999, 0.56999999, 0.70999998));
}
}
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = float3(3.2, 3.0, 0.2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_73_15713 = _sdBox_return_value_15699);
(_doorFrame_room_15692 = max(_sdBox_return_value_inlined_73_15713, (-_doorHole_room_15702)));
(_doorWidth_room_15693 = 1.4);
(_p_room_15686.x -= 2.8);
(_a_rot_15714 = (_doorOpen_1 * 2.0999999));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_74_15719 = _rot_return_value_15716);
(_p_room_15686.xz = mul(_p_room_15686.xz, transpose(_rot_return_value_inlined_74_15719)));
(_p_room_15686.x += _doorWidth_room_15693);
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = vec3_ctor(_doorWidth_room_15693, float2(2.5999999, 0.1)));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_75_15720 = _sdBox_return_value_15699);
(_door_room_15694 = _sdBox_return_value_inlined_75_15720);
(_p_room_15686 = (abs(_p_room_15686) - vec3_ctor((_doorWidth_room_15693 * 0.5), 1.1, 0.14)));
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = float3(0.44999999, 0.89999998, 0.1));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_76_15721 = _sdBox_return_value_15699);
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = float3(0.34999999, 0.80000001, 1.0));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_77_15722 = _sdBox_return_value_15699);
(_d_room_15695 = min(_doorFrame_room_15692, max(_door_room_15694, (-max(_sdBox_return_value_inlined_76_15721, (-_sdBox_return_value_inlined_77_15722))))));
if ((_d_room_15695 < _r_room_15690._d))
{
(_r_room_15690._d = _d_room_15695);
(_r_room_15690._mat = float3(0.02, 0.02, 0.024));
(_r_room_15690._specPower = 10.0);
}
(_room_return_value_15688 = _r_room_15690);
(_room_has_returned_15687 = true);
(_room_return_value_inlined_78_15723 = _room_return_value_15688);
(_p_ed209_15724 = _p_map_15683);
(_ed209_has_returned_15725 = false);
(_f_legWalkAngle_15727 = 2.0);
(_legWalkAngle_has_returned_15728 = false);
(_legWalkAngle_return_value_15729 = (sin((((_edWalk_1 * 3.141) * 6.0) * _f_legWalkAngle_15727)) * 0.2));
(_legWalkAngle_has_returned_15728 = true);
(_legWalkAngle_return_value_inlined_54_15730 = _legWalkAngle_return_value_15729);
(_edZ_has_returned_15633 = false);
(_edZ_return_value_15634 = lerp(5.0, -2.0, _edWalk_1));
(_edZ_has_returned_15633 = true);
(_edZ_return_value_inlined_55_15731 = _edZ_return_value_15634);
(_p_ed209_15724.yz += vec2_ctor(((_legWalkAngle_return_value_inlined_54_15730 * 0.2) + 0.1), (-_edZ_return_value_inlined_55_15731)));
(_p_legs_15732 = _p_ed209_15724);
(_legs_has_returned_15733 = false);
(_mat_setBodyMaterial_15736 = _r_legs_15735);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_legs_15735 = _mat_setBodyMaterial_15736);
(_f_legWalkAngle_15727 = 1.0);
(_legWalkAngle_has_returned_15728 = false);
(_legWalkAngle_return_value_15729 = (sin((((_edWalk_1 * 3.141) * 6.0) * _f_legWalkAngle_15727)) * 0.2));
(_legWalkAngle_has_returned_15728 = true);
(_legWalkAngle_return_value_inlined_45_15738 = _legWalkAngle_return_value_15729);
(_legAngle_legs_15739 = _legWalkAngle_return_value_inlined_45_15738);
(_p_legs_15732.z += 0.27000001);
(_a_rot_15714 = (_legAngle_legs_15739 * sign(_p_legs_15732.x)));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_46_15740 = _rot_return_value_15716);
(_p_legs_15732.yz = mul(_p_legs_15732.yz, transpose(_rot_return_value_inlined_46_15740)));
(_p_legs_15732.z -= 0.27000001);
(_p_legs_15732.y += 0.64999998);
(_a_rot_15714 = -0.2);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_47_15741 = _rot_return_value_15716);
(_p_legs_15732.yz = mul(_p_legs_15732.yz, transpose(_rot_return_value_inlined_47_15741)));
(_a_rot_15714 = (_legAngle_legs_15739 * 0.30000001));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_48_15742 = _rot_return_value_15716);
(_p_legs_15732.xy = mul(_p_legs_15732.xy, transpose(_rot_return_value_inlined_48_15742)));
(_pp_legs_15744 = _p_legs_15732);
(_pp_legs_15744.x = abs(_pp_legs_15744.x));
(_pp_legs_15744.y += 0.47999999);
(_a_rot_15714 = -0.58525002);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_49_15745 = _rot_return_value_15716);
(_pp_legs_15744.yz = mul(_pp_legs_15744.yz, transpose(_rot_return_value_inlined_49_15745)));
(_pp_legs_15744.x -= 0.98000002);
(_cp_legs_15743 = _pp_legs_15744);
(_p_legs_15732 = _pp_legs_15744);
(_pp_legs_15744.xz = (abs(_pp_legs_15744.xz) - float2(0.12, 0.25)));
(_p_legs_15732.y += 0.68000001);
(_p_legs_15732.xy = (abs(_p_legs_15732.xy) - 0.12));
(_p_sdBox_15696 = _p_legs_15732);
(_b_sdBox_15697 = float3(0.07, 0.050000001, 1.2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_50_15746 = _sdBox_return_value_15699);
(_silver_legs_15737 = _sdBox_return_value_inlined_50_15746);
(_cp_legs_15743 -= float3(0.0, -0.69999999, 0.0));
(_p_sdBox_15696 = (_cp_legs_15743 - float3(0.0, 0.0, 1.15)));
(_b_sdBox_15697 = float3(0.17, 0.17, 0.07));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_51_15747 = _sdBox_return_value_15699);
(_r_legs_15735._d = (_sdBox_return_value_inlined_51_15747 - 0.039999999));
(_cp_legs_15743.z++);
(_p_sdChamferedCube_15748 = _cp_legs_15743.xzy);
(_r_sdChamferedCube_15749 = vec2_ctor((0.28 - (sign((abs(_cp_legs_15743.z) - 0.30000001)) * 0.0099999998)), 0.5).xyx);
(_c_sdChamferedCube_15750 = 0.18000001);
(_sdChamferedCube_has_returned_15751 = false);
(_p_sdBox_15696 = _p_sdChamferedCube_15748);
(_b_sdBox_15697 = _r_sdChamferedCube_15749);
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_0_15753 = _sdBox_return_value_15699);
(_cube_sdChamferedCube_15754 = _sdBox_return_value_inlined_0_15753);
(_a_rot_15714 = 0.78525001);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_1_15755 = _rot_return_value_15716);
(_p_sdChamferedCube_15748.xz = mul(_p_sdChamferedCube_15748.xz, transpose(_rot_return_value_inlined_1_15755)));
(_r_sdChamferedCube_15749.xz *= (((-_c_sdChamferedCube_15750) / 1.41) + 1.41));
(_p_sdBox_15696 = _p_sdChamferedCube_15748);
(_b_sdBox_15697 = _r_sdChamferedCube_15749);
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_2_15756 = _sdBox_return_value_15699);
(_sdChamferedCube_return_value_15752 = max(_cube_sdChamferedCube_15754, _sdBox_return_value_inlined_2_15756));
(_sdChamferedCube_has_returned_15751 = true);
(_sdChamferedCube_return_value_inlined_52_15757 = _sdChamferedCube_return_value_15752);
(_r_legs_15735._d = min(_r_legs_15735._d, _sdChamferedCube_return_value_inlined_52_15757));
(_p_foot_15758 = _cp_legs_15743);
(_foot_has_returned_15759 = false);
(_p_foot_15758.z += 0.80000001);
(_a_rot_15714 = 0.86000001);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_29_15761 = _rot_return_value_15716);
(_p_foot_15758.yz = mul(_p_foot_15758.yz, transpose(_rot_return_value_inlined_29_15761)));
(_p_toe_15762 = _p_foot_15758);
(_toe_has_returned_15763 = false);
(_p_toe_15762.yz += float2(0.1, 0.31999999));
(_p_sdBox_15696 = _p_toe_15762);
(_b_sdBox_15697 = vec3_ctor(((0.30000001 + (0.2 * (_p_toe_15762.z - 0.18000001))) - (_p_toe_15762.y * 0.228)), (0.30000001 + (0.2 * cos(((_p_toe_15762.z - 0.18000001) * 3.6900001)))), 0.34999999));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_28_15765 = _sdBox_return_value_15699);
(_toe_return_value_15764 = max(_sdBox_return_value_inlined_28_15765, (0.1 - _p_toe_15762.y)));
(_toe_has_returned_15763 = true);
(_toe_return_value_inlined_30_15766 = _toe_return_value_15764);
(_d_foot_15767 = _toe_return_value_inlined_30_15766);
(_a_rot_15714 = 1.5700001);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_31_15768 = _rot_return_value_15716);
(_p_foot_15758.xz = mul(_p_foot_15758.xz, transpose(_rot_return_value_inlined_31_15768)));
(_p_foot_15758.x -= 0.43000001);
(_p_foot_15758.z = (0.25 - abs(_p_foot_15758.z)));
(_p_toe_15762 = _p_foot_15758);
(_toe_has_returned_15763 = false);
(_p_toe_15762.yz += float2(0.1, 0.31999999));
(_p_sdBox_15696 = _p_toe_15762);
(_b_sdBox_15697 = vec3_ctor(((0.30000001 + (0.2 * (_p_toe_15762.z - 0.18000001))) - (_p_toe_15762.y * 0.228)), (0.30000001 + (0.2 * cos(((_p_toe_15762.z - 0.18000001) * 3.6900001)))), 0.34999999));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_28_15765 = _sdBox_return_value_15699);
(_toe_return_value_15764 = max(_sdBox_return_value_inlined_28_15765, (0.1 - _p_toe_15762.y)));
(_toe_has_returned_15763 = true);
(_toe_return_value_inlined_32_15769 = _toe_return_value_15764);
(_foot_return_value_15760 = min(_d_foot_15767, _toe_return_value_inlined_32_15769));
(_foot_has_returned_15759 = true);
(_foot_return_value_inlined_53_15770 = _foot_return_value_15760);
(_r_legs_15735._d = min(_r_legs_15735._d, _foot_return_value_inlined_53_15770));
if ((_silver_legs_15737 < _r_legs_15735._d))
{
(_r_legs_15735._d = _silver_legs_15737);
(_r_legs_15735._mat = float3(0.80000001, 0.80000001, 0.80000001));
}
(_legs_return_value_15734 = _r_legs_15735);
(_legs_has_returned_15733 = true);
(_legs_return_value_inlined_56_15771 = _legs_return_value_15734);
(_r_ed209_15772 = _legs_return_value_inlined_56_15771);
(_f_ed209_15773 = min((_stretch_1 * 2.0), 1.0));
float s178a = {0};
if ((_f_ed209_15773 < 0.5))
{
(s178a = smoothstep(0.0, 0.5, _f_ed209_15773));
}
else
{
(s178a = (1.0 - (smoothstep(0.5, 1.0, _f_ed209_15773) * 0.2)));
}
(_slide_ed209_15774 = s178a);
(_p_ed209_15724.yz -= (_slide_ed209_15774 * 0.5));
(_gunsUp_1 = smoothstep(0.0, 1.0, clamp(((_stretch_1 - 0.66000003) * 6.0), 0.0, 1.0)));
(_fireShock_has_returned_15662 = false);
(_fireShock_return_value_15663 = abs(sin((_edShoot_1 * 78.537498))));
(_fireShock_has_returned_15662 = true);
(_fireShock_return_value_inlined_57_15775 = _fireShock_return_value_15663);
(_gunsForward_1 = (smoothstep(0.0, 1.0, clamp(((_stretch_1 - 0.82999998) * 6.0), 0.0, 1.0)) + (_fireShock_return_value_inlined_57_15775 * 0.5)));
(_p_waist_15776 = _p_ed209_15724);
(_waist_has_returned_15777 = false);
(_mat_setBodyMaterial_15736 = _r_waist_15779);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_waist_15779 = _mat_setBodyMaterial_15736);
(_p_waist_15776.y += 0.64999998);
(_a_rot_15714 = -0.2);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_33_15780 = _rot_return_value_15716);
(_p_waist_15776.yz = mul(_p_waist_15776.yz, transpose(_rot_return_value_inlined_33_15780)));
(_f_legWalkAngle_15727 = 1.0);
(_legWalkAngle_has_returned_15728 = false);
(_legWalkAngle_return_value_15729 = (sin((((_edWalk_1 * 3.141) * 6.0) * _f_legWalkAngle_15727)) * 0.2));
(_legWalkAngle_has_returned_15728 = true);
(_legWalkAngle_return_value_inlined_34_15783 = _legWalkAngle_return_value_15729);
(_legAngle_waist_15784 = _legWalkAngle_return_value_inlined_34_15783);
(_a_rot_15714 = (_legAngle_waist_15784 * 0.30000001));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_35_15785 = _rot_return_value_15716);
(_p_waist_15776.xy = mul(_p_waist_15776.xy, transpose(_rot_return_value_inlined_35_15785)));
(_pp_waist_15786 = _p_waist_15776);
(_pp_waist_15786.y += 0.30000001);
(_p_sdCappedCylinder_15787 = _pp_waist_15786.zyx);
(_h_sdCappedCylinder_15788 = 0.5);
(_r_sdCappedCylinder_15789 = 0.5);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_36_15793 = _sdCappedCylinder_return_value_15791);
(_r_waist_15779._d = max(_sdCappedCylinder_return_value_inlined_36_15793, (_p_waist_15776.y + 0.15000001)));
(_bump_waist_15781 = (0.5 - (abs(sin((_p_waist_15776.y * 40.0))) * 0.029999999)));
(_p_sdBox_15696 = _p_waist_15776);
(_b_sdBox_15697 = vec3_ctor(_bump_waist_15781, 0.15000001, _bump_waist_15781));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_37_15794 = _sdBox_return_value_15699);
(_d_waist_15782 = _sdBox_return_value_inlined_37_15794);
(_bump_waist_15781 = (0.30000001 - (abs(sin((_p_waist_15776.x * 40.0))) * 0.029999999)));
(_pp_waist_15786.y += 0.18000001);
(_p_sdCappedCylinder_15787 = _pp_waist_15786.zyx);
(_h_sdCappedCylinder_15788 = _bump_waist_15781);
(_r_sdCappedCylinder_15789 = 0.75);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_38_15795 = _sdCappedCylinder_return_value_15791);
(_d_waist_15782 = min(_d_waist_15782, _sdCappedCylinder_return_value_inlined_38_15795));
(_pp_waist_15786.x = abs(_pp_waist_15786.x));
(_a_rot_15714 = (-0.58525002 + (_legAngle_waist_15784 * sign(_p_waist_15776.x))));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_39_15796 = _rot_return_value_15716);
(_pp_waist_15786.yz = mul(_pp_waist_15786.yz, transpose(_rot_return_value_inlined_39_15796)));
(_pp_waist_15786.x -= 0.98000002);
(_p_sdCappedCylinder_15787 = _pp_waist_15786.zyx);
(_h_sdCappedCylinder_15788 = 0.40000001);
(_r_sdCappedCylinder_15789 = 0.23999999);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_40_15797 = _sdCappedCylinder_return_value_15791);
(_r_waist_15779._d = min(_r_waist_15779._d, max(_sdCappedCylinder_return_value_inlined_40_15797, (-_pp_waist_15786.y))));
(_p_sdBox_15696 = _pp_waist_15786);
(_b_sdBox_15697 = vec3_ctor(0.23999999, 0.2, (0.14 + (0.2 * _pp_waist_15786.y))));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_41_15798 = _sdBox_return_value_15699);
(_r_waist_15779._d = min(_r_waist_15779._d, _sdBox_return_value_inlined_41_15798));
(_p_waist_15776 = _pp_waist_15786);
(_pp_waist_15786.xz = (abs(_pp_waist_15786.xz) - float2(0.12, 0.25)));
(_p_sdCappedCylinder_15787 = _pp_waist_15786.xzy);
(_h_sdCappedCylinder_15788 = 0.1);
(_r_sdCappedCylinder_15789 = 0.32499999);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_42_15799 = _sdCappedCylinder_return_value_15791);
(_p_sdCappedCylinder_15787 = _pp_waist_15786.xzy);
(_h_sdCappedCylinder_15788 = 0.050000001);
(_r_sdCappedCylinder_15789 = 0.5);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_43_15800 = _sdCappedCylinder_return_value_15791);
(_r_waist_15779._d = min(_r_waist_15779._d, max(min(_sdCappedCylinder_return_value_inlined_42_15799, _sdCappedCylinder_return_value_inlined_43_15800), _pp_waist_15786.y)));
(_p_waist_15776.y += 0.68000001);
(_p_sdBox_15696 = _p_waist_15776);
(_b_sdBox_15697 = vec3_ctor(((sign((abs(_p_waist_15776.y) - 0.039999999)) * 0.0049999999) + 0.25999999), 0.2, 0.34));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_44_15801 = _sdBox_return_value_15699);
(_r_waist_15779._d = min(_r_waist_15779._d, _sdBox_return_value_inlined_44_15801));
if ((_d_waist_15782 < _r_waist_15779._d))
{
(_r_waist_15779._d = _d_waist_15782);
(_r_waist_15779._mat = float3(0.02, 0.02, 0.02));
}
(_waist_return_value_15778 = _r_waist_15779);
(_waist_has_returned_15777 = true);
(_waist_return_value_inlined_58_15802 = _waist_return_value_15778);
(_a_minResult_15803 = _r_ed209_15772);
(_b_minResult_15804 = _waist_return_value_inlined_58_15802);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_59_15807 = _minResult_return_value_15806);
(_r_ed209_15772 = _minResult_return_value_inlined_59_15807);
(_f_legWalkAngle_15727 = 2.0);
(_legWalkAngle_has_returned_15728 = false);
(_legWalkAngle_return_value_15729 = (sin((((_edWalk_1 * 3.141) * 6.0) * _f_legWalkAngle_15727)) * 0.2));
(_legWalkAngle_has_returned_15728 = true);
(_legWalkAngle_return_value_inlined_60_15808 = _legWalkAngle_return_value_15729);
(_a_rot_15714 = (0.1 * ((((-_edDown_1) + _legWalkAngle_return_value_inlined_60_15808) + smoothstep(0.0, 1.0, clamp(((_stretch_1 - 0.5) * 6.0), 0.0, 1.0))) - 1.0)));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_61_15809 = _rot_return_value_15716);
(_p_ed209_15724.yz = mul(_p_ed209_15724.yz, transpose(_rot_return_value_inlined_61_15809)));
(_a_rot_15714 = (_edTwist_1 * 0.2));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_62_15810 = _rot_return_value_15716);
(_p_ed209_15724.xz = mul(_p_ed209_15724.xz, transpose(_rot_return_value_inlined_62_15810)));
(_p_headLower_15811 = _p_ed209_15724);
(_headLower_has_returned_15812 = false);
(_op_headLower_15814 = _p_headLower_15811);
(_p_headVisor_15815 = (_p_headLower_15811 * float3(0.94999999, -1.4, 0.94999999)));
(_h_headVisor_15816 = 1.0);
(_bump_headVisor_15817 = 0.0);
(_headVisor_has_returned_15818 = false);
(_bump_headVisor_15817 *= ((sin((_p_headVisor_15815.x * 150.0)) * sin((_p_headVisor_15815.y * 150.0))) * 0.0020000001));
(_p_sdBox_15696 = _p_headVisor_15815);
(_b_sdBox_15697 = vec3_ctor_int_int(1, _h_headVisor_15816, 2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_3_15821 = _sdBox_return_value_15699);
(_result_headVisor_15820._d = _sdBox_return_value_inlined_3_15821);
(_p_headSphere_15822 = _p_headVisor_15815);
(_headSphere_has_returned_15823 = false);
(_headSphere_return_value_15824 = ((length((_p_headSphere_15822 / float3(1.0, 0.80000001, 1.0))) - 1.0) * 0.80000001));
(_headSphere_has_returned_15823 = true);
(_headSphere_return_value_inlined_4_15825 = _headSphere_return_value_15824);
(_result_headVisor_15820._d = (max(lerp(_result_headVisor_15820._d, _headSphere_return_value_inlined_4_15825, 0.56999999), (-_p_headVisor_15815.y)) - _bump_headVisor_15817));
(_result_headVisor_15820._mat = float3(0.050000001, 0.050000001, 0.050000001));
(_result_headVisor_15820._specPower = 30.0);
(_headVisor_return_value_15819 = _result_headVisor_15820);
(_headVisor_has_returned_15818 = true);
(_headVisor_return_value_inlined_5_15826 = _headVisor_return_value_15819);
(_r_headLower_15827 = _headVisor_return_value_inlined_5_15826);
(_p_headVisor_15815 = ((_p_headLower_15811 + float3(0.0, 0.0099999998, 0.0)) * float3(0.94999999, 0.94999999, 0.94999999)));
(_h_headVisor_15816 = 1.0);
(_bump_headVisor_15817 = 0.0);
(_headVisor_has_returned_15818 = false);
(_bump_headVisor_15817 *= ((sin((_p_headVisor_15815.x * 150.0)) * sin((_p_headVisor_15815.y * 150.0))) * 0.0020000001));
(_p_sdBox_15696 = _p_headVisor_15815);
(_b_sdBox_15697 = vec3_ctor_int_int(1, _h_headVisor_15816, 2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_3_15821 = _sdBox_return_value_15699);
(_result_headVisor_15820._d = _sdBox_return_value_inlined_3_15821);
(_p_headSphere_15822 = _p_headVisor_15815);
(_headSphere_has_returned_15823 = false);
(_headSphere_return_value_15824 = ((length((_p_headSphere_15822 / float3(1.0, 0.80000001, 1.0))) - 1.0) * 0.80000001));
(_headSphere_has_returned_15823 = true);
(_headSphere_return_value_inlined_4_15825 = _headSphere_return_value_15824);
(_result_headVisor_15820._d = (max(lerp(_result_headVisor_15820._d, _headSphere_return_value_inlined_4_15825, 0.56999999), (-_p_headVisor_15815.y)) - _bump_headVisor_15817));
(_result_headVisor_15820._mat = float3(0.050000001, 0.050000001, 0.050000001));
(_result_headVisor_15820._specPower = 30.0);
(_headVisor_return_value_15819 = _result_headVisor_15820);
(_headVisor_has_returned_15818 = true);
(_headVisor_return_value_inlined_6_15828 = _headVisor_return_value_15819);
(_r_headLower_15827._d = min(_r_headLower_15827._d, max(max(_headVisor_return_value_inlined_6_15828._d, (_p_headLower_15811.y - 0.34999999)), (((_p_headLower_15811.y * 0.625) - _p_headLower_15811.z) - 0.66000003))));
(_a_rot_15714 = ((0.075000003 * (_gunsUp_1 - 1.0)) * sign(_p_headLower_15811.x)));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_7_15829 = _rot_return_value_15716);
(_p_headLower_15811.xy = mul(_p_headLower_15811.xy, transpose(_rot_return_value_inlined_7_15829)));
(_p_headLower_15811.x = (abs(_p_headLower_15811.x) - 1.33));
(_p_headLower_15811.y -= (0.1 - (_p_headLower_15811.x * 0.1)));
(_p_sdBox_15696 = _p_headLower_15811);
(_b_sdBox_15697 = vec3_ctor(0.40000001, (0.059999999 * (1.0 - _p_headLower_15811.x)), (0.30000001 - (_p_headLower_15811.x * 0.2))));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_8_15830 = _sdBox_return_value_15699);
(_r_headLower_15827._d = min(_r_headLower_15827._d, _sdBox_return_value_inlined_8_15830));
(_p_headLower_15811 = _op_headLower_15814);
(_p_headLower_15811.y = (abs((abs((_p_headLower_15811.y + 0.147)) - 0.055599999)) - 0.027799999));
(_p_sdBox_15696 = (_p_headLower_15811 + float3(0.0, 0.0, 1.5)));
(_b_sdBox_15697 = vec3_ctor(lerp(0.25, 0.55000001, (-_op_headLower_15814.y)), 0.015, 0.1));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_9_15831 = _sdBox_return_value_15699);
(_r_headLower_15827._d = max(_r_headLower_15827._d, (-_sdBox_return_value_inlined_9_15831)));
(_p_headLower_15811 = _op_headLower_15814);
(_p_headLower_15811.y = (abs((_p_headLower_15811.y + 0.16)) - 0.059999999));
(_p_headLower_15811.z -= -1.1);
(_p_sdCappedCylinder_15787 = _p_headLower_15811.xzy);
(_h_sdCappedCylinder_15788 = 1.0);
(_r_sdCappedCylinder_15789 = 0.029999999);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_10_15832 = _sdCappedCylinder_return_value_15791);
(_p_sdCappedCylinder_15787 = _p_headLower_15811.xzy);
(_h_sdCappedCylinder_15788 = 0.55000001);
(_r_sdCappedCylinder_15789 = 1.0);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_11_15833 = _sdCappedCylinder_return_value_15791);
(_r_headLower_15827._d = max(_r_headLower_15827._d, (-max(max(_sdCappedCylinder_return_value_inlined_10_15832, (-_sdCappedCylinder_return_value_inlined_11_15833)), (_p_headLower_15811.z + 0.2)))));
(_mat_setBodyMaterial_15736 = _r_headLower_15827);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_headLower_15827 = _mat_setBodyMaterial_15736);
(_headLower_return_value_15813 = _r_headLower_15827);
(_headLower_has_returned_15812 = true);
(_headLower_return_value_inlined_63_15834 = _headLower_return_value_15813);
(_a_minResult_15803 = _r_ed209_15772);
(_b_minResult_15804 = _headLower_return_value_inlined_63_15834);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_64_15835 = _minResult_return_value_15806);
(_p_headVisor_15815 = _p_ed209_15724);
(_h_headVisor_15816 = 0.80000001);
(_bump_headVisor_15817 = 1.0);
(_headVisor_has_returned_15818 = false);
(_bump_headVisor_15817 *= ((sin((_p_headVisor_15815.x * 150.0)) * sin((_p_headVisor_15815.y * 150.0))) * 0.0020000001));
(_p_sdBox_15696 = _p_headVisor_15815);
(_b_sdBox_15697 = vec3_ctor_int_int(1, _h_headVisor_15816, 2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_3_15821 = _sdBox_return_value_15699);
(_result_headVisor_15820._d = _sdBox_return_value_inlined_3_15821);
(_p_headSphere_15822 = _p_headVisor_15815);
(_headSphere_has_returned_15823 = false);
(_headSphere_return_value_15824 = ((length((_p_headSphere_15822 / float3(1.0, 0.80000001, 1.0))) - 1.0) * 0.80000001));
(_headSphere_has_returned_15823 = true);
(_headSphere_return_value_inlined_4_15825 = _headSphere_return_value_15824);
(_result_headVisor_15820._d = (max(lerp(_result_headVisor_15820._d, _headSphere_return_value_inlined_4_15825, 0.56999999), (-_p_headVisor_15815.y)) - _bump_headVisor_15817));
(_result_headVisor_15820._mat = float3(0.050000001, 0.050000001, 0.050000001));
(_result_headVisor_15820._specPower = 30.0);
(_headVisor_return_value_15819 = _result_headVisor_15820);
(_headVisor_has_returned_15818 = true);
(_headVisor_return_value_inlined_65_15836 = _headVisor_return_value_15819);
(_a_minResult_15803 = _minResult_return_value_inlined_64_15835);
(_b_minResult_15804 = _headVisor_return_value_inlined_65_15836);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_66_15837 = _minResult_return_value_15806);
(_p_arms_15838 = _p_ed209_15724);
(_arms_has_returned_15839 = false);
(_mat_setBodyMaterial_15736 = _r_arms_15842);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_arms_15842 = _mat_setBodyMaterial_15736);
(_p_arms_15838.x = abs(_p_arms_15838.x));
(_p_arms_15838.yz += float2(0.23999999, 0.0));
(_a_rot_15714 = (0.15000001 * (_gunsUp_1 - 1.0)));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_23_15843 = _rot_return_value_15716);
(_p_arms_15838.xy = mul(_p_arms_15838.xy, transpose(_rot_return_value_inlined_23_15843)));
(_p_sdCapsule_15844 = _p_arms_15838);
(_a_sdCapsule_15845 = float3(0.0, 0.0, 0.0));
(_b_sdCapsule_15846 = float3(1.5, 0.0, 0.0));
(_r_sdCapsule_15847 = 0.2);
(_sdCapsule_has_returned_15848 = false);
(_pa_sdCapsule_15850 = (_p_sdCapsule_15844 - _a_sdCapsule_15845));
(_ba_sdCapsule_15851 = (_b_sdCapsule_15846 - _a_sdCapsule_15845));
(_sdCapsule_return_value_15849 = (length((_pa_sdCapsule_15850 - (_ba_sdCapsule_15851 * clamp((dot(_pa_sdCapsule_15850, _ba_sdCapsule_15851) / dot(_ba_sdCapsule_15851, _ba_sdCapsule_15851)), 0.0, 1.0)))) - _r_sdCapsule_15847));
(_sdCapsule_has_returned_15848 = true);
(_sdCapsule_return_value_inlined_24_15852 = _sdCapsule_return_value_15849);
(_p_sdCapsule_15844 = _p_arms_15838);
(_a_sdCapsule_15845 = float3(1.5, 0.0, 0.0));
(_b_sdCapsule_15846 = float3(1.5, 0.0, -0.30000001));
(_r_sdCapsule_15847 = 0.2);
(_sdCapsule_has_returned_15848 = false);
(_pa_sdCapsule_15850 = (_p_sdCapsule_15844 - _a_sdCapsule_15845));
(_ba_sdCapsule_15851 = (_b_sdCapsule_15846 - _a_sdCapsule_15845));
(_sdCapsule_return_value_15849 = (length((_pa_sdCapsule_15850 - (_ba_sdCapsule_15851 * clamp((dot(_pa_sdCapsule_15850, _ba_sdCapsule_15851) / dot(_ba_sdCapsule_15851, _ba_sdCapsule_15851)), 0.0, 1.0)))) - _r_sdCapsule_15847));
(_sdCapsule_has_returned_15848 = true);
(_sdCapsule_return_value_inlined_25_15853 = _sdCapsule_return_value_15849);
(_r_arms_15842._d = min(_sdCapsule_return_value_inlined_24_15852, _sdCapsule_return_value_inlined_25_15853));
(_p_arms_15838 -= float3(1.5, 0.0, -0.30000001));
(_p_arms_15838.z -= (_gunsForward_1 * 0.15000001));
(_p_gunPod_15854 = _p_arms_15838);
(_gunPod_has_returned_15855 = false);
(_mat_setBodyMaterial_15736 = _r_gunPod_15857);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_gunPod_15857 = _mat_setBodyMaterial_15736);
(_p_gunPod_15854.yz += float2(0.1, 0.44999999));
(_pp_gunPod_15858 = _p_gunPod_15854);
(_pp_gunPod_15858.z = (abs(_pp_gunPod_15858.z) - 0.5));
(_p_sdCappedCone_15859 = _pp_gunPod_15858);
(_a_sdCappedCone_15860 = float3(0.0, 0.0, 0.0));
(_b_sdCappedCone_15861 = float3(0.0, 0.0, -0.1));
(_ra_sdCappedCone_15862 = 0.25);
(_rb_sdCappedCone_15863 = 0.34999999);
(_sdCappedCone_has_returned_15864 = false);
(_rba_sdCappedCone_15866 = (_rb_sdCappedCone_15863 - _ra_sdCappedCone_15862));
(_baba_sdCappedCone_15867 = dot((_b_sdCappedCone_15861 - _a_sdCappedCone_15860), (_b_sdCappedCone_15861 - _a_sdCappedCone_15860)));
(_papa_sdCappedCone_15868 = dot((_p_sdCappedCone_15859 - _a_sdCappedCone_15860), (_p_sdCappedCone_15859 - _a_sdCappedCone_15860)));
(_paba_sdCappedCone_15869 = (dot((_p_sdCappedCone_15859 - _a_sdCappedCone_15860), (_b_sdCappedCone_15861 - _a_sdCappedCone_15860)) / _baba_sdCappedCone_15867));
(_x_sdCappedCone_15870 = sqrt((_papa_sdCappedCone_15868 - ((_paba_sdCappedCone_15869 * _paba_sdCappedCone_15869) * _baba_sdCappedCone_15867))));
float s178b = {0};
if ((_paba_sdCappedCone_15869 < 0.5))
{
(s178b = _ra_sdCappedCone_15862);
}
else
{
(s178b = _rb_sdCappedCone_15863);
}
(_cax_sdCappedCone_15871 = max(0.0, (_x_sdCappedCone_15870 - s178b)));
(_cay_sdCappedCone_15872 = (abs((_paba_sdCappedCone_15869 - 0.5)) - 0.5));
(_f_sdCappedCone_15873 = clamp((((_rba_sdCappedCone_15866 * (_x_sdCappedCone_15870 - _ra_sdCappedCone_15862)) + (_paba_sdCappedCone_15869 * _baba_sdCappedCone_15867)) / ((_rba_sdCappedCone_15866 * _rba_sdCappedCone_15866) + _baba_sdCappedCone_15867)), 0.0, 1.0));
(_cbx_sdCappedCone_15874 = ((_x_sdCappedCone_15870 - _ra_sdCappedCone_15862) - (_f_sdCappedCone_15873 * _rba_sdCappedCone_15866)));
(_cby_sdCappedCone_15875 = (_paba_sdCappedCone_15869 - _f_sdCappedCone_15873));
float s178c = {0};
if (((_cbx_sdCappedCone_15874 < 0.0) && (_cay_sdCappedCone_15872 < 0.0)))
{
(s178c = -1.0);
}
else
{
(s178c = 1.0);
}
(_sdCappedCone_return_value_15865 = (s178c * sqrt(min(((_cax_sdCappedCone_15871 * _cax_sdCappedCone_15871) + ((_cay_sdCappedCone_15872 * _cay_sdCappedCone_15872) * _baba_sdCappedCone_15867)), ((_cbx_sdCappedCone_15874 * _cbx_sdCappedCone_15874) + ((_cby_sdCappedCone_15875 * _cby_sdCappedCone_15875) * _baba_sdCappedCone_15867))))));
(_sdCappedCone_has_returned_15864 = true);
(_sdCappedCone_return_value_inlined_12_15876 = _sdCappedCone_return_value_15865);
(_r_gunPod_15857._d = _sdCappedCone_return_value_inlined_12_15876);
(_p_sdCappedCylinder_15787 = _p_gunPod_15854);
(_h_sdCappedCylinder_15788 = 0.34999999);
(_r_sdCappedCylinder_15789 = 0.40000001);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_13_15877 = _sdCappedCylinder_return_value_15791);
(_r_gunPod_15857._d = min(_r_gunPod_15857._d, _sdCappedCylinder_return_value_inlined_13_15877));
(_pp_gunPod_15858 = vec3_ctor(_p_gunPod_15854.x, (0.28 - _p_gunPod_15854.y), _p_gunPod_15854.z));
(_p_sdTriPrism_15878 = _pp_gunPod_15858);
(_h_sdTriPrism_15879 = float2(0.1, 0.5));
(_sdTriPrism_has_returned_15880 = false);
(_q_sdTriPrism_15882 = abs(_p_sdTriPrism_15878));
(_sdTriPrism_return_value_15881 = max((_q_sdTriPrism_15882.z - _h_sdTriPrism_15879.y), (max(((_q_sdTriPrism_15882.x * 0.86602497) + (_p_sdTriPrism_15878.y * 0.5)), (-_p_sdTriPrism_15878.y)) - (_h_sdTriPrism_15879.x * 0.5))));
(_sdTriPrism_has_returned_15880 = true);
(_sdTriPrism_return_value_inlined_14_15883 = _sdTriPrism_return_value_15881);
(_r_gunPod_15857._d = min(_r_gunPod_15857._d, _sdTriPrism_return_value_inlined_14_15883));
(_pp_gunPod_15858 = _p_gunPod_15854);
(_pp_gunPod_15858.x = abs(_p_gunPod_15854.x));
(_a_rot_15714 = 0.78525001);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_15_15884 = _rot_return_value_15716);
(_pp_gunPod_15858.xy = mul(_pp_gunPod_15858.xy, transpose(_rot_return_value_inlined_15_15884)));
(_bump_gunPod_15886 = (sign(sin((_pp_gunPod_15858.z * 33.299999))) * 0.003));
(_p_sdBox_15696 = _pp_gunPod_15858);
(_b_sdBox_15697 = vec3_ctor((0.1 - _bump_gunPod_15886), (0.38 - _bump_gunPod_15886), 0.34));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_16_15887 = _sdBox_return_value_15699);
(_d_gunPod_15888 = (_sdBox_return_value_inlined_16_15887 - 0.02));
(_pp_gunPod_15858 = (_p_gunPod_15854 - float3(0.0, 0.0, -0.60000002)));
(_pp_gunPod_15858.x = (abs(_pp_gunPod_15858.x) - 0.1));
(_p_sdCappedCylinder_15787 = _pp_gunPod_15858);
(_h_sdCappedCylinder_15788 = 0.059999999);
(_r_sdCappedCylinder_15789 = 0.15000001);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_17_15889 = _sdCappedCylinder_return_value_15791);
(_p_sdCappedCylinder_15787 = (_pp_gunPod_15858 + float3(0.0, 0.12, -0.050000001)));
(_h_sdCappedCylinder_15788 = 0.059999999);
(_r_sdCappedCylinder_15789 = 0.050000001);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_18_15890 = _sdCappedCylinder_return_value_15791);
(_p_sdBox_15696 = (_p_gunPod_15854 + float3(0.0, 0.0, 0.54000002)));
(_b_sdBox_15697 = float3(0.1, 0.059999999, 0.039999999));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_19_15891 = _sdBox_return_value_15699);
(_d_gunPod_15888 = min(min(min(_d_gunPod_15888, _sdCappedCylinder_return_value_inlined_17_15889), _sdCappedCylinder_return_value_inlined_18_15890), _sdBox_return_value_inlined_19_15891));
if ((_d_gunPod_15888 < _r_gunPod_15857._d))
{
(_p_sdCappedCylinder_15787 = (_pp_gunPod_15858 + float3(0.0, 0.0, 0.1)));
(_h_sdCappedCylinder_15788 = 0.029999999);
(_r_sdCappedCylinder_15789 = 0.2);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_20_15892 = _sdCappedCylinder_return_value_15791);
(_d_gunPod_15888 = max(_d_gunPod_15888, (-_sdCappedCylinder_return_value_inlined_20_15892)));
(_r_gunPod_15857._d = _d_gunPod_15888);
(_r_gunPod_15857._mat = float3(0.02, 0.02, 0.02));
}
(_fireShock_has_returned_15662 = false);
(_fireShock_return_value_15663 = abs(sin((_edShoot_1 * 78.537498))));
(_fireShock_has_returned_15662 = true);
(_fireShock_return_value_inlined_21_15893 = _fireShock_return_value_15663);
(_fs_gunPod_15885 = _fireShock_return_value_inlined_21_15893);
if ((_fs_gunPod_15885 > 0.5))
{
(_p_sdCappedCylinder_15787 = _pp_gunPod_15858);
(_h_sdCappedCylinder_15788 = (0.0099999998 + (_pp_gunPod_15858.z * 0.050000001)));
(_r_sdCappedCylinder_15789 = ((frac((_fs_gunPod_15885 * 3322.4231)) * 0.5) + 0.89999998));
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_22_15894 = _sdCappedCylinder_return_value_15791);
(_d_gunPod_15888 = _sdCappedCylinder_return_value_inlined_22_15894);
if ((_d_gunPod_15888 < _r_gunPod_15857._d))
{
(_r_gunPod_15857._d = _d_gunPod_15888);
(_r_gunPod_15857._mat = float3(1.0, 1.0, 1.0));
(_glow_1 += (0.1 / (0.0099999998 + ((_d_gunPod_15888 * _d_gunPod_15888) * 400.0))));
}
}
(_gunPod_return_value_15856 = _r_gunPod_15857);
(_gunPod_has_returned_15855 = true);
(_gunPod_return_value_inlined_26_15895 = _gunPod_return_value_15856);
(_a_minResult_15803 = _r_arms_15842);
(_b_minResult_15804 = _gunPod_return_value_inlined_26_15895);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_27_15896 = _minResult_return_value_15806);
(_arms_return_value_15840 = _minResult_return_value_inlined_27_15896);
(_arms_has_returned_15839 = true);
(_arms_return_value_inlined_67_15897 = _arms_return_value_15840);
(_a_minResult_15803 = _minResult_return_value_inlined_66_15837);
(_b_minResult_15804 = _arms_return_value_inlined_67_15897);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_68_15898 = _minResult_return_value_15806);
(_ed209_return_value_15726 = _minResult_return_value_inlined_68_15898);
(_ed209_has_returned_15725 = true);
(_ed209_return_value_inlined_79_15899 = _ed209_return_value_15726);
(_a_minResult_15803 = _room_return_value_inlined_78_15723);
(_b_minResult_15804 = _ed209_return_value_inlined_79_15899);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_80_15900 = _minResult_return_value_15806);
(_r_map_15901 = _minResult_return_value_inlined_80_15900);
(_gnd_map_15902 = length((_p_map_15683.y + 3.0)));
if ((_gnd_map_15902 < _r_map_15901._d))
{
(_r_map_15901._d = _gnd_map_15902);
(_r_map_15901._mat = float3(0.1, 0.1, 0.1));
}
(_map_return_value_15685 = _r_map_15901);
(_map_has_returned_15684 = true);
(_map_return_value_inlined_84_15919 = _map_return_value_15685);
(_p_map_15683 = (_p_calcNormal_15911 + _e_calcNormal_15916.xxx));
(_map_has_returned_15684 = false);
(_p_room_15686 = _p_map_15683);
(_room_has_returned_15687 = false);
(_r_room_15690._mat = float3(0.40000001, 0.40000001, 0.40000001));
(_r_room_15690._specPower = 10000000.0);
(_xy_room_15691 = (_p_room_15686.xy - float2(0.0, 2.0)));
(_p_room_15686.x = abs(_p_room_15686.x));
(_p_room_15686.yz += float2(0.5, -3.4000001));
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = float3(2.8, 2.5999999, 1.1));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_69_15701 = _sdBox_return_value_15699);
(_doorHole_room_15702 = _sdBox_return_value_inlined_69_15701);
(_backWall_room_15703 = length((_p_room_15686.z - 8.0)));
(_r_room_15690._d = min(_backWall_room_15703, max(length(_p_room_15686.z), ((-_doorHole_room_15702) + 0.1))));
if ((_r_room_15690._d == _backWall_room_15703))
{
(_p_sdOctogon_15704 = _xy_room_15691);
(_r_sdOctogon_15705 = 2.5999999);
(_sdOctogon_has_returned_15706 = false);
(_p_sdOctogon_15704 = abs(_p_sdOctogon_15704));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(-0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(-0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= vec2_ctor(clamp(_p_sdOctogon_15704.x, (-0.41421357 * _r_sdOctogon_15705), (0.41421357 * _r_sdOctogon_15705)), _r_sdOctogon_15705));
(_sdOctogon_return_value_15707 = (length(_p_sdOctogon_15704) * sign(_p_sdOctogon_15704.y)));
(_sdOctogon_has_returned_15706 = true);
(_sdOctogon_return_value_inlined_70_15709 = _sdOctogon_return_value_15707);
(_p_sdOctogon_15704 = _xy_room_15691);
(_r_sdOctogon_15705 = 1.9);
(_sdOctogon_has_returned_15706 = false);
(_p_sdOctogon_15704 = abs(_p_sdOctogon_15704));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(-0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(-0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= vec2_ctor(clamp(_p_sdOctogon_15704.x, (-0.41421357 * _r_sdOctogon_15705), (0.41421357 * _r_sdOctogon_15705)), _r_sdOctogon_15705));
(_sdOctogon_return_value_15707 = (length(_p_sdOctogon_15704) * sign(_p_sdOctogon_15704.y)));
(_sdOctogon_has_returned_15706 = true);
(_sdOctogon_return_value_inlined_71_15710 = _sdOctogon_return_value_15707);
(_ocp_room_15711 = min(abs(_sdOctogon_return_value_inlined_70_15709), abs(_sdOctogon_return_value_inlined_71_15710)));
(_p_sdOctogon_15704 = _xy_room_15691);
(_r_sdOctogon_15705 = 1.2);
(_sdOctogon_has_returned_15706 = false);
(_p_sdOctogon_15704 = abs(_p_sdOctogon_15704));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(-0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(-0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= vec2_ctor(clamp(_p_sdOctogon_15704.x, (-0.41421357 * _r_sdOctogon_15705), (0.41421357 * _r_sdOctogon_15705)), _r_sdOctogon_15705));
(_sdOctogon_return_value_15707 = (length(_p_sdOctogon_15704) * sign(_p_sdOctogon_15704.y)));
(_sdOctogon_has_returned_15706 = true);
(_sdOctogon_return_value_inlined_72_15712 = _sdOctogon_return_value_15707);
(_ocp_room_15711 = min(max(_ocp_room_15711, min((0.69999999 - abs((_xy_room_15691.x + 1.2))), (-_xy_room_15691.y))), max(abs(_sdOctogon_return_value_inlined_72_15712), min(_xy_room_15691.x, (0.69999999 - abs(_xy_room_15691.y))))));
if ((_ocp_room_15711 < 0.30000001))
{
(_r_room_15690._mat = float3(0.38999999, 0.56999999, 0.70999998));
}
}
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = float3(3.2, 3.0, 0.2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_73_15713 = _sdBox_return_value_15699);
(_doorFrame_room_15692 = max(_sdBox_return_value_inlined_73_15713, (-_doorHole_room_15702)));
(_doorWidth_room_15693 = 1.4);
(_p_room_15686.x -= 2.8);
(_a_rot_15714 = (_doorOpen_1 * 2.0999999));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_74_15719 = _rot_return_value_15716);
(_p_room_15686.xz = mul(_p_room_15686.xz, transpose(_rot_return_value_inlined_74_15719)));
(_p_room_15686.x += _doorWidth_room_15693);
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = vec3_ctor(_doorWidth_room_15693, float2(2.5999999, 0.1)));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_75_15720 = _sdBox_return_value_15699);
(_door_room_15694 = _sdBox_return_value_inlined_75_15720);
(_p_room_15686 = (abs(_p_room_15686) - vec3_ctor((_doorWidth_room_15693 * 0.5), 1.1, 0.14)));
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = float3(0.44999999, 0.89999998, 0.1));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_76_15721 = _sdBox_return_value_15699);
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = float3(0.34999999, 0.80000001, 1.0));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_77_15722 = _sdBox_return_value_15699);
(_d_room_15695 = min(_doorFrame_room_15692, max(_door_room_15694, (-max(_sdBox_return_value_inlined_76_15721, (-_sdBox_return_value_inlined_77_15722))))));
if ((_d_room_15695 < _r_room_15690._d))
{
(_r_room_15690._d = _d_room_15695);
(_r_room_15690._mat = float3(0.02, 0.02, 0.024));
(_r_room_15690._specPower = 10.0);
}
(_room_return_value_15688 = _r_room_15690);
(_room_has_returned_15687 = true);
(_room_return_value_inlined_78_15723 = _room_return_value_15688);
(_p_ed209_15724 = _p_map_15683);
(_ed209_has_returned_15725 = false);
(_f_legWalkAngle_15727 = 2.0);
(_legWalkAngle_has_returned_15728 = false);
(_legWalkAngle_return_value_15729 = (sin((((_edWalk_1 * 3.141) * 6.0) * _f_legWalkAngle_15727)) * 0.2));
(_legWalkAngle_has_returned_15728 = true);
(_legWalkAngle_return_value_inlined_54_15730 = _legWalkAngle_return_value_15729);
(_edZ_has_returned_15633 = false);
(_edZ_return_value_15634 = lerp(5.0, -2.0, _edWalk_1));
(_edZ_has_returned_15633 = true);
(_edZ_return_value_inlined_55_15731 = _edZ_return_value_15634);
(_p_ed209_15724.yz += vec2_ctor(((_legWalkAngle_return_value_inlined_54_15730 * 0.2) + 0.1), (-_edZ_return_value_inlined_55_15731)));
(_p_legs_15732 = _p_ed209_15724);
(_legs_has_returned_15733 = false);
(_mat_setBodyMaterial_15736 = _r_legs_15735);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_legs_15735 = _mat_setBodyMaterial_15736);
(_f_legWalkAngle_15727 = 1.0);
(_legWalkAngle_has_returned_15728 = false);
(_legWalkAngle_return_value_15729 = (sin((((_edWalk_1 * 3.141) * 6.0) * _f_legWalkAngle_15727)) * 0.2));
(_legWalkAngle_has_returned_15728 = true);
(_legWalkAngle_return_value_inlined_45_15738 = _legWalkAngle_return_value_15729);
(_legAngle_legs_15739 = _legWalkAngle_return_value_inlined_45_15738);
(_p_legs_15732.z += 0.27000001);
(_a_rot_15714 = (_legAngle_legs_15739 * sign(_p_legs_15732.x)));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_46_15740 = _rot_return_value_15716);
(_p_legs_15732.yz = mul(_p_legs_15732.yz, transpose(_rot_return_value_inlined_46_15740)));
(_p_legs_15732.z -= 0.27000001);
(_p_legs_15732.y += 0.64999998);
(_a_rot_15714 = -0.2);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_47_15741 = _rot_return_value_15716);
(_p_legs_15732.yz = mul(_p_legs_15732.yz, transpose(_rot_return_value_inlined_47_15741)));
(_a_rot_15714 = (_legAngle_legs_15739 * 0.30000001));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_48_15742 = _rot_return_value_15716);
(_p_legs_15732.xy = mul(_p_legs_15732.xy, transpose(_rot_return_value_inlined_48_15742)));
(_pp_legs_15744 = _p_legs_15732);
(_pp_legs_15744.x = abs(_pp_legs_15744.x));
(_pp_legs_15744.y += 0.47999999);
(_a_rot_15714 = -0.58525002);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_49_15745 = _rot_return_value_15716);
(_pp_legs_15744.yz = mul(_pp_legs_15744.yz, transpose(_rot_return_value_inlined_49_15745)));
(_pp_legs_15744.x -= 0.98000002);
(_cp_legs_15743 = _pp_legs_15744);
(_p_legs_15732 = _pp_legs_15744);
(_pp_legs_15744.xz = (abs(_pp_legs_15744.xz) - float2(0.12, 0.25)));
(_p_legs_15732.y += 0.68000001);
(_p_legs_15732.xy = (abs(_p_legs_15732.xy) - 0.12));
(_p_sdBox_15696 = _p_legs_15732);
(_b_sdBox_15697 = float3(0.07, 0.050000001, 1.2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_50_15746 = _sdBox_return_value_15699);
(_silver_legs_15737 = _sdBox_return_value_inlined_50_15746);
(_cp_legs_15743 -= float3(0.0, -0.69999999, 0.0));
(_p_sdBox_15696 = (_cp_legs_15743 - float3(0.0, 0.0, 1.15)));
(_b_sdBox_15697 = float3(0.17, 0.17, 0.07));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_51_15747 = _sdBox_return_value_15699);
(_r_legs_15735._d = (_sdBox_return_value_inlined_51_15747 - 0.039999999));
(_cp_legs_15743.z++);
(_p_sdChamferedCube_15748 = _cp_legs_15743.xzy);
(_r_sdChamferedCube_15749 = vec2_ctor((0.28 - (sign((abs(_cp_legs_15743.z) - 0.30000001)) * 0.0099999998)), 0.5).xyx);
(_c_sdChamferedCube_15750 = 0.18000001);
(_sdChamferedCube_has_returned_15751 = false);
(_p_sdBox_15696 = _p_sdChamferedCube_15748);
(_b_sdBox_15697 = _r_sdChamferedCube_15749);
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_0_15753 = _sdBox_return_value_15699);
(_cube_sdChamferedCube_15754 = _sdBox_return_value_inlined_0_15753);
(_a_rot_15714 = 0.78525001);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_1_15755 = _rot_return_value_15716);
(_p_sdChamferedCube_15748.xz = mul(_p_sdChamferedCube_15748.xz, transpose(_rot_return_value_inlined_1_15755)));
(_r_sdChamferedCube_15749.xz *= (((-_c_sdChamferedCube_15750) / 1.41) + 1.41));
(_p_sdBox_15696 = _p_sdChamferedCube_15748);
(_b_sdBox_15697 = _r_sdChamferedCube_15749);
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_2_15756 = _sdBox_return_value_15699);
(_sdChamferedCube_return_value_15752 = max(_cube_sdChamferedCube_15754, _sdBox_return_value_inlined_2_15756));
(_sdChamferedCube_has_returned_15751 = true);
(_sdChamferedCube_return_value_inlined_52_15757 = _sdChamferedCube_return_value_15752);
(_r_legs_15735._d = min(_r_legs_15735._d, _sdChamferedCube_return_value_inlined_52_15757));
(_p_foot_15758 = _cp_legs_15743);
(_foot_has_returned_15759 = false);
(_p_foot_15758.z += 0.80000001);
(_a_rot_15714 = 0.86000001);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_29_15761 = _rot_return_value_15716);
(_p_foot_15758.yz = mul(_p_foot_15758.yz, transpose(_rot_return_value_inlined_29_15761)));
(_p_toe_15762 = _p_foot_15758);
(_toe_has_returned_15763 = false);
(_p_toe_15762.yz += float2(0.1, 0.31999999));
(_p_sdBox_15696 = _p_toe_15762);
(_b_sdBox_15697 = vec3_ctor(((0.30000001 + (0.2 * (_p_toe_15762.z - 0.18000001))) - (_p_toe_15762.y * 0.228)), (0.30000001 + (0.2 * cos(((_p_toe_15762.z - 0.18000001) * 3.6900001)))), 0.34999999));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_28_15765 = _sdBox_return_value_15699);
(_toe_return_value_15764 = max(_sdBox_return_value_inlined_28_15765, (0.1 - _p_toe_15762.y)));
(_toe_has_returned_15763 = true);
(_toe_return_value_inlined_30_15766 = _toe_return_value_15764);
(_d_foot_15767 = _toe_return_value_inlined_30_15766);
(_a_rot_15714 = 1.5700001);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_31_15768 = _rot_return_value_15716);
(_p_foot_15758.xz = mul(_p_foot_15758.xz, transpose(_rot_return_value_inlined_31_15768)));
(_p_foot_15758.x -= 0.43000001);
(_p_foot_15758.z = (0.25 - abs(_p_foot_15758.z)));
(_p_toe_15762 = _p_foot_15758);
(_toe_has_returned_15763 = false);
(_p_toe_15762.yz += float2(0.1, 0.31999999));
(_p_sdBox_15696 = _p_toe_15762);
(_b_sdBox_15697 = vec3_ctor(((0.30000001 + (0.2 * (_p_toe_15762.z - 0.18000001))) - (_p_toe_15762.y * 0.228)), (0.30000001 + (0.2 * cos(((_p_toe_15762.z - 0.18000001) * 3.6900001)))), 0.34999999));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_28_15765 = _sdBox_return_value_15699);
(_toe_return_value_15764 = max(_sdBox_return_value_inlined_28_15765, (0.1 - _p_toe_15762.y)));
(_toe_has_returned_15763 = true);
(_toe_return_value_inlined_32_15769 = _toe_return_value_15764);
(_foot_return_value_15760 = min(_d_foot_15767, _toe_return_value_inlined_32_15769));
(_foot_has_returned_15759 = true);
(_foot_return_value_inlined_53_15770 = _foot_return_value_15760);
(_r_legs_15735._d = min(_r_legs_15735._d, _foot_return_value_inlined_53_15770));
if ((_silver_legs_15737 < _r_legs_15735._d))
{
(_r_legs_15735._d = _silver_legs_15737);
(_r_legs_15735._mat = float3(0.80000001, 0.80000001, 0.80000001));
}
(_legs_return_value_15734 = _r_legs_15735);
(_legs_has_returned_15733 = true);
(_legs_return_value_inlined_56_15771 = _legs_return_value_15734);
(_r_ed209_15772 = _legs_return_value_inlined_56_15771);
(_f_ed209_15773 = min((_stretch_1 * 2.0), 1.0));
float s178d = {0};
if ((_f_ed209_15773 < 0.5))
{
(s178d = smoothstep(0.0, 0.5, _f_ed209_15773));
}
else
{
(s178d = (1.0 - (smoothstep(0.5, 1.0, _f_ed209_15773) * 0.2)));
}
(_slide_ed209_15774 = s178d);
(_p_ed209_15724.yz -= (_slide_ed209_15774 * 0.5));
(_gunsUp_1 = smoothstep(0.0, 1.0, clamp(((_stretch_1 - 0.66000003) * 6.0), 0.0, 1.0)));
(_fireShock_has_returned_15662 = false);
(_fireShock_return_value_15663 = abs(sin((_edShoot_1 * 78.537498))));
(_fireShock_has_returned_15662 = true);
(_fireShock_return_value_inlined_57_15775 = _fireShock_return_value_15663);
(_gunsForward_1 = (smoothstep(0.0, 1.0, clamp(((_stretch_1 - 0.82999998) * 6.0), 0.0, 1.0)) + (_fireShock_return_value_inlined_57_15775 * 0.5)));
(_p_waist_15776 = _p_ed209_15724);
(_waist_has_returned_15777 = false);
(_mat_setBodyMaterial_15736 = _r_waist_15779);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_waist_15779 = _mat_setBodyMaterial_15736);
(_p_waist_15776.y += 0.64999998);
(_a_rot_15714 = -0.2);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_33_15780 = _rot_return_value_15716);
(_p_waist_15776.yz = mul(_p_waist_15776.yz, transpose(_rot_return_value_inlined_33_15780)));
(_f_legWalkAngle_15727 = 1.0);
(_legWalkAngle_has_returned_15728 = false);
(_legWalkAngle_return_value_15729 = (sin((((_edWalk_1 * 3.141) * 6.0) * _f_legWalkAngle_15727)) * 0.2));
(_legWalkAngle_has_returned_15728 = true);
(_legWalkAngle_return_value_inlined_34_15783 = _legWalkAngle_return_value_15729);
(_legAngle_waist_15784 = _legWalkAngle_return_value_inlined_34_15783);
(_a_rot_15714 = (_legAngle_waist_15784 * 0.30000001));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_35_15785 = _rot_return_value_15716);
(_p_waist_15776.xy = mul(_p_waist_15776.xy, transpose(_rot_return_value_inlined_35_15785)));
(_pp_waist_15786 = _p_waist_15776);
(_pp_waist_15786.y += 0.30000001);
(_p_sdCappedCylinder_15787 = _pp_waist_15786.zyx);
(_h_sdCappedCylinder_15788 = 0.5);
(_r_sdCappedCylinder_15789 = 0.5);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_36_15793 = _sdCappedCylinder_return_value_15791);
(_r_waist_15779._d = max(_sdCappedCylinder_return_value_inlined_36_15793, (_p_waist_15776.y + 0.15000001)));
(_bump_waist_15781 = (0.5 - (abs(sin((_p_waist_15776.y * 40.0))) * 0.029999999)));
(_p_sdBox_15696 = _p_waist_15776);
(_b_sdBox_15697 = vec3_ctor(_bump_waist_15781, 0.15000001, _bump_waist_15781));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_37_15794 = _sdBox_return_value_15699);
(_d_waist_15782 = _sdBox_return_value_inlined_37_15794);
(_bump_waist_15781 = (0.30000001 - (abs(sin((_p_waist_15776.x * 40.0))) * 0.029999999)));
(_pp_waist_15786.y += 0.18000001);
(_p_sdCappedCylinder_15787 = _pp_waist_15786.zyx);
(_h_sdCappedCylinder_15788 = _bump_waist_15781);
(_r_sdCappedCylinder_15789 = 0.75);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_38_15795 = _sdCappedCylinder_return_value_15791);
(_d_waist_15782 = min(_d_waist_15782, _sdCappedCylinder_return_value_inlined_38_15795));
(_pp_waist_15786.x = abs(_pp_waist_15786.x));
(_a_rot_15714 = (-0.58525002 + (_legAngle_waist_15784 * sign(_p_waist_15776.x))));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_39_15796 = _rot_return_value_15716);
(_pp_waist_15786.yz = mul(_pp_waist_15786.yz, transpose(_rot_return_value_inlined_39_15796)));
(_pp_waist_15786.x -= 0.98000002);
(_p_sdCappedCylinder_15787 = _pp_waist_15786.zyx);
(_h_sdCappedCylinder_15788 = 0.40000001);
(_r_sdCappedCylinder_15789 = 0.23999999);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_40_15797 = _sdCappedCylinder_return_value_15791);
(_r_waist_15779._d = min(_r_waist_15779._d, max(_sdCappedCylinder_return_value_inlined_40_15797, (-_pp_waist_15786.y))));
(_p_sdBox_15696 = _pp_waist_15786);
(_b_sdBox_15697 = vec3_ctor(0.23999999, 0.2, (0.14 + (0.2 * _pp_waist_15786.y))));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_41_15798 = _sdBox_return_value_15699);
(_r_waist_15779._d = min(_r_waist_15779._d, _sdBox_return_value_inlined_41_15798));
(_p_waist_15776 = _pp_waist_15786);
(_pp_waist_15786.xz = (abs(_pp_waist_15786.xz) - float2(0.12, 0.25)));
(_p_sdCappedCylinder_15787 = _pp_waist_15786.xzy);
(_h_sdCappedCylinder_15788 = 0.1);
(_r_sdCappedCylinder_15789 = 0.32499999);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_42_15799 = _sdCappedCylinder_return_value_15791);
(_p_sdCappedCylinder_15787 = _pp_waist_15786.xzy);
(_h_sdCappedCylinder_15788 = 0.050000001);
(_r_sdCappedCylinder_15789 = 0.5);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_43_15800 = _sdCappedCylinder_return_value_15791);
(_r_waist_15779._d = min(_r_waist_15779._d, max(min(_sdCappedCylinder_return_value_inlined_42_15799, _sdCappedCylinder_return_value_inlined_43_15800), _pp_waist_15786.y)));
(_p_waist_15776.y += 0.68000001);
(_p_sdBox_15696 = _p_waist_15776);
(_b_sdBox_15697 = vec3_ctor(((sign((abs(_p_waist_15776.y) - 0.039999999)) * 0.0049999999) + 0.25999999), 0.2, 0.34));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_44_15801 = _sdBox_return_value_15699);
(_r_waist_15779._d = min(_r_waist_15779._d, _sdBox_return_value_inlined_44_15801));
if ((_d_waist_15782 < _r_waist_15779._d))
{
(_r_waist_15779._d = _d_waist_15782);
(_r_waist_15779._mat = float3(0.02, 0.02, 0.02));
}
(_waist_return_value_15778 = _r_waist_15779);
(_waist_has_returned_15777 = true);
(_waist_return_value_inlined_58_15802 = _waist_return_value_15778);
(_a_minResult_15803 = _r_ed209_15772);
(_b_minResult_15804 = _waist_return_value_inlined_58_15802);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_59_15807 = _minResult_return_value_15806);
(_r_ed209_15772 = _minResult_return_value_inlined_59_15807);
(_f_legWalkAngle_15727 = 2.0);
(_legWalkAngle_has_returned_15728 = false);
(_legWalkAngle_return_value_15729 = (sin((((_edWalk_1 * 3.141) * 6.0) * _f_legWalkAngle_15727)) * 0.2));
(_legWalkAngle_has_returned_15728 = true);
(_legWalkAngle_return_value_inlined_60_15808 = _legWalkAngle_return_value_15729);
(_a_rot_15714 = (0.1 * ((((-_edDown_1) + _legWalkAngle_return_value_inlined_60_15808) + smoothstep(0.0, 1.0, clamp(((_stretch_1 - 0.5) * 6.0), 0.0, 1.0))) - 1.0)));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_61_15809 = _rot_return_value_15716);
(_p_ed209_15724.yz = mul(_p_ed209_15724.yz, transpose(_rot_return_value_inlined_61_15809)));
(_a_rot_15714 = (_edTwist_1 * 0.2));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_62_15810 = _rot_return_value_15716);
(_p_ed209_15724.xz = mul(_p_ed209_15724.xz, transpose(_rot_return_value_inlined_62_15810)));
(_p_headLower_15811 = _p_ed209_15724);
(_headLower_has_returned_15812 = false);
(_op_headLower_15814 = _p_headLower_15811);
(_p_headVisor_15815 = (_p_headLower_15811 * float3(0.94999999, -1.4, 0.94999999)));
(_h_headVisor_15816 = 1.0);
(_bump_headVisor_15817 = 0.0);
(_headVisor_has_returned_15818 = false);
(_bump_headVisor_15817 *= ((sin((_p_headVisor_15815.x * 150.0)) * sin((_p_headVisor_15815.y * 150.0))) * 0.0020000001));
(_p_sdBox_15696 = _p_headVisor_15815);
(_b_sdBox_15697 = vec3_ctor_int_int(1, _h_headVisor_15816, 2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_3_15821 = _sdBox_return_value_15699);
(_result_headVisor_15820._d = _sdBox_return_value_inlined_3_15821);
(_p_headSphere_15822 = _p_headVisor_15815);
(_headSphere_has_returned_15823 = false);
(_headSphere_return_value_15824 = ((length((_p_headSphere_15822 / float3(1.0, 0.80000001, 1.0))) - 1.0) * 0.80000001));
(_headSphere_has_returned_15823 = true);
(_headSphere_return_value_inlined_4_15825 = _headSphere_return_value_15824);
(_result_headVisor_15820._d = (max(lerp(_result_headVisor_15820._d, _headSphere_return_value_inlined_4_15825, 0.56999999), (-_p_headVisor_15815.y)) - _bump_headVisor_15817));
(_result_headVisor_15820._mat = float3(0.050000001, 0.050000001, 0.050000001));
(_result_headVisor_15820._specPower = 30.0);
(_headVisor_return_value_15819 = _result_headVisor_15820);
(_headVisor_has_returned_15818 = true);
(_headVisor_return_value_inlined_5_15826 = _headVisor_return_value_15819);
(_r_headLower_15827 = _headVisor_return_value_inlined_5_15826);
(_p_headVisor_15815 = ((_p_headLower_15811 + float3(0.0, 0.0099999998, 0.0)) * float3(0.94999999, 0.94999999, 0.94999999)));
(_h_headVisor_15816 = 1.0);
(_bump_headVisor_15817 = 0.0);
(_headVisor_has_returned_15818 = false);
(_bump_headVisor_15817 *= ((sin((_p_headVisor_15815.x * 150.0)) * sin((_p_headVisor_15815.y * 150.0))) * 0.0020000001));
(_p_sdBox_15696 = _p_headVisor_15815);
(_b_sdBox_15697 = vec3_ctor_int_int(1, _h_headVisor_15816, 2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_3_15821 = _sdBox_return_value_15699);
(_result_headVisor_15820._d = _sdBox_return_value_inlined_3_15821);
(_p_headSphere_15822 = _p_headVisor_15815);
(_headSphere_has_returned_15823 = false);
(_headSphere_return_value_15824 = ((length((_p_headSphere_15822 / float3(1.0, 0.80000001, 1.0))) - 1.0) * 0.80000001));
(_headSphere_has_returned_15823 = true);
(_headSphere_return_value_inlined_4_15825 = _headSphere_return_value_15824);
(_result_headVisor_15820._d = (max(lerp(_result_headVisor_15820._d, _headSphere_return_value_inlined_4_15825, 0.56999999), (-_p_headVisor_15815.y)) - _bump_headVisor_15817));
(_result_headVisor_15820._mat = float3(0.050000001, 0.050000001, 0.050000001));
(_result_headVisor_15820._specPower = 30.0);
(_headVisor_return_value_15819 = _result_headVisor_15820);
(_headVisor_has_returned_15818 = true);
(_headVisor_return_value_inlined_6_15828 = _headVisor_return_value_15819);
(_r_headLower_15827._d = min(_r_headLower_15827._d, max(max(_headVisor_return_value_inlined_6_15828._d, (_p_headLower_15811.y - 0.34999999)), (((_p_headLower_15811.y * 0.625) - _p_headLower_15811.z) - 0.66000003))));
(_a_rot_15714 = ((0.075000003 * (_gunsUp_1 - 1.0)) * sign(_p_headLower_15811.x)));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_7_15829 = _rot_return_value_15716);
(_p_headLower_15811.xy = mul(_p_headLower_15811.xy, transpose(_rot_return_value_inlined_7_15829)));
(_p_headLower_15811.x = (abs(_p_headLower_15811.x) - 1.33));
(_p_headLower_15811.y -= (0.1 - (_p_headLower_15811.x * 0.1)));
(_p_sdBox_15696 = _p_headLower_15811);
(_b_sdBox_15697 = vec3_ctor(0.40000001, (0.059999999 * (1.0 - _p_headLower_15811.x)), (0.30000001 - (_p_headLower_15811.x * 0.2))));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_8_15830 = _sdBox_return_value_15699);
(_r_headLower_15827._d = min(_r_headLower_15827._d, _sdBox_return_value_inlined_8_15830));
(_p_headLower_15811 = _op_headLower_15814);
(_p_headLower_15811.y = (abs((abs((_p_headLower_15811.y + 0.147)) - 0.055599999)) - 0.027799999));
(_p_sdBox_15696 = (_p_headLower_15811 + float3(0.0, 0.0, 1.5)));
(_b_sdBox_15697 = vec3_ctor(lerp(0.25, 0.55000001, (-_op_headLower_15814.y)), 0.015, 0.1));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_9_15831 = _sdBox_return_value_15699);
(_r_headLower_15827._d = max(_r_headLower_15827._d, (-_sdBox_return_value_inlined_9_15831)));
(_p_headLower_15811 = _op_headLower_15814);
(_p_headLower_15811.y = (abs((_p_headLower_15811.y + 0.16)) - 0.059999999));
(_p_headLower_15811.z -= -1.1);
(_p_sdCappedCylinder_15787 = _p_headLower_15811.xzy);
(_h_sdCappedCylinder_15788 = 1.0);
(_r_sdCappedCylinder_15789 = 0.029999999);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_10_15832 = _sdCappedCylinder_return_value_15791);
(_p_sdCappedCylinder_15787 = _p_headLower_15811.xzy);
(_h_sdCappedCylinder_15788 = 0.55000001);
(_r_sdCappedCylinder_15789 = 1.0);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_11_15833 = _sdCappedCylinder_return_value_15791);
(_r_headLower_15827._d = max(_r_headLower_15827._d, (-max(max(_sdCappedCylinder_return_value_inlined_10_15832, (-_sdCappedCylinder_return_value_inlined_11_15833)), (_p_headLower_15811.z + 0.2)))));
(_mat_setBodyMaterial_15736 = _r_headLower_15827);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_headLower_15827 = _mat_setBodyMaterial_15736);
(_headLower_return_value_15813 = _r_headLower_15827);
(_headLower_has_returned_15812 = true);
(_headLower_return_value_inlined_63_15834 = _headLower_return_value_15813);
(_a_minResult_15803 = _r_ed209_15772);
(_b_minResult_15804 = _headLower_return_value_inlined_63_15834);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_64_15835 = _minResult_return_value_15806);
(_p_headVisor_15815 = _p_ed209_15724);
(_h_headVisor_15816 = 0.80000001);
(_bump_headVisor_15817 = 1.0);
(_headVisor_has_returned_15818 = false);
(_bump_headVisor_15817 *= ((sin((_p_headVisor_15815.x * 150.0)) * sin((_p_headVisor_15815.y * 150.0))) * 0.0020000001));
(_p_sdBox_15696 = _p_headVisor_15815);
(_b_sdBox_15697 = vec3_ctor_int_int(1, _h_headVisor_15816, 2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_3_15821 = _sdBox_return_value_15699);
(_result_headVisor_15820._d = _sdBox_return_value_inlined_3_15821);
(_p_headSphere_15822 = _p_headVisor_15815);
(_headSphere_has_returned_15823 = false);
(_headSphere_return_value_15824 = ((length((_p_headSphere_15822 / float3(1.0, 0.80000001, 1.0))) - 1.0) * 0.80000001));
(_headSphere_has_returned_15823 = true);
(_headSphere_return_value_inlined_4_15825 = _headSphere_return_value_15824);
(_result_headVisor_15820._d = (max(lerp(_result_headVisor_15820._d, _headSphere_return_value_inlined_4_15825, 0.56999999), (-_p_headVisor_15815.y)) - _bump_headVisor_15817));
(_result_headVisor_15820._mat = float3(0.050000001, 0.050000001, 0.050000001));
(_result_headVisor_15820._specPower = 30.0);
(_headVisor_return_value_15819 = _result_headVisor_15820);
(_headVisor_has_returned_15818 = true);
(_headVisor_return_value_inlined_65_15836 = _headVisor_return_value_15819);
(_a_minResult_15803 = _minResult_return_value_inlined_64_15835);
(_b_minResult_15804 = _headVisor_return_value_inlined_65_15836);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_66_15837 = _minResult_return_value_15806);
(_p_arms_15838 = _p_ed209_15724);
(_arms_has_returned_15839 = false);
(_mat_setBodyMaterial_15736 = _r_arms_15842);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_arms_15842 = _mat_setBodyMaterial_15736);
(_p_arms_15838.x = abs(_p_arms_15838.x));
(_p_arms_15838.yz += float2(0.23999999, 0.0));
(_a_rot_15714 = (0.15000001 * (_gunsUp_1 - 1.0)));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_23_15843 = _rot_return_value_15716);
(_p_arms_15838.xy = mul(_p_arms_15838.xy, transpose(_rot_return_value_inlined_23_15843)));
(_p_sdCapsule_15844 = _p_arms_15838);
(_a_sdCapsule_15845 = float3(0.0, 0.0, 0.0));
(_b_sdCapsule_15846 = float3(1.5, 0.0, 0.0));
(_r_sdCapsule_15847 = 0.2);
(_sdCapsule_has_returned_15848 = false);
(_pa_sdCapsule_15850 = (_p_sdCapsule_15844 - _a_sdCapsule_15845));
(_ba_sdCapsule_15851 = (_b_sdCapsule_15846 - _a_sdCapsule_15845));
(_sdCapsule_return_value_15849 = (length((_pa_sdCapsule_15850 - (_ba_sdCapsule_15851 * clamp((dot(_pa_sdCapsule_15850, _ba_sdCapsule_15851) / dot(_ba_sdCapsule_15851, _ba_sdCapsule_15851)), 0.0, 1.0)))) - _r_sdCapsule_15847));
(_sdCapsule_has_returned_15848 = true);
(_sdCapsule_return_value_inlined_24_15852 = _sdCapsule_return_value_15849);
(_p_sdCapsule_15844 = _p_arms_15838);
(_a_sdCapsule_15845 = float3(1.5, 0.0, 0.0));
(_b_sdCapsule_15846 = float3(1.5, 0.0, -0.30000001));
(_r_sdCapsule_15847 = 0.2);
(_sdCapsule_has_returned_15848 = false);
(_pa_sdCapsule_15850 = (_p_sdCapsule_15844 - _a_sdCapsule_15845));
(_ba_sdCapsule_15851 = (_b_sdCapsule_15846 - _a_sdCapsule_15845));
(_sdCapsule_return_value_15849 = (length((_pa_sdCapsule_15850 - (_ba_sdCapsule_15851 * clamp((dot(_pa_sdCapsule_15850, _ba_sdCapsule_15851) / dot(_ba_sdCapsule_15851, _ba_sdCapsule_15851)), 0.0, 1.0)))) - _r_sdCapsule_15847));
(_sdCapsule_has_returned_15848 = true);
(_sdCapsule_return_value_inlined_25_15853 = _sdCapsule_return_value_15849);
(_r_arms_15842._d = min(_sdCapsule_return_value_inlined_24_15852, _sdCapsule_return_value_inlined_25_15853));
(_p_arms_15838 -= float3(1.5, 0.0, -0.30000001));
(_p_arms_15838.z -= (_gunsForward_1 * 0.15000001));
(_p_gunPod_15854 = _p_arms_15838);
(_gunPod_has_returned_15855 = false);
(_mat_setBodyMaterial_15736 = _r_gunPod_15857);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_gunPod_15857 = _mat_setBodyMaterial_15736);
(_p_gunPod_15854.yz += float2(0.1, 0.44999999));
(_pp_gunPod_15858 = _p_gunPod_15854);
(_pp_gunPod_15858.z = (abs(_pp_gunPod_15858.z) - 0.5));
(_p_sdCappedCone_15859 = _pp_gunPod_15858);
(_a_sdCappedCone_15860 = float3(0.0, 0.0, 0.0));
(_b_sdCappedCone_15861 = float3(0.0, 0.0, -0.1));
(_ra_sdCappedCone_15862 = 0.25);
(_rb_sdCappedCone_15863 = 0.34999999);
(_sdCappedCone_has_returned_15864 = false);
(_rba_sdCappedCone_15866 = (_rb_sdCappedCone_15863 - _ra_sdCappedCone_15862));
(_baba_sdCappedCone_15867 = dot((_b_sdCappedCone_15861 - _a_sdCappedCone_15860), (_b_sdCappedCone_15861 - _a_sdCappedCone_15860)));
(_papa_sdCappedCone_15868 = dot((_p_sdCappedCone_15859 - _a_sdCappedCone_15860), (_p_sdCappedCone_15859 - _a_sdCappedCone_15860)));
(_paba_sdCappedCone_15869 = (dot((_p_sdCappedCone_15859 - _a_sdCappedCone_15860), (_b_sdCappedCone_15861 - _a_sdCappedCone_15860)) / _baba_sdCappedCone_15867));
(_x_sdCappedCone_15870 = sqrt((_papa_sdCappedCone_15868 - ((_paba_sdCappedCone_15869 * _paba_sdCappedCone_15869) * _baba_sdCappedCone_15867))));
float s178e = {0};
if ((_paba_sdCappedCone_15869 < 0.5))
{
(s178e = _ra_sdCappedCone_15862);
}
else
{
(s178e = _rb_sdCappedCone_15863);
}
(_cax_sdCappedCone_15871 = max(0.0, (_x_sdCappedCone_15870 - s178e)));
(_cay_sdCappedCone_15872 = (abs((_paba_sdCappedCone_15869 - 0.5)) - 0.5));
(_f_sdCappedCone_15873 = clamp((((_rba_sdCappedCone_15866 * (_x_sdCappedCone_15870 - _ra_sdCappedCone_15862)) + (_paba_sdCappedCone_15869 * _baba_sdCappedCone_15867)) / ((_rba_sdCappedCone_15866 * _rba_sdCappedCone_15866) + _baba_sdCappedCone_15867)), 0.0, 1.0));
(_cbx_sdCappedCone_15874 = ((_x_sdCappedCone_15870 - _ra_sdCappedCone_15862) - (_f_sdCappedCone_15873 * _rba_sdCappedCone_15866)));
(_cby_sdCappedCone_15875 = (_paba_sdCappedCone_15869 - _f_sdCappedCone_15873));
float s178f = {0};
if (((_cbx_sdCappedCone_15874 < 0.0) && (_cay_sdCappedCone_15872 < 0.0)))
{
(s178f = -1.0);
}
else
{
(s178f = 1.0);
}
(_sdCappedCone_return_value_15865 = (s178f * sqrt(min(((_cax_sdCappedCone_15871 * _cax_sdCappedCone_15871) + ((_cay_sdCappedCone_15872 * _cay_sdCappedCone_15872) * _baba_sdCappedCone_15867)), ((_cbx_sdCappedCone_15874 * _cbx_sdCappedCone_15874) + ((_cby_sdCappedCone_15875 * _cby_sdCappedCone_15875) * _baba_sdCappedCone_15867))))));
(_sdCappedCone_has_returned_15864 = true);
(_sdCappedCone_return_value_inlined_12_15876 = _sdCappedCone_return_value_15865);
(_r_gunPod_15857._d = _sdCappedCone_return_value_inlined_12_15876);
(_p_sdCappedCylinder_15787 = _p_gunPod_15854);
(_h_sdCappedCylinder_15788 = 0.34999999);
(_r_sdCappedCylinder_15789 = 0.40000001);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_13_15877 = _sdCappedCylinder_return_value_15791);
(_r_gunPod_15857._d = min(_r_gunPod_15857._d, _sdCappedCylinder_return_value_inlined_13_15877));
(_pp_gunPod_15858 = vec3_ctor(_p_gunPod_15854.x, (0.28 - _p_gunPod_15854.y), _p_gunPod_15854.z));
(_p_sdTriPrism_15878 = _pp_gunPod_15858);
(_h_sdTriPrism_15879 = float2(0.1, 0.5));
(_sdTriPrism_has_returned_15880 = false);
(_q_sdTriPrism_15882 = abs(_p_sdTriPrism_15878));
(_sdTriPrism_return_value_15881 = max((_q_sdTriPrism_15882.z - _h_sdTriPrism_15879.y), (max(((_q_sdTriPrism_15882.x * 0.86602497) + (_p_sdTriPrism_15878.y * 0.5)), (-_p_sdTriPrism_15878.y)) - (_h_sdTriPrism_15879.x * 0.5))));
(_sdTriPrism_has_returned_15880 = true);
(_sdTriPrism_return_value_inlined_14_15883 = _sdTriPrism_return_value_15881);
(_r_gunPod_15857._d = min(_r_gunPod_15857._d, _sdTriPrism_return_value_inlined_14_15883));
(_pp_gunPod_15858 = _p_gunPod_15854);
(_pp_gunPod_15858.x = abs(_p_gunPod_15854.x));
(_a_rot_15714 = 0.78525001);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_15_15884 = _rot_return_value_15716);
(_pp_gunPod_15858.xy = mul(_pp_gunPod_15858.xy, transpose(_rot_return_value_inlined_15_15884)));
(_bump_gunPod_15886 = (sign(sin((_pp_gunPod_15858.z * 33.299999))) * 0.003));
(_p_sdBox_15696 = _pp_gunPod_15858);
(_b_sdBox_15697 = vec3_ctor((0.1 - _bump_gunPod_15886), (0.38 - _bump_gunPod_15886), 0.34));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_16_15887 = _sdBox_return_value_15699);
(_d_gunPod_15888 = (_sdBox_return_value_inlined_16_15887 - 0.02));
(_pp_gunPod_15858 = (_p_gunPod_15854 - float3(0.0, 0.0, -0.60000002)));
(_pp_gunPod_15858.x = (abs(_pp_gunPod_15858.x) - 0.1));
(_p_sdCappedCylinder_15787 = _pp_gunPod_15858);
(_h_sdCappedCylinder_15788 = 0.059999999);
(_r_sdCappedCylinder_15789 = 0.15000001);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_17_15889 = _sdCappedCylinder_return_value_15791);
(_p_sdCappedCylinder_15787 = (_pp_gunPod_15858 + float3(0.0, 0.12, -0.050000001)));
(_h_sdCappedCylinder_15788 = 0.059999999);
(_r_sdCappedCylinder_15789 = 0.050000001);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_18_15890 = _sdCappedCylinder_return_value_15791);
(_p_sdBox_15696 = (_p_gunPod_15854 + float3(0.0, 0.0, 0.54000002)));
(_b_sdBox_15697 = float3(0.1, 0.059999999, 0.039999999));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_19_15891 = _sdBox_return_value_15699);
(_d_gunPod_15888 = min(min(min(_d_gunPod_15888, _sdCappedCylinder_return_value_inlined_17_15889), _sdCappedCylinder_return_value_inlined_18_15890), _sdBox_return_value_inlined_19_15891));
if ((_d_gunPod_15888 < _r_gunPod_15857._d))
{
(_p_sdCappedCylinder_15787 = (_pp_gunPod_15858 + float3(0.0, 0.0, 0.1)));
(_h_sdCappedCylinder_15788 = 0.029999999);
(_r_sdCappedCylinder_15789 = 0.2);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_20_15892 = _sdCappedCylinder_return_value_15791);
(_d_gunPod_15888 = max(_d_gunPod_15888, (-_sdCappedCylinder_return_value_inlined_20_15892)));
(_r_gunPod_15857._d = _d_gunPod_15888);
(_r_gunPod_15857._mat = float3(0.02, 0.02, 0.02));
}
(_fireShock_has_returned_15662 = false);
(_fireShock_return_value_15663 = abs(sin((_edShoot_1 * 78.537498))));
(_fireShock_has_returned_15662 = true);
(_fireShock_return_value_inlined_21_15893 = _fireShock_return_value_15663);
(_fs_gunPod_15885 = _fireShock_return_value_inlined_21_15893);
if ((_fs_gunPod_15885 > 0.5))
{
(_p_sdCappedCylinder_15787 = _pp_gunPod_15858);
(_h_sdCappedCylinder_15788 = (0.0099999998 + (_pp_gunPod_15858.z * 0.050000001)));
(_r_sdCappedCylinder_15789 = ((frac((_fs_gunPod_15885 * 3322.4231)) * 0.5) + 0.89999998));
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_22_15894 = _sdCappedCylinder_return_value_15791);
(_d_gunPod_15888 = _sdCappedCylinder_return_value_inlined_22_15894);
if ((_d_gunPod_15888 < _r_gunPod_15857._d))
{
(_r_gunPod_15857._d = _d_gunPod_15888);
(_r_gunPod_15857._mat = float3(1.0, 1.0, 1.0));
(_glow_1 += (0.1 / (0.0099999998 + ((_d_gunPod_15888 * _d_gunPod_15888) * 400.0))));
}
}
(_gunPod_return_value_15856 = _r_gunPod_15857);
(_gunPod_has_returned_15855 = true);
(_gunPod_return_value_inlined_26_15895 = _gunPod_return_value_15856);
(_a_minResult_15803 = _r_arms_15842);
(_b_minResult_15804 = _gunPod_return_value_inlined_26_15895);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_27_15896 = _minResult_return_value_15806);
(_arms_return_value_15840 = _minResult_return_value_inlined_27_15896);
(_arms_has_returned_15839 = true);
(_arms_return_value_inlined_67_15897 = _arms_return_value_15840);
(_a_minResult_15803 = _minResult_return_value_inlined_66_15837);
(_b_minResult_15804 = _arms_return_value_inlined_67_15897);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_68_15898 = _minResult_return_value_15806);
(_ed209_return_value_15726 = _minResult_return_value_inlined_68_15898);
(_ed209_has_returned_15725 = true);
(_ed209_return_value_inlined_79_15899 = _ed209_return_value_15726);
(_a_minResult_15803 = _room_return_value_inlined_78_15723);
(_b_minResult_15804 = _ed209_return_value_inlined_79_15899);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_80_15900 = _minResult_return_value_15806);
(_r_map_15901 = _minResult_return_value_inlined_80_15900);
(_gnd_map_15902 = length((_p_map_15683.y + 3.0)));
if ((_gnd_map_15902 < _r_map_15901._d))
{
(_r_map_15901._d = _gnd_map_15902);
(_r_map_15901._mat = float3(0.1, 0.1, 0.1));
}
(_map_return_value_15685 = _r_map_15901);
(_map_has_returned_15684 = true);
(_map_return_value_inlined_85_15920 = _map_return_value_15685);
(_calcNormal_return_value_15914 = normalize(((((_e_calcNormal_15916.xyy * _map_return_value_inlined_82_15917._d) + (_e_calcNormal_15916.yyx * _map_return_value_inlined_83_15918._d)) + (_e_calcNormal_15916.yxy * _map_return_value_inlined_84_15919._d)) + (_e_calcNormal_15916.xxx * _map_return_value_inlined_85_15920._d))));
(_calcNormal_has_returned_15913 = true);
(_calcNormal_return_value_inlined_87_15921 = _calcNormal_return_value_15914);
(_n_applyLighting_15922 = _calcNormal_return_value_inlined_87_15921);
(_primary_applyLighting_15923 = max(0.0, dot(_sunDir_applyLighting_15910, _n_applyLighting_15922)));
(_bounce_applyLighting_15924 = (max(0.0, dot((-_sunDir_applyLighting_15910), _n_applyLighting_15922)) * 0.2));
(_spe_applyLighting_15925 = (pow(max(max(0.0, dot(_rd_applyLighting_15905, reflect(_sunDir_applyLighting_15910, _n_applyLighting_15922))), 9.9999997e-10), _data_applyLighting_15907._specPower) * 2.0));
(_fre_applyLighting_15926 = smoothstep(0.69999999, 1.0, (1.0 + dot(_rd_applyLighting_15905, _n_applyLighting_15922))));
(_fog_applyLighting_15927 = exp(((-length(_p_applyLighting_15904)) * 0.050000001)));
(_p_calcShadow_15928 = _p_applyLighting_15904);
(_lightPos_calcShadow_15929 = float3(10.0, 10.0, -10.0));
(_calcShadow_has_returned_15930 = false);
(_rd_calcShadow_15932 = normalize((_lightPos_calcShadow_15929 - _p_calcShadow_15928)));
(_res_calcShadow_15933 = 1.0);
(_t_calcShadow_15934 = 0.1);
{ for((_i_calcShadow_15935 = 0.0); (_i_calcShadow_15935 < 30.0); (_i_calcShadow_15935++))
{
(_p_map_15683 = (_p_calcShadow_15928 + (_rd_calcShadow_15932 * _t_calcShadow_15934)));
(_map_has_returned_15684 = false);
(_p_room_15686 = _p_map_15683);
(_room_has_returned_15687 = false);
(_r_room_15690._mat = float3(0.40000001, 0.40000001, 0.40000001));
(_r_room_15690._specPower = 10000000.0);
(_xy_room_15691 = (_p_room_15686.xy - float2(0.0, 2.0)));
(_p_room_15686.x = abs(_p_room_15686.x));
(_p_room_15686.yz += float2(0.5, -3.4000001));
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = float3(2.8, 2.5999999, 1.1));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_69_15701 = _sdBox_return_value_15699);
(_doorHole_room_15702 = _sdBox_return_value_inlined_69_15701);
(_backWall_room_15703 = length((_p_room_15686.z - 8.0)));
(_r_room_15690._d = min(_backWall_room_15703, max(length(_p_room_15686.z), ((-_doorHole_room_15702) + 0.1))));
if ((_r_room_15690._d == _backWall_room_15703))
{
(_p_sdOctogon_15704 = _xy_room_15691);
(_r_sdOctogon_15705 = 2.5999999);
(_sdOctogon_has_returned_15706 = false);
(_p_sdOctogon_15704 = abs(_p_sdOctogon_15704));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(-0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(-0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= vec2_ctor(clamp(_p_sdOctogon_15704.x, (-0.41421357 * _r_sdOctogon_15705), (0.41421357 * _r_sdOctogon_15705)), _r_sdOctogon_15705));
(_sdOctogon_return_value_15707 = (length(_p_sdOctogon_15704) * sign(_p_sdOctogon_15704.y)));
(_sdOctogon_has_returned_15706 = true);
(_sdOctogon_return_value_inlined_70_15709 = _sdOctogon_return_value_15707);
(_p_sdOctogon_15704 = _xy_room_15691);
(_r_sdOctogon_15705 = 1.9);
(_sdOctogon_has_returned_15706 = false);
(_p_sdOctogon_15704 = abs(_p_sdOctogon_15704));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(-0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(-0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= vec2_ctor(clamp(_p_sdOctogon_15704.x, (-0.41421357 * _r_sdOctogon_15705), (0.41421357 * _r_sdOctogon_15705)), _r_sdOctogon_15705));
(_sdOctogon_return_value_15707 = (length(_p_sdOctogon_15704) * sign(_p_sdOctogon_15704.y)));
(_sdOctogon_has_returned_15706 = true);
(_sdOctogon_return_value_inlined_71_15710 = _sdOctogon_return_value_15707);
(_ocp_room_15711 = min(abs(_sdOctogon_return_value_inlined_70_15709), abs(_sdOctogon_return_value_inlined_71_15710)));
(_p_sdOctogon_15704 = _xy_room_15691);
(_r_sdOctogon_15705 = 1.2);
(_sdOctogon_has_returned_15706 = false);
(_p_sdOctogon_15704 = abs(_p_sdOctogon_15704));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(-0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(-0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= vec2_ctor(clamp(_p_sdOctogon_15704.x, (-0.41421357 * _r_sdOctogon_15705), (0.41421357 * _r_sdOctogon_15705)), _r_sdOctogon_15705));
(_sdOctogon_return_value_15707 = (length(_p_sdOctogon_15704) * sign(_p_sdOctogon_15704.y)));
(_sdOctogon_has_returned_15706 = true);
(_sdOctogon_return_value_inlined_72_15712 = _sdOctogon_return_value_15707);
(_ocp_room_15711 = min(max(_ocp_room_15711, min((0.69999999 - abs((_xy_room_15691.x + 1.2))), (-_xy_room_15691.y))), max(abs(_sdOctogon_return_value_inlined_72_15712), min(_xy_room_15691.x, (0.69999999 - abs(_xy_room_15691.y))))));
if ((_ocp_room_15711 < 0.30000001))
{
(_r_room_15690._mat = float3(0.38999999, 0.56999999, 0.70999998));
}
}
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = float3(3.2, 3.0, 0.2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_73_15713 = _sdBox_return_value_15699);
(_doorFrame_room_15692 = max(_sdBox_return_value_inlined_73_15713, (-_doorHole_room_15702)));
(_doorWidth_room_15693 = 1.4);
(_p_room_15686.x -= 2.8);
(_a_rot_15714 = (_doorOpen_1 * 2.0999999));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_74_15719 = _rot_return_value_15716);
(_p_room_15686.xz = mul(_p_room_15686.xz, transpose(_rot_return_value_inlined_74_15719)));
(_p_room_15686.x += _doorWidth_room_15693);
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = vec3_ctor(_doorWidth_room_15693, float2(2.5999999, 0.1)));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_75_15720 = _sdBox_return_value_15699);
(_door_room_15694 = _sdBox_return_value_inlined_75_15720);
(_p_room_15686 = (abs(_p_room_15686) - vec3_ctor((_doorWidth_room_15693 * 0.5), 1.1, 0.14)));
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = float3(0.44999999, 0.89999998, 0.1));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_76_15721 = _sdBox_return_value_15699);
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = float3(0.34999999, 0.80000001, 1.0));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_77_15722 = _sdBox_return_value_15699);
(_d_room_15695 = min(_doorFrame_room_15692, max(_door_room_15694, (-max(_sdBox_return_value_inlined_76_15721, (-_sdBox_return_value_inlined_77_15722))))));
if ((_d_room_15695 < _r_room_15690._d))
{
(_r_room_15690._d = _d_room_15695);
(_r_room_15690._mat = float3(0.02, 0.02, 0.024));
(_r_room_15690._specPower = 10.0);
}
(_room_return_value_15688 = _r_room_15690);
(_room_has_returned_15687 = true);
(_room_return_value_inlined_78_15723 = _room_return_value_15688);
(_p_ed209_15724 = _p_map_15683);
(_ed209_has_returned_15725 = false);
(_f_legWalkAngle_15727 = 2.0);
(_legWalkAngle_has_returned_15728 = false);
(_legWalkAngle_return_value_15729 = (sin((((_edWalk_1 * 3.141) * 6.0) * _f_legWalkAngle_15727)) * 0.2));
(_legWalkAngle_has_returned_15728 = true);
(_legWalkAngle_return_value_inlined_54_15730 = _legWalkAngle_return_value_15729);
(_edZ_has_returned_15633 = false);
(_edZ_return_value_15634 = lerp(5.0, -2.0, _edWalk_1));
(_edZ_has_returned_15633 = true);
(_edZ_return_value_inlined_55_15731 = _edZ_return_value_15634);
(_p_ed209_15724.yz += vec2_ctor(((_legWalkAngle_return_value_inlined_54_15730 * 0.2) + 0.1), (-_edZ_return_value_inlined_55_15731)));
(_p_legs_15732 = _p_ed209_15724);
(_legs_has_returned_15733 = false);
(_mat_setBodyMaterial_15736 = _r_legs_15735);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_legs_15735 = _mat_setBodyMaterial_15736);
(_f_legWalkAngle_15727 = 1.0);
(_legWalkAngle_has_returned_15728 = false);
(_legWalkAngle_return_value_15729 = (sin((((_edWalk_1 * 3.141) * 6.0) * _f_legWalkAngle_15727)) * 0.2));
(_legWalkAngle_has_returned_15728 = true);
(_legWalkAngle_return_value_inlined_45_15738 = _legWalkAngle_return_value_15729);
(_legAngle_legs_15739 = _legWalkAngle_return_value_inlined_45_15738);
(_p_legs_15732.z += 0.27000001);
(_a_rot_15714 = (_legAngle_legs_15739 * sign(_p_legs_15732.x)));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_46_15740 = _rot_return_value_15716);
(_p_legs_15732.yz = mul(_p_legs_15732.yz, transpose(_rot_return_value_inlined_46_15740)));
(_p_legs_15732.z -= 0.27000001);
(_p_legs_15732.y += 0.64999998);
(_a_rot_15714 = -0.2);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_47_15741 = _rot_return_value_15716);
(_p_legs_15732.yz = mul(_p_legs_15732.yz, transpose(_rot_return_value_inlined_47_15741)));
(_a_rot_15714 = (_legAngle_legs_15739 * 0.30000001));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_48_15742 = _rot_return_value_15716);
(_p_legs_15732.xy = mul(_p_legs_15732.xy, transpose(_rot_return_value_inlined_48_15742)));
(_pp_legs_15744 = _p_legs_15732);
(_pp_legs_15744.x = abs(_pp_legs_15744.x));
(_pp_legs_15744.y += 0.47999999);
(_a_rot_15714 = -0.58525002);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_49_15745 = _rot_return_value_15716);
(_pp_legs_15744.yz = mul(_pp_legs_15744.yz, transpose(_rot_return_value_inlined_49_15745)));
(_pp_legs_15744.x -= 0.98000002);
(_cp_legs_15743 = _pp_legs_15744);
(_p_legs_15732 = _pp_legs_15744);
(_pp_legs_15744.xz = (abs(_pp_legs_15744.xz) - float2(0.12, 0.25)));
(_p_legs_15732.y += 0.68000001);
(_p_legs_15732.xy = (abs(_p_legs_15732.xy) - 0.12));
(_p_sdBox_15696 = _p_legs_15732);
(_b_sdBox_15697 = float3(0.07, 0.050000001, 1.2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_50_15746 = _sdBox_return_value_15699);
(_silver_legs_15737 = _sdBox_return_value_inlined_50_15746);
(_cp_legs_15743 -= float3(0.0, -0.69999999, 0.0));
(_p_sdBox_15696 = (_cp_legs_15743 - float3(0.0, 0.0, 1.15)));
(_b_sdBox_15697 = float3(0.17, 0.17, 0.07));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_51_15747 = _sdBox_return_value_15699);
(_r_legs_15735._d = (_sdBox_return_value_inlined_51_15747 - 0.039999999));
(_cp_legs_15743.z++);
(_p_sdChamferedCube_15748 = _cp_legs_15743.xzy);
(_r_sdChamferedCube_15749 = vec2_ctor((0.28 - (sign((abs(_cp_legs_15743.z) - 0.30000001)) * 0.0099999998)), 0.5).xyx);
(_c_sdChamferedCube_15750 = 0.18000001);
(_sdChamferedCube_has_returned_15751 = false);
(_p_sdBox_15696 = _p_sdChamferedCube_15748);
(_b_sdBox_15697 = _r_sdChamferedCube_15749);
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_0_15753 = _sdBox_return_value_15699);
(_cube_sdChamferedCube_15754 = _sdBox_return_value_inlined_0_15753);
(_a_rot_15714 = 0.78525001);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_1_15755 = _rot_return_value_15716);
(_p_sdChamferedCube_15748.xz = mul(_p_sdChamferedCube_15748.xz, transpose(_rot_return_value_inlined_1_15755)));
(_r_sdChamferedCube_15749.xz *= (((-_c_sdChamferedCube_15750) / 1.41) + 1.41));
(_p_sdBox_15696 = _p_sdChamferedCube_15748);
(_b_sdBox_15697 = _r_sdChamferedCube_15749);
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_2_15756 = _sdBox_return_value_15699);
(_sdChamferedCube_return_value_15752 = max(_cube_sdChamferedCube_15754, _sdBox_return_value_inlined_2_15756));
(_sdChamferedCube_has_returned_15751 = true);
(_sdChamferedCube_return_value_inlined_52_15757 = _sdChamferedCube_return_value_15752);
(_r_legs_15735._d = min(_r_legs_15735._d, _sdChamferedCube_return_value_inlined_52_15757));
(_p_foot_15758 = _cp_legs_15743);
(_foot_has_returned_15759 = false);
(_p_foot_15758.z += 0.80000001);
(_a_rot_15714 = 0.86000001);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_29_15761 = _rot_return_value_15716);
(_p_foot_15758.yz = mul(_p_foot_15758.yz, transpose(_rot_return_value_inlined_29_15761)));
(_p_toe_15762 = _p_foot_15758);
(_toe_has_returned_15763 = false);
(_p_toe_15762.yz += float2(0.1, 0.31999999));
(_p_sdBox_15696 = _p_toe_15762);
(_b_sdBox_15697 = vec3_ctor(((0.30000001 + (0.2 * (_p_toe_15762.z - 0.18000001))) - (_p_toe_15762.y * 0.228)), (0.30000001 + (0.2 * cos(((_p_toe_15762.z - 0.18000001) * 3.6900001)))), 0.34999999));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_28_15765 = _sdBox_return_value_15699);
(_toe_return_value_15764 = max(_sdBox_return_value_inlined_28_15765, (0.1 - _p_toe_15762.y)));
(_toe_has_returned_15763 = true);
(_toe_return_value_inlined_30_15766 = _toe_return_value_15764);
(_d_foot_15767 = _toe_return_value_inlined_30_15766);
(_a_rot_15714 = 1.5700001);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_31_15768 = _rot_return_value_15716);
(_p_foot_15758.xz = mul(_p_foot_15758.xz, transpose(_rot_return_value_inlined_31_15768)));
(_p_foot_15758.x -= 0.43000001);
(_p_foot_15758.z = (0.25 - abs(_p_foot_15758.z)));
(_p_toe_15762 = _p_foot_15758);
(_toe_has_returned_15763 = false);
(_p_toe_15762.yz += float2(0.1, 0.31999999));
(_p_sdBox_15696 = _p_toe_15762);
(_b_sdBox_15697 = vec3_ctor(((0.30000001 + (0.2 * (_p_toe_15762.z - 0.18000001))) - (_p_toe_15762.y * 0.228)), (0.30000001 + (0.2 * cos(((_p_toe_15762.z - 0.18000001) * 3.6900001)))), 0.34999999));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_28_15765 = _sdBox_return_value_15699);
(_toe_return_value_15764 = max(_sdBox_return_value_inlined_28_15765, (0.1 - _p_toe_15762.y)));
(_toe_has_returned_15763 = true);
(_toe_return_value_inlined_32_15769 = _toe_return_value_15764);
(_foot_return_value_15760 = min(_d_foot_15767, _toe_return_value_inlined_32_15769));
(_foot_has_returned_15759 = true);
(_foot_return_value_inlined_53_15770 = _foot_return_value_15760);
(_r_legs_15735._d = min(_r_legs_15735._d, _foot_return_value_inlined_53_15770));
if ((_silver_legs_15737 < _r_legs_15735._d))
{
(_r_legs_15735._d = _silver_legs_15737);
(_r_legs_15735._mat = float3(0.80000001, 0.80000001, 0.80000001));
}
(_legs_return_value_15734 = _r_legs_15735);
(_legs_has_returned_15733 = true);
(_legs_return_value_inlined_56_15771 = _legs_return_value_15734);
(_r_ed209_15772 = _legs_return_value_inlined_56_15771);
(_f_ed209_15773 = min((_stretch_1 * 2.0), 1.0));
float s1790 = {0};
if ((_f_ed209_15773 < 0.5))
{
(s1790 = smoothstep(0.0, 0.5, _f_ed209_15773));
}
else
{
(s1790 = (1.0 - (smoothstep(0.5, 1.0, _f_ed209_15773) * 0.2)));
}
(_slide_ed209_15774 = s1790);
(_p_ed209_15724.yz -= (_slide_ed209_15774 * 0.5));
(_gunsUp_1 = smoothstep(0.0, 1.0, clamp(((_stretch_1 - 0.66000003) * 6.0), 0.0, 1.0)));
(_fireShock_has_returned_15662 = false);
(_fireShock_return_value_15663 = abs(sin((_edShoot_1 * 78.537498))));
(_fireShock_has_returned_15662 = true);
(_fireShock_return_value_inlined_57_15775 = _fireShock_return_value_15663);
(_gunsForward_1 = (smoothstep(0.0, 1.0, clamp(((_stretch_1 - 0.82999998) * 6.0), 0.0, 1.0)) + (_fireShock_return_value_inlined_57_15775 * 0.5)));
(_p_waist_15776 = _p_ed209_15724);
(_waist_has_returned_15777 = false);
(_mat_setBodyMaterial_15736 = _r_waist_15779);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_waist_15779 = _mat_setBodyMaterial_15736);
(_p_waist_15776.y += 0.64999998);
(_a_rot_15714 = -0.2);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_33_15780 = _rot_return_value_15716);
(_p_waist_15776.yz = mul(_p_waist_15776.yz, transpose(_rot_return_value_inlined_33_15780)));
(_f_legWalkAngle_15727 = 1.0);
(_legWalkAngle_has_returned_15728 = false);
(_legWalkAngle_return_value_15729 = (sin((((_edWalk_1 * 3.141) * 6.0) * _f_legWalkAngle_15727)) * 0.2));
(_legWalkAngle_has_returned_15728 = true);
(_legWalkAngle_return_value_inlined_34_15783 = _legWalkAngle_return_value_15729);
(_legAngle_waist_15784 = _legWalkAngle_return_value_inlined_34_15783);
(_a_rot_15714 = (_legAngle_waist_15784 * 0.30000001));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_35_15785 = _rot_return_value_15716);
(_p_waist_15776.xy = mul(_p_waist_15776.xy, transpose(_rot_return_value_inlined_35_15785)));
(_pp_waist_15786 = _p_waist_15776);
(_pp_waist_15786.y += 0.30000001);
(_p_sdCappedCylinder_15787 = _pp_waist_15786.zyx);
(_h_sdCappedCylinder_15788 = 0.5);
(_r_sdCappedCylinder_15789 = 0.5);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_36_15793 = _sdCappedCylinder_return_value_15791);
(_r_waist_15779._d = max(_sdCappedCylinder_return_value_inlined_36_15793, (_p_waist_15776.y + 0.15000001)));
(_bump_waist_15781 = (0.5 - (abs(sin((_p_waist_15776.y * 40.0))) * 0.029999999)));
(_p_sdBox_15696 = _p_waist_15776);
(_b_sdBox_15697 = vec3_ctor(_bump_waist_15781, 0.15000001, _bump_waist_15781));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_37_15794 = _sdBox_return_value_15699);
(_d_waist_15782 = _sdBox_return_value_inlined_37_15794);
(_bump_waist_15781 = (0.30000001 - (abs(sin((_p_waist_15776.x * 40.0))) * 0.029999999)));
(_pp_waist_15786.y += 0.18000001);
(_p_sdCappedCylinder_15787 = _pp_waist_15786.zyx);
(_h_sdCappedCylinder_15788 = _bump_waist_15781);
(_r_sdCappedCylinder_15789 = 0.75);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_38_15795 = _sdCappedCylinder_return_value_15791);
(_d_waist_15782 = min(_d_waist_15782, _sdCappedCylinder_return_value_inlined_38_15795));
(_pp_waist_15786.x = abs(_pp_waist_15786.x));
(_a_rot_15714 = (-0.58525002 + (_legAngle_waist_15784 * sign(_p_waist_15776.x))));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_39_15796 = _rot_return_value_15716);
(_pp_waist_15786.yz = mul(_pp_waist_15786.yz, transpose(_rot_return_value_inlined_39_15796)));
(_pp_waist_15786.x -= 0.98000002);
(_p_sdCappedCylinder_15787 = _pp_waist_15786.zyx);
(_h_sdCappedCylinder_15788 = 0.40000001);
(_r_sdCappedCylinder_15789 = 0.23999999);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_40_15797 = _sdCappedCylinder_return_value_15791);
(_r_waist_15779._d = min(_r_waist_15779._d, max(_sdCappedCylinder_return_value_inlined_40_15797, (-_pp_waist_15786.y))));
(_p_sdBox_15696 = _pp_waist_15786);
(_b_sdBox_15697 = vec3_ctor(0.23999999, 0.2, (0.14 + (0.2 * _pp_waist_15786.y))));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_41_15798 = _sdBox_return_value_15699);
(_r_waist_15779._d = min(_r_waist_15779._d, _sdBox_return_value_inlined_41_15798));
(_p_waist_15776 = _pp_waist_15786);
(_pp_waist_15786.xz = (abs(_pp_waist_15786.xz) - float2(0.12, 0.25)));
(_p_sdCappedCylinder_15787 = _pp_waist_15786.xzy);
(_h_sdCappedCylinder_15788 = 0.1);
(_r_sdCappedCylinder_15789 = 0.32499999);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_42_15799 = _sdCappedCylinder_return_value_15791);
(_p_sdCappedCylinder_15787 = _pp_waist_15786.xzy);
(_h_sdCappedCylinder_15788 = 0.050000001);
(_r_sdCappedCylinder_15789 = 0.5);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_43_15800 = _sdCappedCylinder_return_value_15791);
(_r_waist_15779._d = min(_r_waist_15779._d, max(min(_sdCappedCylinder_return_value_inlined_42_15799, _sdCappedCylinder_return_value_inlined_43_15800), _pp_waist_15786.y)));
(_p_waist_15776.y += 0.68000001);
(_p_sdBox_15696 = _p_waist_15776);
(_b_sdBox_15697 = vec3_ctor(((sign((abs(_p_waist_15776.y) - 0.039999999)) * 0.0049999999) + 0.25999999), 0.2, 0.34));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_44_15801 = _sdBox_return_value_15699);
(_r_waist_15779._d = min(_r_waist_15779._d, _sdBox_return_value_inlined_44_15801));
if ((_d_waist_15782 < _r_waist_15779._d))
{
(_r_waist_15779._d = _d_waist_15782);
(_r_waist_15779._mat = float3(0.02, 0.02, 0.02));
}
(_waist_return_value_15778 = _r_waist_15779);
(_waist_has_returned_15777 = true);
(_waist_return_value_inlined_58_15802 = _waist_return_value_15778);
(_a_minResult_15803 = _r_ed209_15772);
(_b_minResult_15804 = _waist_return_value_inlined_58_15802);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_59_15807 = _minResult_return_value_15806);
(_r_ed209_15772 = _minResult_return_value_inlined_59_15807);
(_f_legWalkAngle_15727 = 2.0);
(_legWalkAngle_has_returned_15728 = false);
(_legWalkAngle_return_value_15729 = (sin((((_edWalk_1 * 3.141) * 6.0) * _f_legWalkAngle_15727)) * 0.2));
(_legWalkAngle_has_returned_15728 = true);
(_legWalkAngle_return_value_inlined_60_15808 = _legWalkAngle_return_value_15729);
(_a_rot_15714 = (0.1 * ((((-_edDown_1) + _legWalkAngle_return_value_inlined_60_15808) + smoothstep(0.0, 1.0, clamp(((_stretch_1 - 0.5) * 6.0), 0.0, 1.0))) - 1.0)));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_61_15809 = _rot_return_value_15716);
(_p_ed209_15724.yz = mul(_p_ed209_15724.yz, transpose(_rot_return_value_inlined_61_15809)));
(_a_rot_15714 = (_edTwist_1 * 0.2));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_62_15810 = _rot_return_value_15716);
(_p_ed209_15724.xz = mul(_p_ed209_15724.xz, transpose(_rot_return_value_inlined_62_15810)));
(_p_headLower_15811 = _p_ed209_15724);
(_headLower_has_returned_15812 = false);
(_op_headLower_15814 = _p_headLower_15811);
(_p_headVisor_15815 = (_p_headLower_15811 * float3(0.94999999, -1.4, 0.94999999)));
(_h_headVisor_15816 = 1.0);
(_bump_headVisor_15817 = 0.0);
(_headVisor_has_returned_15818 = false);
(_bump_headVisor_15817 *= ((sin((_p_headVisor_15815.x * 150.0)) * sin((_p_headVisor_15815.y * 150.0))) * 0.0020000001));
(_p_sdBox_15696 = _p_headVisor_15815);
(_b_sdBox_15697 = vec3_ctor_int_int(1, _h_headVisor_15816, 2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_3_15821 = _sdBox_return_value_15699);
(_result_headVisor_15820._d = _sdBox_return_value_inlined_3_15821);
(_p_headSphere_15822 = _p_headVisor_15815);
(_headSphere_has_returned_15823 = false);
(_headSphere_return_value_15824 = ((length((_p_headSphere_15822 / float3(1.0, 0.80000001, 1.0))) - 1.0) * 0.80000001));
(_headSphere_has_returned_15823 = true);
(_headSphere_return_value_inlined_4_15825 = _headSphere_return_value_15824);
(_result_headVisor_15820._d = (max(lerp(_result_headVisor_15820._d, _headSphere_return_value_inlined_4_15825, 0.56999999), (-_p_headVisor_15815.y)) - _bump_headVisor_15817));
(_result_headVisor_15820._mat = float3(0.050000001, 0.050000001, 0.050000001));
(_result_headVisor_15820._specPower = 30.0);
(_headVisor_return_value_15819 = _result_headVisor_15820);
(_headVisor_has_returned_15818 = true);
(_headVisor_return_value_inlined_5_15826 = _headVisor_return_value_15819);
(_r_headLower_15827 = _headVisor_return_value_inlined_5_15826);
(_p_headVisor_15815 = ((_p_headLower_15811 + float3(0.0, 0.0099999998, 0.0)) * float3(0.94999999, 0.94999999, 0.94999999)));
(_h_headVisor_15816 = 1.0);
(_bump_headVisor_15817 = 0.0);
(_headVisor_has_returned_15818 = false);
(_bump_headVisor_15817 *= ((sin((_p_headVisor_15815.x * 150.0)) * sin((_p_headVisor_15815.y * 150.0))) * 0.0020000001));
(_p_sdBox_15696 = _p_headVisor_15815);
(_b_sdBox_15697 = vec3_ctor_int_int(1, _h_headVisor_15816, 2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_3_15821 = _sdBox_return_value_15699);
(_result_headVisor_15820._d = _sdBox_return_value_inlined_3_15821);
(_p_headSphere_15822 = _p_headVisor_15815);
(_headSphere_has_returned_15823 = false);
(_headSphere_return_value_15824 = ((length((_p_headSphere_15822 / float3(1.0, 0.80000001, 1.0))) - 1.0) * 0.80000001));
(_headSphere_has_returned_15823 = true);
(_headSphere_return_value_inlined_4_15825 = _headSphere_return_value_15824);
(_result_headVisor_15820._d = (max(lerp(_result_headVisor_15820._d, _headSphere_return_value_inlined_4_15825, 0.56999999), (-_p_headVisor_15815.y)) - _bump_headVisor_15817));
(_result_headVisor_15820._mat = float3(0.050000001, 0.050000001, 0.050000001));
(_result_headVisor_15820._specPower = 30.0);
(_headVisor_return_value_15819 = _result_headVisor_15820);
(_headVisor_has_returned_15818 = true);
(_headVisor_return_value_inlined_6_15828 = _headVisor_return_value_15819);
(_r_headLower_15827._d = min(_r_headLower_15827._d, max(max(_headVisor_return_value_inlined_6_15828._d, (_p_headLower_15811.y - 0.34999999)), (((_p_headLower_15811.y * 0.625) - _p_headLower_15811.z) - 0.66000003))));
(_a_rot_15714 = ((0.075000003 * (_gunsUp_1 - 1.0)) * sign(_p_headLower_15811.x)));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_7_15829 = _rot_return_value_15716);
(_p_headLower_15811.xy = mul(_p_headLower_15811.xy, transpose(_rot_return_value_inlined_7_15829)));
(_p_headLower_15811.x = (abs(_p_headLower_15811.x) - 1.33));
(_p_headLower_15811.y -= (0.1 - (_p_headLower_15811.x * 0.1)));
(_p_sdBox_15696 = _p_headLower_15811);
(_b_sdBox_15697 = vec3_ctor(0.40000001, (0.059999999 * (1.0 - _p_headLower_15811.x)), (0.30000001 - (_p_headLower_15811.x * 0.2))));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_8_15830 = _sdBox_return_value_15699);
(_r_headLower_15827._d = min(_r_headLower_15827._d, _sdBox_return_value_inlined_8_15830));
(_p_headLower_15811 = _op_headLower_15814);
(_p_headLower_15811.y = (abs((abs((_p_headLower_15811.y + 0.147)) - 0.055599999)) - 0.027799999));
(_p_sdBox_15696 = (_p_headLower_15811 + float3(0.0, 0.0, 1.5)));
(_b_sdBox_15697 = vec3_ctor(lerp(0.25, 0.55000001, (-_op_headLower_15814.y)), 0.015, 0.1));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_9_15831 = _sdBox_return_value_15699);
(_r_headLower_15827._d = max(_r_headLower_15827._d, (-_sdBox_return_value_inlined_9_15831)));
(_p_headLower_15811 = _op_headLower_15814);
(_p_headLower_15811.y = (abs((_p_headLower_15811.y + 0.16)) - 0.059999999));
(_p_headLower_15811.z -= -1.1);
(_p_sdCappedCylinder_15787 = _p_headLower_15811.xzy);
(_h_sdCappedCylinder_15788 = 1.0);
(_r_sdCappedCylinder_15789 = 0.029999999);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_10_15832 = _sdCappedCylinder_return_value_15791);
(_p_sdCappedCylinder_15787 = _p_headLower_15811.xzy);
(_h_sdCappedCylinder_15788 = 0.55000001);
(_r_sdCappedCylinder_15789 = 1.0);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_11_15833 = _sdCappedCylinder_return_value_15791);
(_r_headLower_15827._d = max(_r_headLower_15827._d, (-max(max(_sdCappedCylinder_return_value_inlined_10_15832, (-_sdCappedCylinder_return_value_inlined_11_15833)), (_p_headLower_15811.z + 0.2)))));
(_mat_setBodyMaterial_15736 = _r_headLower_15827);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_headLower_15827 = _mat_setBodyMaterial_15736);
(_headLower_return_value_15813 = _r_headLower_15827);
(_headLower_has_returned_15812 = true);
(_headLower_return_value_inlined_63_15834 = _headLower_return_value_15813);
(_a_minResult_15803 = _r_ed209_15772);
(_b_minResult_15804 = _headLower_return_value_inlined_63_15834);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_64_15835 = _minResult_return_value_15806);
(_p_headVisor_15815 = _p_ed209_15724);
(_h_headVisor_15816 = 0.80000001);
(_bump_headVisor_15817 = 1.0);
(_headVisor_has_returned_15818 = false);
(_bump_headVisor_15817 *= ((sin((_p_headVisor_15815.x * 150.0)) * sin((_p_headVisor_15815.y * 150.0))) * 0.0020000001));
(_p_sdBox_15696 = _p_headVisor_15815);
(_b_sdBox_15697 = vec3_ctor_int_int(1, _h_headVisor_15816, 2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_3_15821 = _sdBox_return_value_15699);
(_result_headVisor_15820._d = _sdBox_return_value_inlined_3_15821);
(_p_headSphere_15822 = _p_headVisor_15815);
(_headSphere_has_returned_15823 = false);
(_headSphere_return_value_15824 = ((length((_p_headSphere_15822 / float3(1.0, 0.80000001, 1.0))) - 1.0) * 0.80000001));
(_headSphere_has_returned_15823 = true);
(_headSphere_return_value_inlined_4_15825 = _headSphere_return_value_15824);
(_result_headVisor_15820._d = (max(lerp(_result_headVisor_15820._d, _headSphere_return_value_inlined_4_15825, 0.56999999), (-_p_headVisor_15815.y)) - _bump_headVisor_15817));
(_result_headVisor_15820._mat = float3(0.050000001, 0.050000001, 0.050000001));
(_result_headVisor_15820._specPower = 30.0);
(_headVisor_return_value_15819 = _result_headVisor_15820);
(_headVisor_has_returned_15818 = true);
(_headVisor_return_value_inlined_65_15836 = _headVisor_return_value_15819);
(_a_minResult_15803 = _minResult_return_value_inlined_64_15835);
(_b_minResult_15804 = _headVisor_return_value_inlined_65_15836);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_66_15837 = _minResult_return_value_15806);
(_p_arms_15838 = _p_ed209_15724);
(_arms_has_returned_15839 = false);
(_mat_setBodyMaterial_15736 = _r_arms_15842);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_arms_15842 = _mat_setBodyMaterial_15736);
(_p_arms_15838.x = abs(_p_arms_15838.x));
(_p_arms_15838.yz += float2(0.23999999, 0.0));
(_a_rot_15714 = (0.15000001 * (_gunsUp_1 - 1.0)));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_23_15843 = _rot_return_value_15716);
(_p_arms_15838.xy = mul(_p_arms_15838.xy, transpose(_rot_return_value_inlined_23_15843)));
(_p_sdCapsule_15844 = _p_arms_15838);
(_a_sdCapsule_15845 = float3(0.0, 0.0, 0.0));
(_b_sdCapsule_15846 = float3(1.5, 0.0, 0.0));
(_r_sdCapsule_15847 = 0.2);
(_sdCapsule_has_returned_15848 = false);
(_pa_sdCapsule_15850 = (_p_sdCapsule_15844 - _a_sdCapsule_15845));
(_ba_sdCapsule_15851 = (_b_sdCapsule_15846 - _a_sdCapsule_15845));
(_sdCapsule_return_value_15849 = (length((_pa_sdCapsule_15850 - (_ba_sdCapsule_15851 * clamp((dot(_pa_sdCapsule_15850, _ba_sdCapsule_15851) / dot(_ba_sdCapsule_15851, _ba_sdCapsule_15851)), 0.0, 1.0)))) - _r_sdCapsule_15847));
(_sdCapsule_has_returned_15848 = true);
(_sdCapsule_return_value_inlined_24_15852 = _sdCapsule_return_value_15849);
(_p_sdCapsule_15844 = _p_arms_15838);
(_a_sdCapsule_15845 = float3(1.5, 0.0, 0.0));
(_b_sdCapsule_15846 = float3(1.5, 0.0, -0.30000001));
(_r_sdCapsule_15847 = 0.2);
(_sdCapsule_has_returned_15848 = false);
(_pa_sdCapsule_15850 = (_p_sdCapsule_15844 - _a_sdCapsule_15845));
(_ba_sdCapsule_15851 = (_b_sdCapsule_15846 - _a_sdCapsule_15845));
(_sdCapsule_return_value_15849 = (length((_pa_sdCapsule_15850 - (_ba_sdCapsule_15851 * clamp((dot(_pa_sdCapsule_15850, _ba_sdCapsule_15851) / dot(_ba_sdCapsule_15851, _ba_sdCapsule_15851)), 0.0, 1.0)))) - _r_sdCapsule_15847));
(_sdCapsule_has_returned_15848 = true);
(_sdCapsule_return_value_inlined_25_15853 = _sdCapsule_return_value_15849);
(_r_arms_15842._d = min(_sdCapsule_return_value_inlined_24_15852, _sdCapsule_return_value_inlined_25_15853));
(_p_arms_15838 -= float3(1.5, 0.0, -0.30000001));
(_p_arms_15838.z -= (_gunsForward_1 * 0.15000001));
(_p_gunPod_15854 = _p_arms_15838);
(_gunPod_has_returned_15855 = false);
(_mat_setBodyMaterial_15736 = _r_gunPod_15857);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_gunPod_15857 = _mat_setBodyMaterial_15736);
(_p_gunPod_15854.yz += float2(0.1, 0.44999999));
(_pp_gunPod_15858 = _p_gunPod_15854);
(_pp_gunPod_15858.z = (abs(_pp_gunPod_15858.z) - 0.5));
(_p_sdCappedCone_15859 = _pp_gunPod_15858);
(_a_sdCappedCone_15860 = float3(0.0, 0.0, 0.0));
(_b_sdCappedCone_15861 = float3(0.0, 0.0, -0.1));
(_ra_sdCappedCone_15862 = 0.25);
(_rb_sdCappedCone_15863 = 0.34999999);
(_sdCappedCone_has_returned_15864 = false);
(_rba_sdCappedCone_15866 = (_rb_sdCappedCone_15863 - _ra_sdCappedCone_15862));
(_baba_sdCappedCone_15867 = dot((_b_sdCappedCone_15861 - _a_sdCappedCone_15860), (_b_sdCappedCone_15861 - _a_sdCappedCone_15860)));
(_papa_sdCappedCone_15868 = dot((_p_sdCappedCone_15859 - _a_sdCappedCone_15860), (_p_sdCappedCone_15859 - _a_sdCappedCone_15860)));
(_paba_sdCappedCone_15869 = (dot((_p_sdCappedCone_15859 - _a_sdCappedCone_15860), (_b_sdCappedCone_15861 - _a_sdCappedCone_15860)) / _baba_sdCappedCone_15867));
(_x_sdCappedCone_15870 = sqrt((_papa_sdCappedCone_15868 - ((_paba_sdCappedCone_15869 * _paba_sdCappedCone_15869) * _baba_sdCappedCone_15867))));
float s1791 = {0};
if ((_paba_sdCappedCone_15869 < 0.5))
{
(s1791 = _ra_sdCappedCone_15862);
}
else
{
(s1791 = _rb_sdCappedCone_15863);
}
(_cax_sdCappedCone_15871 = max(0.0, (_x_sdCappedCone_15870 - s1791)));
(_cay_sdCappedCone_15872 = (abs((_paba_sdCappedCone_15869 - 0.5)) - 0.5));
(_f_sdCappedCone_15873 = clamp((((_rba_sdCappedCone_15866 * (_x_sdCappedCone_15870 - _ra_sdCappedCone_15862)) + (_paba_sdCappedCone_15869 * _baba_sdCappedCone_15867)) / ((_rba_sdCappedCone_15866 * _rba_sdCappedCone_15866) + _baba_sdCappedCone_15867)), 0.0, 1.0));
(_cbx_sdCappedCone_15874 = ((_x_sdCappedCone_15870 - _ra_sdCappedCone_15862) - (_f_sdCappedCone_15873 * _rba_sdCappedCone_15866)));
(_cby_sdCappedCone_15875 = (_paba_sdCappedCone_15869 - _f_sdCappedCone_15873));
float s1792 = {0};
if (((_cbx_sdCappedCone_15874 < 0.0) && (_cay_sdCappedCone_15872 < 0.0)))
{
(s1792 = -1.0);
}
else
{
(s1792 = 1.0);
}
(_sdCappedCone_return_value_15865 = (s1792 * sqrt(min(((_cax_sdCappedCone_15871 * _cax_sdCappedCone_15871) + ((_cay_sdCappedCone_15872 * _cay_sdCappedCone_15872) * _baba_sdCappedCone_15867)), ((_cbx_sdCappedCone_15874 * _cbx_sdCappedCone_15874) + ((_cby_sdCappedCone_15875 * _cby_sdCappedCone_15875) * _baba_sdCappedCone_15867))))));
(_sdCappedCone_has_returned_15864 = true);
(_sdCappedCone_return_value_inlined_12_15876 = _sdCappedCone_return_value_15865);
(_r_gunPod_15857._d = _sdCappedCone_return_value_inlined_12_15876);
(_p_sdCappedCylinder_15787 = _p_gunPod_15854);
(_h_sdCappedCylinder_15788 = 0.34999999);
(_r_sdCappedCylinder_15789 = 0.40000001);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_13_15877 = _sdCappedCylinder_return_value_15791);
(_r_gunPod_15857._d = min(_r_gunPod_15857._d, _sdCappedCylinder_return_value_inlined_13_15877));
(_pp_gunPod_15858 = vec3_ctor(_p_gunPod_15854.x, (0.28 - _p_gunPod_15854.y), _p_gunPod_15854.z));
(_p_sdTriPrism_15878 = _pp_gunPod_15858);
(_h_sdTriPrism_15879 = float2(0.1, 0.5));
(_sdTriPrism_has_returned_15880 = false);
(_q_sdTriPrism_15882 = abs(_p_sdTriPrism_15878));
(_sdTriPrism_return_value_15881 = max((_q_sdTriPrism_15882.z - _h_sdTriPrism_15879.y), (max(((_q_sdTriPrism_15882.x * 0.86602497) + (_p_sdTriPrism_15878.y * 0.5)), (-_p_sdTriPrism_15878.y)) - (_h_sdTriPrism_15879.x * 0.5))));
(_sdTriPrism_has_returned_15880 = true);
(_sdTriPrism_return_value_inlined_14_15883 = _sdTriPrism_return_value_15881);
(_r_gunPod_15857._d = min(_r_gunPod_15857._d, _sdTriPrism_return_value_inlined_14_15883));
(_pp_gunPod_15858 = _p_gunPod_15854);
(_pp_gunPod_15858.x = abs(_p_gunPod_15854.x));
(_a_rot_15714 = 0.78525001);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_15_15884 = _rot_return_value_15716);
(_pp_gunPod_15858.xy = mul(_pp_gunPod_15858.xy, transpose(_rot_return_value_inlined_15_15884)));
(_bump_gunPod_15886 = (sign(sin((_pp_gunPod_15858.z * 33.299999))) * 0.003));
(_p_sdBox_15696 = _pp_gunPod_15858);
(_b_sdBox_15697 = vec3_ctor((0.1 - _bump_gunPod_15886), (0.38 - _bump_gunPod_15886), 0.34));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_16_15887 = _sdBox_return_value_15699);
(_d_gunPod_15888 = (_sdBox_return_value_inlined_16_15887 - 0.02));
(_pp_gunPod_15858 = (_p_gunPod_15854 - float3(0.0, 0.0, -0.60000002)));
(_pp_gunPod_15858.x = (abs(_pp_gunPod_15858.x) - 0.1));
(_p_sdCappedCylinder_15787 = _pp_gunPod_15858);
(_h_sdCappedCylinder_15788 = 0.059999999);
(_r_sdCappedCylinder_15789 = 0.15000001);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_17_15889 = _sdCappedCylinder_return_value_15791);
(_p_sdCappedCylinder_15787 = (_pp_gunPod_15858 + float3(0.0, 0.12, -0.050000001)));
(_h_sdCappedCylinder_15788 = 0.059999999);
(_r_sdCappedCylinder_15789 = 0.050000001);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_18_15890 = _sdCappedCylinder_return_value_15791);
(_p_sdBox_15696 = (_p_gunPod_15854 + float3(0.0, 0.0, 0.54000002)));
(_b_sdBox_15697 = float3(0.1, 0.059999999, 0.039999999));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_19_15891 = _sdBox_return_value_15699);
(_d_gunPod_15888 = min(min(min(_d_gunPod_15888, _sdCappedCylinder_return_value_inlined_17_15889), _sdCappedCylinder_return_value_inlined_18_15890), _sdBox_return_value_inlined_19_15891));
if ((_d_gunPod_15888 < _r_gunPod_15857._d))
{
(_p_sdCappedCylinder_15787 = (_pp_gunPod_15858 + float3(0.0, 0.0, 0.1)));
(_h_sdCappedCylinder_15788 = 0.029999999);
(_r_sdCappedCylinder_15789 = 0.2);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_20_15892 = _sdCappedCylinder_return_value_15791);
(_d_gunPod_15888 = max(_d_gunPod_15888, (-_sdCappedCylinder_return_value_inlined_20_15892)));
(_r_gunPod_15857._d = _d_gunPod_15888);
(_r_gunPod_15857._mat = float3(0.02, 0.02, 0.02));
}
(_fireShock_has_returned_15662 = false);
(_fireShock_return_value_15663 = abs(sin((_edShoot_1 * 78.537498))));
(_fireShock_has_returned_15662 = true);
(_fireShock_return_value_inlined_21_15893 = _fireShock_return_value_15663);
(_fs_gunPod_15885 = _fireShock_return_value_inlined_21_15893);
if ((_fs_gunPod_15885 > 0.5))
{
(_p_sdCappedCylinder_15787 = _pp_gunPod_15858);
(_h_sdCappedCylinder_15788 = (0.0099999998 + (_pp_gunPod_15858.z * 0.050000001)));
(_r_sdCappedCylinder_15789 = ((frac((_fs_gunPod_15885 * 3322.4231)) * 0.5) + 0.89999998));
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_22_15894 = _sdCappedCylinder_return_value_15791);
(_d_gunPod_15888 = _sdCappedCylinder_return_value_inlined_22_15894);
if ((_d_gunPod_15888 < _r_gunPod_15857._d))
{
(_r_gunPod_15857._d = _d_gunPod_15888);
(_r_gunPod_15857._mat = float3(1.0, 1.0, 1.0));
(_glow_1 += (0.1 / (0.0099999998 + ((_d_gunPod_15888 * _d_gunPod_15888) * 400.0))));
}
}
(_gunPod_return_value_15856 = _r_gunPod_15857);
(_gunPod_has_returned_15855 = true);
(_gunPod_return_value_inlined_26_15895 = _gunPod_return_value_15856);
(_a_minResult_15803 = _r_arms_15842);
(_b_minResult_15804 = _gunPod_return_value_inlined_26_15895);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_27_15896 = _minResult_return_value_15806);
(_arms_return_value_15840 = _minResult_return_value_inlined_27_15896);
(_arms_has_returned_15839 = true);
(_arms_return_value_inlined_67_15897 = _arms_return_value_15840);
(_a_minResult_15803 = _minResult_return_value_inlined_66_15837);
(_b_minResult_15804 = _arms_return_value_inlined_67_15897);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_68_15898 = _minResult_return_value_15806);
(_ed209_return_value_15726 = _minResult_return_value_inlined_68_15898);
(_ed209_has_returned_15725 = true);
(_ed209_return_value_inlined_79_15899 = _ed209_return_value_15726);
(_a_minResult_15803 = _room_return_value_inlined_78_15723);
(_b_minResult_15804 = _ed209_return_value_inlined_79_15899);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_80_15900 = _minResult_return_value_15806);
(_r_map_15901 = _minResult_return_value_inlined_80_15900);
(_gnd_map_15902 = length((_p_map_15683.y + 3.0)));
if ((_gnd_map_15902 < _r_map_15901._d))
{
(_r_map_15901._d = _gnd_map_15902);
(_r_map_15901._mat = float3(0.1, 0.1, 0.1));
}
(_map_return_value_15685 = _r_map_15901);
(_map_has_returned_15684 = true);
(_map_return_value_inlined_81_15936 = _map_return_value_15685);
(_h_calcShadow_15937 = _map_return_value_inlined_81_15936._d);
(_res_calcShadow_15933 = min(_res_calcShadow_15933, ((12.0 * _h_calcShadow_15937) / _t_calcShadow_15934)));
(_t_calcShadow_15934 += _h_calcShadow_15937);
if (((_res_calcShadow_15933 < 0.001) || (_t_calcShadow_15934 > 25.0)))
{
break;
}
}
}
(_calcShadow_return_value_15931 = clamp(_res_calcShadow_15933, 0.0, 1.0));
(_calcShadow_has_returned_15930 = true);
(_calcShadow_return_value_inlined_88_15938 = _calcShadow_return_value_15931);
(_primary_applyLighting_15923 *= lerp(0.2, 1.0, _calcShadow_return_value_inlined_88_15938));
(_p_ao_15939 = _p_applyLighting_15904);
(_n_ao_15940 = _n_applyLighting_15922);
(_h_ao_15941 = 0.33000001);
(_ao_has_returned_15942 = false);
(_p_map_15683 = (_p_ao_15939 + (_h_ao_15941 * _n_ao_15940)));
(_map_has_returned_15684 = false);
(_p_room_15686 = _p_map_15683);
(_room_has_returned_15687 = false);
(_r_room_15690._mat = float3(0.40000001, 0.40000001, 0.40000001));
(_r_room_15690._specPower = 10000000.0);
(_xy_room_15691 = (_p_room_15686.xy - float2(0.0, 2.0)));
(_p_room_15686.x = abs(_p_room_15686.x));
(_p_room_15686.yz += float2(0.5, -3.4000001));
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = float3(2.8, 2.5999999, 1.1));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_69_15701 = _sdBox_return_value_15699);
(_doorHole_room_15702 = _sdBox_return_value_inlined_69_15701);
(_backWall_room_15703 = length((_p_room_15686.z - 8.0)));
(_r_room_15690._d = min(_backWall_room_15703, max(length(_p_room_15686.z), ((-_doorHole_room_15702) + 0.1))));
if ((_r_room_15690._d == _backWall_room_15703))
{
(_p_sdOctogon_15704 = _xy_room_15691);
(_r_sdOctogon_15705 = 2.5999999);
(_sdOctogon_has_returned_15706 = false);
(_p_sdOctogon_15704 = abs(_p_sdOctogon_15704));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(-0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(-0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= vec2_ctor(clamp(_p_sdOctogon_15704.x, (-0.41421357 * _r_sdOctogon_15705), (0.41421357 * _r_sdOctogon_15705)), _r_sdOctogon_15705));
(_sdOctogon_return_value_15707 = (length(_p_sdOctogon_15704) * sign(_p_sdOctogon_15704.y)));
(_sdOctogon_has_returned_15706 = true);
(_sdOctogon_return_value_inlined_70_15709 = _sdOctogon_return_value_15707);
(_p_sdOctogon_15704 = _xy_room_15691);
(_r_sdOctogon_15705 = 1.9);
(_sdOctogon_has_returned_15706 = false);
(_p_sdOctogon_15704 = abs(_p_sdOctogon_15704));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(-0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(-0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= vec2_ctor(clamp(_p_sdOctogon_15704.x, (-0.41421357 * _r_sdOctogon_15705), (0.41421357 * _r_sdOctogon_15705)), _r_sdOctogon_15705));
(_sdOctogon_return_value_15707 = (length(_p_sdOctogon_15704) * sign(_p_sdOctogon_15704.y)));
(_sdOctogon_has_returned_15706 = true);
(_sdOctogon_return_value_inlined_71_15710 = _sdOctogon_return_value_15707);
(_ocp_room_15711 = min(abs(_sdOctogon_return_value_inlined_70_15709), abs(_sdOctogon_return_value_inlined_71_15710)));
(_p_sdOctogon_15704 = _xy_room_15691);
(_r_sdOctogon_15705 = 1.2);
(_sdOctogon_has_returned_15706 = false);
(_p_sdOctogon_15704 = abs(_p_sdOctogon_15704));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(-0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(-0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= ((2.0 * min(dot(float2(0.9238795, 0.38268343), _p_sdOctogon_15704), 0.0)) * float2(0.9238795, 0.38268343)));
(_p_sdOctogon_15704 -= vec2_ctor(clamp(_p_sdOctogon_15704.x, (-0.41421357 * _r_sdOctogon_15705), (0.41421357 * _r_sdOctogon_15705)), _r_sdOctogon_15705));
(_sdOctogon_return_value_15707 = (length(_p_sdOctogon_15704) * sign(_p_sdOctogon_15704.y)));
(_sdOctogon_has_returned_15706 = true);
(_sdOctogon_return_value_inlined_72_15712 = _sdOctogon_return_value_15707);
(_ocp_room_15711 = min(max(_ocp_room_15711, min((0.69999999 - abs((_xy_room_15691.x + 1.2))), (-_xy_room_15691.y))), max(abs(_sdOctogon_return_value_inlined_72_15712), min(_xy_room_15691.x, (0.69999999 - abs(_xy_room_15691.y))))));
if ((_ocp_room_15711 < 0.30000001))
{
(_r_room_15690._mat = float3(0.38999999, 0.56999999, 0.70999998));
}
}
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = float3(3.2, 3.0, 0.2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_73_15713 = _sdBox_return_value_15699);
(_doorFrame_room_15692 = max(_sdBox_return_value_inlined_73_15713, (-_doorHole_room_15702)));
(_doorWidth_room_15693 = 1.4);
(_p_room_15686.x -= 2.8);
(_a_rot_15714 = (_doorOpen_1 * 2.0999999));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_74_15719 = _rot_return_value_15716);
(_p_room_15686.xz = mul(_p_room_15686.xz, transpose(_rot_return_value_inlined_74_15719)));
(_p_room_15686.x += _doorWidth_room_15693);
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = vec3_ctor(_doorWidth_room_15693, float2(2.5999999, 0.1)));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_75_15720 = _sdBox_return_value_15699);
(_door_room_15694 = _sdBox_return_value_inlined_75_15720);
(_p_room_15686 = (abs(_p_room_15686) - vec3_ctor((_doorWidth_room_15693 * 0.5), 1.1, 0.14)));
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = float3(0.44999999, 0.89999998, 0.1));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_76_15721 = _sdBox_return_value_15699);
(_p_sdBox_15696 = _p_room_15686);
(_b_sdBox_15697 = float3(0.34999999, 0.80000001, 1.0));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_77_15722 = _sdBox_return_value_15699);
(_d_room_15695 = min(_doorFrame_room_15692, max(_door_room_15694, (-max(_sdBox_return_value_inlined_76_15721, (-_sdBox_return_value_inlined_77_15722))))));
if ((_d_room_15695 < _r_room_15690._d))
{
(_r_room_15690._d = _d_room_15695);
(_r_room_15690._mat = float3(0.02, 0.02, 0.024));
(_r_room_15690._specPower = 10.0);
}
(_room_return_value_15688 = _r_room_15690);
(_room_has_returned_15687 = true);
(_room_return_value_inlined_78_15723 = _room_return_value_15688);
(_p_ed209_15724 = _p_map_15683);
(_ed209_has_returned_15725 = false);
(_f_legWalkAngle_15727 = 2.0);
(_legWalkAngle_has_returned_15728 = false);
(_legWalkAngle_return_value_15729 = (sin((((_edWalk_1 * 3.141) * 6.0) * _f_legWalkAngle_15727)) * 0.2));
(_legWalkAngle_has_returned_15728 = true);
(_legWalkAngle_return_value_inlined_54_15730 = _legWalkAngle_return_value_15729);
(_edZ_has_returned_15633 = false);
(_edZ_return_value_15634 = lerp(5.0, -2.0, _edWalk_1));
(_edZ_has_returned_15633 = true);
(_edZ_return_value_inlined_55_15731 = _edZ_return_value_15634);
(_p_ed209_15724.yz += vec2_ctor(((_legWalkAngle_return_value_inlined_54_15730 * 0.2) + 0.1), (-_edZ_return_value_inlined_55_15731)));
(_p_legs_15732 = _p_ed209_15724);
(_legs_has_returned_15733 = false);
(_mat_setBodyMaterial_15736 = _r_legs_15735);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_legs_15735 = _mat_setBodyMaterial_15736);
(_f_legWalkAngle_15727 = 1.0);
(_legWalkAngle_has_returned_15728 = false);
(_legWalkAngle_return_value_15729 = (sin((((_edWalk_1 * 3.141) * 6.0) * _f_legWalkAngle_15727)) * 0.2));
(_legWalkAngle_has_returned_15728 = true);
(_legWalkAngle_return_value_inlined_45_15738 = _legWalkAngle_return_value_15729);
(_legAngle_legs_15739 = _legWalkAngle_return_value_inlined_45_15738);
(_p_legs_15732.z += 0.27000001);
(_a_rot_15714 = (_legAngle_legs_15739 * sign(_p_legs_15732.x)));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_46_15740 = _rot_return_value_15716);
(_p_legs_15732.yz = mul(_p_legs_15732.yz, transpose(_rot_return_value_inlined_46_15740)));
(_p_legs_15732.z -= 0.27000001);
(_p_legs_15732.y += 0.64999998);
(_a_rot_15714 = -0.2);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_47_15741 = _rot_return_value_15716);
(_p_legs_15732.yz = mul(_p_legs_15732.yz, transpose(_rot_return_value_inlined_47_15741)));
(_a_rot_15714 = (_legAngle_legs_15739 * 0.30000001));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_48_15742 = _rot_return_value_15716);
(_p_legs_15732.xy = mul(_p_legs_15732.xy, transpose(_rot_return_value_inlined_48_15742)));
(_pp_legs_15744 = _p_legs_15732);
(_pp_legs_15744.x = abs(_pp_legs_15744.x));
(_pp_legs_15744.y += 0.47999999);
(_a_rot_15714 = -0.58525002);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_49_15745 = _rot_return_value_15716);
(_pp_legs_15744.yz = mul(_pp_legs_15744.yz, transpose(_rot_return_value_inlined_49_15745)));
(_pp_legs_15744.x -= 0.98000002);
(_cp_legs_15743 = _pp_legs_15744);
(_p_legs_15732 = _pp_legs_15744);
(_pp_legs_15744.xz = (abs(_pp_legs_15744.xz) - float2(0.12, 0.25)));
(_p_legs_15732.y += 0.68000001);
(_p_legs_15732.xy = (abs(_p_legs_15732.xy) - 0.12));
(_p_sdBox_15696 = _p_legs_15732);
(_b_sdBox_15697 = float3(0.07, 0.050000001, 1.2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_50_15746 = _sdBox_return_value_15699);
(_silver_legs_15737 = _sdBox_return_value_inlined_50_15746);
(_cp_legs_15743 -= float3(0.0, -0.69999999, 0.0));
(_p_sdBox_15696 = (_cp_legs_15743 - float3(0.0, 0.0, 1.15)));
(_b_sdBox_15697 = float3(0.17, 0.17, 0.07));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_51_15747 = _sdBox_return_value_15699);
(_r_legs_15735._d = (_sdBox_return_value_inlined_51_15747 - 0.039999999));
(_cp_legs_15743.z++);
(_p_sdChamferedCube_15748 = _cp_legs_15743.xzy);
(_r_sdChamferedCube_15749 = vec2_ctor((0.28 - (sign((abs(_cp_legs_15743.z) - 0.30000001)) * 0.0099999998)), 0.5).xyx);
(_c_sdChamferedCube_15750 = 0.18000001);
(_sdChamferedCube_has_returned_15751 = false);
(_p_sdBox_15696 = _p_sdChamferedCube_15748);
(_b_sdBox_15697 = _r_sdChamferedCube_15749);
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_0_15753 = _sdBox_return_value_15699);
(_cube_sdChamferedCube_15754 = _sdBox_return_value_inlined_0_15753);
(_a_rot_15714 = 0.78525001);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_1_15755 = _rot_return_value_15716);
(_p_sdChamferedCube_15748.xz = mul(_p_sdChamferedCube_15748.xz, transpose(_rot_return_value_inlined_1_15755)));
(_r_sdChamferedCube_15749.xz *= (((-_c_sdChamferedCube_15750) / 1.41) + 1.41));
(_p_sdBox_15696 = _p_sdChamferedCube_15748);
(_b_sdBox_15697 = _r_sdChamferedCube_15749);
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_2_15756 = _sdBox_return_value_15699);
(_sdChamferedCube_return_value_15752 = max(_cube_sdChamferedCube_15754, _sdBox_return_value_inlined_2_15756));
(_sdChamferedCube_has_returned_15751 = true);
(_sdChamferedCube_return_value_inlined_52_15757 = _sdChamferedCube_return_value_15752);
(_r_legs_15735._d = min(_r_legs_15735._d, _sdChamferedCube_return_value_inlined_52_15757));
(_p_foot_15758 = _cp_legs_15743);
(_foot_has_returned_15759 = false);
(_p_foot_15758.z += 0.80000001);
(_a_rot_15714 = 0.86000001);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_29_15761 = _rot_return_value_15716);
(_p_foot_15758.yz = mul(_p_foot_15758.yz, transpose(_rot_return_value_inlined_29_15761)));
(_p_toe_15762 = _p_foot_15758);
(_toe_has_returned_15763 = false);
(_p_toe_15762.yz += float2(0.1, 0.31999999));
(_p_sdBox_15696 = _p_toe_15762);
(_b_sdBox_15697 = vec3_ctor(((0.30000001 + (0.2 * (_p_toe_15762.z - 0.18000001))) - (_p_toe_15762.y * 0.228)), (0.30000001 + (0.2 * cos(((_p_toe_15762.z - 0.18000001) * 3.6900001)))), 0.34999999));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_28_15765 = _sdBox_return_value_15699);
(_toe_return_value_15764 = max(_sdBox_return_value_inlined_28_15765, (0.1 - _p_toe_15762.y)));
(_toe_has_returned_15763 = true);
(_toe_return_value_inlined_30_15766 = _toe_return_value_15764);
(_d_foot_15767 = _toe_return_value_inlined_30_15766);
(_a_rot_15714 = 1.5700001);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_31_15768 = _rot_return_value_15716);
(_p_foot_15758.xz = mul(_p_foot_15758.xz, transpose(_rot_return_value_inlined_31_15768)));
(_p_foot_15758.x -= 0.43000001);
(_p_foot_15758.z = (0.25 - abs(_p_foot_15758.z)));
(_p_toe_15762 = _p_foot_15758);
(_toe_has_returned_15763 = false);
(_p_toe_15762.yz += float2(0.1, 0.31999999));
(_p_sdBox_15696 = _p_toe_15762);
(_b_sdBox_15697 = vec3_ctor(((0.30000001 + (0.2 * (_p_toe_15762.z - 0.18000001))) - (_p_toe_15762.y * 0.228)), (0.30000001 + (0.2 * cos(((_p_toe_15762.z - 0.18000001) * 3.6900001)))), 0.34999999));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_28_15765 = _sdBox_return_value_15699);
(_toe_return_value_15764 = max(_sdBox_return_value_inlined_28_15765, (0.1 - _p_toe_15762.y)));
(_toe_has_returned_15763 = true);
(_toe_return_value_inlined_32_15769 = _toe_return_value_15764);
(_foot_return_value_15760 = min(_d_foot_15767, _toe_return_value_inlined_32_15769));
(_foot_has_returned_15759 = true);
(_foot_return_value_inlined_53_15770 = _foot_return_value_15760);
(_r_legs_15735._d = min(_r_legs_15735._d, _foot_return_value_inlined_53_15770));
if ((_silver_legs_15737 < _r_legs_15735._d))
{
(_r_legs_15735._d = _silver_legs_15737);
(_r_legs_15735._mat = float3(0.80000001, 0.80000001, 0.80000001));
}
(_legs_return_value_15734 = _r_legs_15735);
(_legs_has_returned_15733 = true);
(_legs_return_value_inlined_56_15771 = _legs_return_value_15734);
(_r_ed209_15772 = _legs_return_value_inlined_56_15771);
(_f_ed209_15773 = min((_stretch_1 * 2.0), 1.0));
float s1793 = {0};
if ((_f_ed209_15773 < 0.5))
{
(s1793 = smoothstep(0.0, 0.5, _f_ed209_15773));
}
else
{
(s1793 = (1.0 - (smoothstep(0.5, 1.0, _f_ed209_15773) * 0.2)));
}
(_slide_ed209_15774 = s1793);
(_p_ed209_15724.yz -= (_slide_ed209_15774 * 0.5));
(_gunsUp_1 = smoothstep(0.0, 1.0, clamp(((_stretch_1 - 0.66000003) * 6.0), 0.0, 1.0)));
(_fireShock_has_returned_15662 = false);
(_fireShock_return_value_15663 = abs(sin((_edShoot_1 * 78.537498))));
(_fireShock_has_returned_15662 = true);
(_fireShock_return_value_inlined_57_15775 = _fireShock_return_value_15663);
(_gunsForward_1 = (smoothstep(0.0, 1.0, clamp(((_stretch_1 - 0.82999998) * 6.0), 0.0, 1.0)) + (_fireShock_return_value_inlined_57_15775 * 0.5)));
(_p_waist_15776 = _p_ed209_15724);
(_waist_has_returned_15777 = false);
(_mat_setBodyMaterial_15736 = _r_waist_15779);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_waist_15779 = _mat_setBodyMaterial_15736);
(_p_waist_15776.y += 0.64999998);
(_a_rot_15714 = -0.2);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_33_15780 = _rot_return_value_15716);
(_p_waist_15776.yz = mul(_p_waist_15776.yz, transpose(_rot_return_value_inlined_33_15780)));
(_f_legWalkAngle_15727 = 1.0);
(_legWalkAngle_has_returned_15728 = false);
(_legWalkAngle_return_value_15729 = (sin((((_edWalk_1 * 3.141) * 6.0) * _f_legWalkAngle_15727)) * 0.2));
(_legWalkAngle_has_returned_15728 = true);
(_legWalkAngle_return_value_inlined_34_15783 = _legWalkAngle_return_value_15729);
(_legAngle_waist_15784 = _legWalkAngle_return_value_inlined_34_15783);
(_a_rot_15714 = (_legAngle_waist_15784 * 0.30000001));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_35_15785 = _rot_return_value_15716);
(_p_waist_15776.xy = mul(_p_waist_15776.xy, transpose(_rot_return_value_inlined_35_15785)));
(_pp_waist_15786 = _p_waist_15776);
(_pp_waist_15786.y += 0.30000001);
(_p_sdCappedCylinder_15787 = _pp_waist_15786.zyx);
(_h_sdCappedCylinder_15788 = 0.5);
(_r_sdCappedCylinder_15789 = 0.5);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_36_15793 = _sdCappedCylinder_return_value_15791);
(_r_waist_15779._d = max(_sdCappedCylinder_return_value_inlined_36_15793, (_p_waist_15776.y + 0.15000001)));
(_bump_waist_15781 = (0.5 - (abs(sin((_p_waist_15776.y * 40.0))) * 0.029999999)));
(_p_sdBox_15696 = _p_waist_15776);
(_b_sdBox_15697 = vec3_ctor(_bump_waist_15781, 0.15000001, _bump_waist_15781));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_37_15794 = _sdBox_return_value_15699);
(_d_waist_15782 = _sdBox_return_value_inlined_37_15794);
(_bump_waist_15781 = (0.30000001 - (abs(sin((_p_waist_15776.x * 40.0))) * 0.029999999)));
(_pp_waist_15786.y += 0.18000001);
(_p_sdCappedCylinder_15787 = _pp_waist_15786.zyx);
(_h_sdCappedCylinder_15788 = _bump_waist_15781);
(_r_sdCappedCylinder_15789 = 0.75);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_38_15795 = _sdCappedCylinder_return_value_15791);
(_d_waist_15782 = min(_d_waist_15782, _sdCappedCylinder_return_value_inlined_38_15795));
(_pp_waist_15786.x = abs(_pp_waist_15786.x));
(_a_rot_15714 = (-0.58525002 + (_legAngle_waist_15784 * sign(_p_waist_15776.x))));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_39_15796 = _rot_return_value_15716);
(_pp_waist_15786.yz = mul(_pp_waist_15786.yz, transpose(_rot_return_value_inlined_39_15796)));
(_pp_waist_15786.x -= 0.98000002);
(_p_sdCappedCylinder_15787 = _pp_waist_15786.zyx);
(_h_sdCappedCylinder_15788 = 0.40000001);
(_r_sdCappedCylinder_15789 = 0.23999999);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_40_15797 = _sdCappedCylinder_return_value_15791);
(_r_waist_15779._d = min(_r_waist_15779._d, max(_sdCappedCylinder_return_value_inlined_40_15797, (-_pp_waist_15786.y))));
(_p_sdBox_15696 = _pp_waist_15786);
(_b_sdBox_15697 = vec3_ctor(0.23999999, 0.2, (0.14 + (0.2 * _pp_waist_15786.y))));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_41_15798 = _sdBox_return_value_15699);
(_r_waist_15779._d = min(_r_waist_15779._d, _sdBox_return_value_inlined_41_15798));
(_p_waist_15776 = _pp_waist_15786);
(_pp_waist_15786.xz = (abs(_pp_waist_15786.xz) - float2(0.12, 0.25)));
(_p_sdCappedCylinder_15787 = _pp_waist_15786.xzy);
(_h_sdCappedCylinder_15788 = 0.1);
(_r_sdCappedCylinder_15789 = 0.32499999);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_42_15799 = _sdCappedCylinder_return_value_15791);
(_p_sdCappedCylinder_15787 = _pp_waist_15786.xzy);
(_h_sdCappedCylinder_15788 = 0.050000001);
(_r_sdCappedCylinder_15789 = 0.5);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_43_15800 = _sdCappedCylinder_return_value_15791);
(_r_waist_15779._d = min(_r_waist_15779._d, max(min(_sdCappedCylinder_return_value_inlined_42_15799, _sdCappedCylinder_return_value_inlined_43_15800), _pp_waist_15786.y)));
(_p_waist_15776.y += 0.68000001);
(_p_sdBox_15696 = _p_waist_15776);
(_b_sdBox_15697 = vec3_ctor(((sign((abs(_p_waist_15776.y) - 0.039999999)) * 0.0049999999) + 0.25999999), 0.2, 0.34));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_44_15801 = _sdBox_return_value_15699);
(_r_waist_15779._d = min(_r_waist_15779._d, _sdBox_return_value_inlined_44_15801));
if ((_d_waist_15782 < _r_waist_15779._d))
{
(_r_waist_15779._d = _d_waist_15782);
(_r_waist_15779._mat = float3(0.02, 0.02, 0.02));
}
(_waist_return_value_15778 = _r_waist_15779);
(_waist_has_returned_15777 = true);
(_waist_return_value_inlined_58_15802 = _waist_return_value_15778);
(_a_minResult_15803 = _r_ed209_15772);
(_b_minResult_15804 = _waist_return_value_inlined_58_15802);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_59_15807 = _minResult_return_value_15806);
(_r_ed209_15772 = _minResult_return_value_inlined_59_15807);
(_f_legWalkAngle_15727 = 2.0);
(_legWalkAngle_has_returned_15728 = false);
(_legWalkAngle_return_value_15729 = (sin((((_edWalk_1 * 3.141) * 6.0) * _f_legWalkAngle_15727)) * 0.2));
(_legWalkAngle_has_returned_15728 = true);
(_legWalkAngle_return_value_inlined_60_15808 = _legWalkAngle_return_value_15729);
(_a_rot_15714 = (0.1 * ((((-_edDown_1) + _legWalkAngle_return_value_inlined_60_15808) + smoothstep(0.0, 1.0, clamp(((_stretch_1 - 0.5) * 6.0), 0.0, 1.0))) - 1.0)));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_61_15809 = _rot_return_value_15716);
(_p_ed209_15724.yz = mul(_p_ed209_15724.yz, transpose(_rot_return_value_inlined_61_15809)));
(_a_rot_15714 = (_edTwist_1 * 0.2));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_62_15810 = _rot_return_value_15716);
(_p_ed209_15724.xz = mul(_p_ed209_15724.xz, transpose(_rot_return_value_inlined_62_15810)));
(_p_headLower_15811 = _p_ed209_15724);
(_headLower_has_returned_15812 = false);
(_op_headLower_15814 = _p_headLower_15811);
(_p_headVisor_15815 = (_p_headLower_15811 * float3(0.94999999, -1.4, 0.94999999)));
(_h_headVisor_15816 = 1.0);
(_bump_headVisor_15817 = 0.0);
(_headVisor_has_returned_15818 = false);
(_bump_headVisor_15817 *= ((sin((_p_headVisor_15815.x * 150.0)) * sin((_p_headVisor_15815.y * 150.0))) * 0.0020000001));
(_p_sdBox_15696 = _p_headVisor_15815);
(_b_sdBox_15697 = vec3_ctor_int_int(1, _h_headVisor_15816, 2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_3_15821 = _sdBox_return_value_15699);
(_result_headVisor_15820._d = _sdBox_return_value_inlined_3_15821);
(_p_headSphere_15822 = _p_headVisor_15815);
(_headSphere_has_returned_15823 = false);
(_headSphere_return_value_15824 = ((length((_p_headSphere_15822 / float3(1.0, 0.80000001, 1.0))) - 1.0) * 0.80000001));
(_headSphere_has_returned_15823 = true);
(_headSphere_return_value_inlined_4_15825 = _headSphere_return_value_15824);
(_result_headVisor_15820._d = (max(lerp(_result_headVisor_15820._d, _headSphere_return_value_inlined_4_15825, 0.56999999), (-_p_headVisor_15815.y)) - _bump_headVisor_15817));
(_result_headVisor_15820._mat = float3(0.050000001, 0.050000001, 0.050000001));
(_result_headVisor_15820._specPower = 30.0);
(_headVisor_return_value_15819 = _result_headVisor_15820);
(_headVisor_has_returned_15818 = true);
(_headVisor_return_value_inlined_5_15826 = _headVisor_return_value_15819);
(_r_headLower_15827 = _headVisor_return_value_inlined_5_15826);
(_p_headVisor_15815 = ((_p_headLower_15811 + float3(0.0, 0.0099999998, 0.0)) * float3(0.94999999, 0.94999999, 0.94999999)));
(_h_headVisor_15816 = 1.0);
(_bump_headVisor_15817 = 0.0);
(_headVisor_has_returned_15818 = false);
(_bump_headVisor_15817 *= ((sin((_p_headVisor_15815.x * 150.0)) * sin((_p_headVisor_15815.y * 150.0))) * 0.0020000001));
(_p_sdBox_15696 = _p_headVisor_15815);
(_b_sdBox_15697 = vec3_ctor_int_int(1, _h_headVisor_15816, 2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_3_15821 = _sdBox_return_value_15699);
(_result_headVisor_15820._d = _sdBox_return_value_inlined_3_15821);
(_p_headSphere_15822 = _p_headVisor_15815);
(_headSphere_has_returned_15823 = false);
(_headSphere_return_value_15824 = ((length((_p_headSphere_15822 / float3(1.0, 0.80000001, 1.0))) - 1.0) * 0.80000001));
(_headSphere_has_returned_15823 = true);
(_headSphere_return_value_inlined_4_15825 = _headSphere_return_value_15824);
(_result_headVisor_15820._d = (max(lerp(_result_headVisor_15820._d, _headSphere_return_value_inlined_4_15825, 0.56999999), (-_p_headVisor_15815.y)) - _bump_headVisor_15817));
(_result_headVisor_15820._mat = float3(0.050000001, 0.050000001, 0.050000001));
(_result_headVisor_15820._specPower = 30.0);
(_headVisor_return_value_15819 = _result_headVisor_15820);
(_headVisor_has_returned_15818 = true);
(_headVisor_return_value_inlined_6_15828 = _headVisor_return_value_15819);
(_r_headLower_15827._d = min(_r_headLower_15827._d, max(max(_headVisor_return_value_inlined_6_15828._d, (_p_headLower_15811.y - 0.34999999)), (((_p_headLower_15811.y * 0.625) - _p_headLower_15811.z) - 0.66000003))));
(_a_rot_15714 = ((0.075000003 * (_gunsUp_1 - 1.0)) * sign(_p_headLower_15811.x)));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_7_15829 = _rot_return_value_15716);
(_p_headLower_15811.xy = mul(_p_headLower_15811.xy, transpose(_rot_return_value_inlined_7_15829)));
(_p_headLower_15811.x = (abs(_p_headLower_15811.x) - 1.33));
(_p_headLower_15811.y -= (0.1 - (_p_headLower_15811.x * 0.1)));
(_p_sdBox_15696 = _p_headLower_15811);
(_b_sdBox_15697 = vec3_ctor(0.40000001, (0.059999999 * (1.0 - _p_headLower_15811.x)), (0.30000001 - (_p_headLower_15811.x * 0.2))));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_8_15830 = _sdBox_return_value_15699);
(_r_headLower_15827._d = min(_r_headLower_15827._d, _sdBox_return_value_inlined_8_15830));
(_p_headLower_15811 = _op_headLower_15814);
(_p_headLower_15811.y = (abs((abs((_p_headLower_15811.y + 0.147)) - 0.055599999)) - 0.027799999));
(_p_sdBox_15696 = (_p_headLower_15811 + float3(0.0, 0.0, 1.5)));
(_b_sdBox_15697 = vec3_ctor(lerp(0.25, 0.55000001, (-_op_headLower_15814.y)), 0.015, 0.1));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_9_15831 = _sdBox_return_value_15699);
(_r_headLower_15827._d = max(_r_headLower_15827._d, (-_sdBox_return_value_inlined_9_15831)));
(_p_headLower_15811 = _op_headLower_15814);
(_p_headLower_15811.y = (abs((_p_headLower_15811.y + 0.16)) - 0.059999999));
(_p_headLower_15811.z -= -1.1);
(_p_sdCappedCylinder_15787 = _p_headLower_15811.xzy);
(_h_sdCappedCylinder_15788 = 1.0);
(_r_sdCappedCylinder_15789 = 0.029999999);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_10_15832 = _sdCappedCylinder_return_value_15791);
(_p_sdCappedCylinder_15787 = _p_headLower_15811.xzy);
(_h_sdCappedCylinder_15788 = 0.55000001);
(_r_sdCappedCylinder_15789 = 1.0);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_11_15833 = _sdCappedCylinder_return_value_15791);
(_r_headLower_15827._d = max(_r_headLower_15827._d, (-max(max(_sdCappedCylinder_return_value_inlined_10_15832, (-_sdCappedCylinder_return_value_inlined_11_15833)), (_p_headLower_15811.z + 0.2)))));
(_mat_setBodyMaterial_15736 = _r_headLower_15827);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_headLower_15827 = _mat_setBodyMaterial_15736);
(_headLower_return_value_15813 = _r_headLower_15827);
(_headLower_has_returned_15812 = true);
(_headLower_return_value_inlined_63_15834 = _headLower_return_value_15813);
(_a_minResult_15803 = _r_ed209_15772);
(_b_minResult_15804 = _headLower_return_value_inlined_63_15834);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_64_15835 = _minResult_return_value_15806);
(_p_headVisor_15815 = _p_ed209_15724);
(_h_headVisor_15816 = 0.80000001);
(_bump_headVisor_15817 = 1.0);
(_headVisor_has_returned_15818 = false);
(_bump_headVisor_15817 *= ((sin((_p_headVisor_15815.x * 150.0)) * sin((_p_headVisor_15815.y * 150.0))) * 0.0020000001));
(_p_sdBox_15696 = _p_headVisor_15815);
(_b_sdBox_15697 = vec3_ctor_int_int(1, _h_headVisor_15816, 2));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_3_15821 = _sdBox_return_value_15699);
(_result_headVisor_15820._d = _sdBox_return_value_inlined_3_15821);
(_p_headSphere_15822 = _p_headVisor_15815);
(_headSphere_has_returned_15823 = false);
(_headSphere_return_value_15824 = ((length((_p_headSphere_15822 / float3(1.0, 0.80000001, 1.0))) - 1.0) * 0.80000001));
(_headSphere_has_returned_15823 = true);
(_headSphere_return_value_inlined_4_15825 = _headSphere_return_value_15824);
(_result_headVisor_15820._d = (max(lerp(_result_headVisor_15820._d, _headSphere_return_value_inlined_4_15825, 0.56999999), (-_p_headVisor_15815.y)) - _bump_headVisor_15817));
(_result_headVisor_15820._mat = float3(0.050000001, 0.050000001, 0.050000001));
(_result_headVisor_15820._specPower = 30.0);
(_headVisor_return_value_15819 = _result_headVisor_15820);
(_headVisor_has_returned_15818 = true);
(_headVisor_return_value_inlined_65_15836 = _headVisor_return_value_15819);
(_a_minResult_15803 = _minResult_return_value_inlined_64_15835);
(_b_minResult_15804 = _headVisor_return_value_inlined_65_15836);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_66_15837 = _minResult_return_value_15806);
(_p_arms_15838 = _p_ed209_15724);
(_arms_has_returned_15839 = false);
(_mat_setBodyMaterial_15736 = _r_arms_15842);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_arms_15842 = _mat_setBodyMaterial_15736);
(_p_arms_15838.x = abs(_p_arms_15838.x));
(_p_arms_15838.yz += float2(0.23999999, 0.0));
(_a_rot_15714 = (0.15000001 * (_gunsUp_1 - 1.0)));
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_23_15843 = _rot_return_value_15716);
(_p_arms_15838.xy = mul(_p_arms_15838.xy, transpose(_rot_return_value_inlined_23_15843)));
(_p_sdCapsule_15844 = _p_arms_15838);
(_a_sdCapsule_15845 = float3(0.0, 0.0, 0.0));
(_b_sdCapsule_15846 = float3(1.5, 0.0, 0.0));
(_r_sdCapsule_15847 = 0.2);
(_sdCapsule_has_returned_15848 = false);
(_pa_sdCapsule_15850 = (_p_sdCapsule_15844 - _a_sdCapsule_15845));
(_ba_sdCapsule_15851 = (_b_sdCapsule_15846 - _a_sdCapsule_15845));
(_sdCapsule_return_value_15849 = (length((_pa_sdCapsule_15850 - (_ba_sdCapsule_15851 * clamp((dot(_pa_sdCapsule_15850, _ba_sdCapsule_15851) / dot(_ba_sdCapsule_15851, _ba_sdCapsule_15851)), 0.0, 1.0)))) - _r_sdCapsule_15847));
(_sdCapsule_has_returned_15848 = true);
(_sdCapsule_return_value_inlined_24_15852 = _sdCapsule_return_value_15849);
(_p_sdCapsule_15844 = _p_arms_15838);
(_a_sdCapsule_15845 = float3(1.5, 0.0, 0.0));
(_b_sdCapsule_15846 = float3(1.5, 0.0, -0.30000001));
(_r_sdCapsule_15847 = 0.2);
(_sdCapsule_has_returned_15848 = false);
(_pa_sdCapsule_15850 = (_p_sdCapsule_15844 - _a_sdCapsule_15845));
(_ba_sdCapsule_15851 = (_b_sdCapsule_15846 - _a_sdCapsule_15845));
(_sdCapsule_return_value_15849 = (length((_pa_sdCapsule_15850 - (_ba_sdCapsule_15851 * clamp((dot(_pa_sdCapsule_15850, _ba_sdCapsule_15851) / dot(_ba_sdCapsule_15851, _ba_sdCapsule_15851)), 0.0, 1.0)))) - _r_sdCapsule_15847));
(_sdCapsule_has_returned_15848 = true);
(_sdCapsule_return_value_inlined_25_15853 = _sdCapsule_return_value_15849);
(_r_arms_15842._d = min(_sdCapsule_return_value_inlined_24_15852, _sdCapsule_return_value_inlined_25_15853));
(_p_arms_15838 -= float3(1.5, 0.0, -0.30000001));
(_p_arms_15838.z -= (_gunsForward_1 * 0.15000001));
(_p_gunPod_15854 = _p_arms_15838);
(_gunPod_has_returned_15855 = false);
(_mat_setBodyMaterial_15736 = _r_gunPod_15857);
(_mat_setBodyMaterial_15736._mat = float3(0.36000001, 0.44999999, 0.5));
(_mat_setBodyMaterial_15736._specPower = 30.0);
(_r_gunPod_15857 = _mat_setBodyMaterial_15736);
(_p_gunPod_15854.yz += float2(0.1, 0.44999999));
(_pp_gunPod_15858 = _p_gunPod_15854);
(_pp_gunPod_15858.z = (abs(_pp_gunPod_15858.z) - 0.5));
(_p_sdCappedCone_15859 = _pp_gunPod_15858);
(_a_sdCappedCone_15860 = float3(0.0, 0.0, 0.0));
(_b_sdCappedCone_15861 = float3(0.0, 0.0, -0.1));
(_ra_sdCappedCone_15862 = 0.25);
(_rb_sdCappedCone_15863 = 0.34999999);
(_sdCappedCone_has_returned_15864 = false);
(_rba_sdCappedCone_15866 = (_rb_sdCappedCone_15863 - _ra_sdCappedCone_15862));
(_baba_sdCappedCone_15867 = dot((_b_sdCappedCone_15861 - _a_sdCappedCone_15860), (_b_sdCappedCone_15861 - _a_sdCappedCone_15860)));
(_papa_sdCappedCone_15868 = dot((_p_sdCappedCone_15859 - _a_sdCappedCone_15860), (_p_sdCappedCone_15859 - _a_sdCappedCone_15860)));
(_paba_sdCappedCone_15869 = (dot((_p_sdCappedCone_15859 - _a_sdCappedCone_15860), (_b_sdCappedCone_15861 - _a_sdCappedCone_15860)) / _baba_sdCappedCone_15867));
(_x_sdCappedCone_15870 = sqrt((_papa_sdCappedCone_15868 - ((_paba_sdCappedCone_15869 * _paba_sdCappedCone_15869) * _baba_sdCappedCone_15867))));
float s1794 = {0};
if ((_paba_sdCappedCone_15869 < 0.5))
{
(s1794 = _ra_sdCappedCone_15862);
}
else
{
(s1794 = _rb_sdCappedCone_15863);
}
(_cax_sdCappedCone_15871 = max(0.0, (_x_sdCappedCone_15870 - s1794)));
(_cay_sdCappedCone_15872 = (abs((_paba_sdCappedCone_15869 - 0.5)) - 0.5));
(_f_sdCappedCone_15873 = clamp((((_rba_sdCappedCone_15866 * (_x_sdCappedCone_15870 - _ra_sdCappedCone_15862)) + (_paba_sdCappedCone_15869 * _baba_sdCappedCone_15867)) / ((_rba_sdCappedCone_15866 * _rba_sdCappedCone_15866) + _baba_sdCappedCone_15867)), 0.0, 1.0));
(_cbx_sdCappedCone_15874 = ((_x_sdCappedCone_15870 - _ra_sdCappedCone_15862) - (_f_sdCappedCone_15873 * _rba_sdCappedCone_15866)));
(_cby_sdCappedCone_15875 = (_paba_sdCappedCone_15869 - _f_sdCappedCone_15873));
float s1795 = {0};
if (((_cbx_sdCappedCone_15874 < 0.0) && (_cay_sdCappedCone_15872 < 0.0)))
{
(s1795 = -1.0);
}
else
{
(s1795 = 1.0);
}
(_sdCappedCone_return_value_15865 = (s1795 * sqrt(min(((_cax_sdCappedCone_15871 * _cax_sdCappedCone_15871) + ((_cay_sdCappedCone_15872 * _cay_sdCappedCone_15872) * _baba_sdCappedCone_15867)), ((_cbx_sdCappedCone_15874 * _cbx_sdCappedCone_15874) + ((_cby_sdCappedCone_15875 * _cby_sdCappedCone_15875) * _baba_sdCappedCone_15867))))));
(_sdCappedCone_has_returned_15864 = true);
(_sdCappedCone_return_value_inlined_12_15876 = _sdCappedCone_return_value_15865);
(_r_gunPod_15857._d = _sdCappedCone_return_value_inlined_12_15876);
(_p_sdCappedCylinder_15787 = _p_gunPod_15854);
(_h_sdCappedCylinder_15788 = 0.34999999);
(_r_sdCappedCylinder_15789 = 0.40000001);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_13_15877 = _sdCappedCylinder_return_value_15791);
(_r_gunPod_15857._d = min(_r_gunPod_15857._d, _sdCappedCylinder_return_value_inlined_13_15877));
(_pp_gunPod_15858 = vec3_ctor(_p_gunPod_15854.x, (0.28 - _p_gunPod_15854.y), _p_gunPod_15854.z));
(_p_sdTriPrism_15878 = _pp_gunPod_15858);
(_h_sdTriPrism_15879 = float2(0.1, 0.5));
(_sdTriPrism_has_returned_15880 = false);
(_q_sdTriPrism_15882 = abs(_p_sdTriPrism_15878));
(_sdTriPrism_return_value_15881 = max((_q_sdTriPrism_15882.z - _h_sdTriPrism_15879.y), (max(((_q_sdTriPrism_15882.x * 0.86602497) + (_p_sdTriPrism_15878.y * 0.5)), (-_p_sdTriPrism_15878.y)) - (_h_sdTriPrism_15879.x * 0.5))));
(_sdTriPrism_has_returned_15880 = true);
(_sdTriPrism_return_value_inlined_14_15883 = _sdTriPrism_return_value_15881);
(_r_gunPod_15857._d = min(_r_gunPod_15857._d, _sdTriPrism_return_value_inlined_14_15883));
(_pp_gunPod_15858 = _p_gunPod_15854);
(_pp_gunPod_15858.x = abs(_p_gunPod_15854.x));
(_a_rot_15714 = 0.78525001);
(_rot_has_returned_15715 = false);
(_c_rot_15717 = cos(_a_rot_15714));
(_s_rot_15718 = sin(_a_rot_15714));
(_rot_return_value_15716 = mat2_ctor(_c_rot_15717, _s_rot_15718, (-_s_rot_15718), _c_rot_15717));
(_rot_has_returned_15715 = true);
(_rot_return_value_inlined_15_15884 = _rot_return_value_15716);
(_pp_gunPod_15858.xy = mul(_pp_gunPod_15858.xy, transpose(_rot_return_value_inlined_15_15884)));
(_bump_gunPod_15886 = (sign(sin((_pp_gunPod_15858.z * 33.299999))) * 0.003));
(_p_sdBox_15696 = _pp_gunPod_15858);
(_b_sdBox_15697 = vec3_ctor((0.1 - _bump_gunPod_15886), (0.38 - _bump_gunPod_15886), 0.34));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_16_15887 = _sdBox_return_value_15699);
(_d_gunPod_15888 = (_sdBox_return_value_inlined_16_15887 - 0.02));
(_pp_gunPod_15858 = (_p_gunPod_15854 - float3(0.0, 0.0, -0.60000002)));
(_pp_gunPod_15858.x = (abs(_pp_gunPod_15858.x) - 0.1));
(_p_sdCappedCylinder_15787 = _pp_gunPod_15858);
(_h_sdCappedCylinder_15788 = 0.059999999);
(_r_sdCappedCylinder_15789 = 0.15000001);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_17_15889 = _sdCappedCylinder_return_value_15791);
(_p_sdCappedCylinder_15787 = (_pp_gunPod_15858 + float3(0.0, 0.12, -0.050000001)));
(_h_sdCappedCylinder_15788 = 0.059999999);
(_r_sdCappedCylinder_15789 = 0.050000001);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_18_15890 = _sdCappedCylinder_return_value_15791);
(_p_sdBox_15696 = (_p_gunPod_15854 + float3(0.0, 0.0, 0.54000002)));
(_b_sdBox_15697 = float3(0.1, 0.059999999, 0.039999999));
(_sdBox_has_returned_15698 = false);
(_q_sdBox_15700 = (abs(_p_sdBox_15696) - _b_sdBox_15697));
(_sdBox_return_value_15699 = (length(max(_q_sdBox_15700, 0.0)) + min(max(_q_sdBox_15700.x, max(_q_sdBox_15700.y, _q_sdBox_15700.z)), 0.0)));
(_sdBox_has_returned_15698 = true);
(_sdBox_return_value_inlined_19_15891 = _sdBox_return_value_15699);
(_d_gunPod_15888 = min(min(min(_d_gunPod_15888, _sdCappedCylinder_return_value_inlined_17_15889), _sdCappedCylinder_return_value_inlined_18_15890), _sdBox_return_value_inlined_19_15891));
if ((_d_gunPod_15888 < _r_gunPod_15857._d))
{
(_p_sdCappedCylinder_15787 = (_pp_gunPod_15858 + float3(0.0, 0.0, 0.1)));
(_h_sdCappedCylinder_15788 = 0.029999999);
(_r_sdCappedCylinder_15789 = 0.2);
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_20_15892 = _sdCappedCylinder_return_value_15791);
(_d_gunPod_15888 = max(_d_gunPod_15888, (-_sdCappedCylinder_return_value_inlined_20_15892)));
(_r_gunPod_15857._d = _d_gunPod_15888);
(_r_gunPod_15857._mat = float3(0.02, 0.02, 0.02));
}
(_fireShock_has_returned_15662 = false);
(_fireShock_return_value_15663 = abs(sin((_edShoot_1 * 78.537498))));
(_fireShock_has_returned_15662 = true);
(_fireShock_return_value_inlined_21_15893 = _fireShock_return_value_15663);
(_fs_gunPod_15885 = _fireShock_return_value_inlined_21_15893);
if ((_fs_gunPod_15885 > 0.5))
{
(_p_sdCappedCylinder_15787 = _pp_gunPod_15858);
(_h_sdCappedCylinder_15788 = (0.0099999998 + (_pp_gunPod_15858.z * 0.050000001)));
(_r_sdCappedCylinder_15789 = ((frac((_fs_gunPod_15885 * 3322.4231)) * 0.5) + 0.89999998));
(_sdCappedCylinder_has_returned_15790 = false);
(_d_sdCappedCylinder_15792 = (abs(vec2_ctor(length(_p_sdCappedCylinder_15787.xy), _p_sdCappedCylinder_15787.z)) - vec2_ctor(_h_sdCappedCylinder_15788, _r_sdCappedCylinder_15789)));
(_sdCappedCylinder_return_value_15791 = (min(max(_d_sdCappedCylinder_15792.x, _d_sdCappedCylinder_15792.y), 0.0) + length(max(_d_sdCappedCylinder_15792, 0.0))));
(_sdCappedCylinder_has_returned_15790 = true);
(_sdCappedCylinder_return_value_inlined_22_15894 = _sdCappedCylinder_return_value_15791);
(_d_gunPod_15888 = _sdCappedCylinder_return_value_inlined_22_15894);
if ((_d_gunPod_15888 < _r_gunPod_15857._d))
{
(_r_gunPod_15857._d = _d_gunPod_15888);
(_r_gunPod_15857._mat = float3(1.0, 1.0, 1.0));
(_glow_1 += (0.1 / (0.0099999998 + ((_d_gunPod_15888 * _d_gunPod_15888) * 400.0))));
}
}
(_gunPod_return_value_15856 = _r_gunPod_15857);
(_gunPod_has_returned_15855 = true);
(_gunPod_return_value_inlined_26_15895 = _gunPod_return_value_15856);
(_a_minResult_15803 = _r_arms_15842);
(_b_minResult_15804 = _gunPod_return_value_inlined_26_15895);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_27_15896 = _minResult_return_value_15806);
(_arms_return_value_15840 = _minResult_return_value_inlined_27_15896);
(_arms_has_returned_15839 = true);
(_arms_return_value_inlined_67_15897 = _arms_return_value_15840);
(_a_minResult_15803 = _minResult_return_value_inlined_66_15837);
(_b_minResult_15804 = _arms_return_value_inlined_67_15897);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_68_15898 = _minResult_return_value_15806);
(_ed209_return_value_15726 = _minResult_return_value_inlined_68_15898);
(_ed209_has_returned_15725 = true);
(_ed209_return_value_inlined_79_15899 = _ed209_return_value_15726);
(_a_minResult_15803 = _room_return_value_inlined_78_15723);
(_b_minResult_15804 = _ed209_return_value_inlined_79_15899);
(_minResult_has_returned_15805 = false);
if ((_a_minResult_15803._d < _b_minResult_15804._d))
{
(_minResult_return_value_15806 = _a_minResult_15803);
(_minResult_has_returned_15805 = true);
}
if ((!_minResult_has_returned_15805))
{
(_minResult_return_value_15806 = _b_minResult_15804);
(_minResult_has_returned_15805 = true);
}
(_minResult_return_value_inlined_80_15900 = _minResult_return_value_15806);
(_r_map_15901 = _minResult_return_value_inlined_80_15900);
(_gnd_map_15902 = length((_p_map_15683.y + 3.0)));
if ((_gnd_map_15902 < _r_map_15901._d))
{
(_r_map_15901._d = _gnd_map_15902);
(_r_map_15901._mat = float3(0.1, 0.1, 0.1));
}
(_map_return_value_15685 = _r_map_15901);
(_map_has_returned_15684 = true);
(_map_return_value_inlined_86_15944 = _map_return_value_15685);
(_ao_return_value_15943 = (_map_return_value_inlined_86_15944._d / _h_ao_15941));
(_ao_has_returned_15942 = true);
(_ao_return_value_inlined_89_15945 = _ao_return_value_15943);
(_applyLighting_return_value_15909 = (lerp(((_data_applyLighting_15907._mat * (((_primary_applyLighting_15923 + _bounce_applyLighting_15924) * _ao_return_value_inlined_89_15945) + _spe_applyLighting_15925)) * float3(2.0, 1.6, 1.7)), float3(0.0099999998, 0.0099999998, 0.0099999998), _fre_applyLighting_15926) * _fog_applyLighting_15927));
(_applyLighting_has_returned_15908 = true);
(_applyLighting_return_value_inlined_91_15946 = _applyLighting_return_value_15909);
(_fireShock_has_returned_15662 = false);
(_fireShock_return_value_15663 = abs(sin((_edShoot_1 * 78.537498))));
(_fireShock_has_returned_15662 = true);
(_fireShock_return_value_inlined_92_15947 = _fireShock_return_value_15663);
(_getSceneColor_return_value_15677 = ((_applyLighting_return_value_inlined_91_15946 + (_fireShock_return_value_inlined_92_15947 * 0.30000001)) + _g_getSceneColor_15679));
(_getSceneColor_has_returned_15676 = true);
}
(_getSceneColor_return_value_inlined_112_15948 = _getSceneColor_return_value_15677);
(_col_mainImage_15628 += _getSceneColor_return_value_inlined_112_15948);
(_col_vignette_15949 = pow(max((_col_mainImage_15628 * _dim_mainImage_15631), 9.9999997e-10), float3(0.45449999, 0.45449999, 0.45449999)));
(_fragCoord_vignette_15950 = gl_FragCoord.xy);
(_vignette_has_returned_15951 = false);
(_q_vignette_15953 = (_fragCoord_vignette_15950.xy / _iResolution.xy));
(_col_vignette_15949 *= (0.5 + (0.5 * pow(max(((((16.0 * _q_vignette_15953.x) * _q_vignette_15953.y) * (1.0 - _q_vignette_15953.x)) * (1.0 - _q_vignette_15953.y)), 9.9999997e-10), 0.40000001))));
(_vignette_return_value_15952 = _col_vignette_15949);
(_vignette_has_returned_15951 = true);
(_vignette_return_value_inlined_113_15954 = _vignette_return_value_15952);
(_fragColor_1 = vec4_ctor_int(_vignette_return_value_inlined_113_15954, 1));
(_fragColor_1.w = 1.0);
(out_fragColor = lerp(_fragColor_2, _fragColor_1, ((1.0 - _fragColor_2.w) + _iTime)));
return generateOutput();
}

// INITIAL HLSL END



// FRAGMENT SHADER END
 