#version 300 es
precision highp float;

layout(location = 0) out vec4 fragColor;

uniform vec2 iResolution;

uniform float iTime;

uniform float iTimeDelta;

uniform vec4 iMouse;

uniform int iFrame;

bool live_tu_has_executed = false;

vec4 fragColor_1;

float stretch_1, gunsUp_1, gunsForward_1, edWalk_1, edTwist_1, edDown_1, edShoot_1, doorOpen_1, glow_1 = 0.0;

struct MarchData_1 {
 float d;
 vec3 mat;
 float specPower;
} ;

vec4 fragColor_2;

void main()
{
 vec3 ro_mainImage_1;
 vec3 lookAt_mainImage_1;
 vec3 col_mainImage_1;
 float startScene_mainImage_1;
 float endScene_mainImage_1;
 float dim_mainImage_1;
 float time_mainImage_1;
 bool edZ_has_returned_1;
 float edZ_return_value_1;
 float edZ_return_value_inlined_93_1;
 float f_remap_1;
 float in1_remap_1;
 float in2_remap_1;
 float out1_remap_1;
 float out2_remap_1;
 bool remap_has_returned_1;
 float remap_return_value_1;
 float remap_return_value_inlined_94_1;
 float t_mainImage_1;
 float remap_return_value_inlined_95_1;
 float edZ_return_value_inlined_96_1;
 float edZ_return_value_inlined_97_1;
 float edZ_return_value_inlined_98_1;
 float edZ_return_value_inlined_99_1;
 float edZ_return_value_inlined_100_1;
 float edZ_return_value_inlined_101_1;
 float remap_return_value_inlined_102_1;
 float edZ_return_value_inlined_103_1;
 float remap_return_value_inlined_104_1;
 float remap_return_value_inlined_105_1;
 float edZ_return_value_inlined_106_1;
 float remap_return_value_inlined_107_1;
 float remap_return_value_inlined_108_1;
 float ternary_0_mainImage_1;
 float remap_return_value_inlined_109_1;
 vec2 coord_mainImage_1;
 bool fireShock_has_returned_1;
 float fireShock_return_value_1;
 float fireShock_return_value_inlined_110_1;
 vec2 uv_mainImage_1;
 vec3 ro_getRayDir_1;
 vec3 lookAt_getRayDir_1;
 vec2 uv_getRayDir_1;
 bool getRayDir_has_returned_1;
 vec3 getRayDir_return_value_1;
 vec3 forward_getRayDir_1;
 vec3 right_getRayDir_1;
 vec3 getRayDir_return_value_inlined_111_1;
 vec3 ro_getSceneColor_1;
 vec3 rd_getSceneColor_1;
 bool getSceneColor_has_returned_1;
 vec3 getSceneColor_return_value_1;
 vec3 p_getSceneColor_1;
 float g_getSceneColor_1;
 float d_getSceneColor_1;
 MarchData_1 h_getSceneColor_1;
 float steps_getSceneColor_1;
 vec3 p_map_1;
 bool map_has_returned_1;
 MarchData_1 map_return_value_1;
 vec3 p_room_1;
 bool room_has_returned_1;
 MarchData_1 room_return_value_1;
 const vec3 frameInner_room_1 = vec3(2.8, 2.6, .1);
 MarchData_1 r_room_1;
 vec2 xy_room_1;
 float doorFrame_room_1;
 float doorWidth_room_1;
 float door_room_1;
 float d_room_1;
 vec3 p_sdBox_1;
 vec3 b_sdBox_1;
 bool sdBox_has_returned_1;
 float sdBox_return_value_1;
 vec3 q_sdBox_1;
 float sdBox_return_value_inlined_69_1;
 float doorHole_room_1;
 float backWall_room_1;
 vec2 p_sdOctogon_1;
 float r_sdOctogon_1;
 bool sdOctogon_has_returned_1;
 float sdOctogon_return_value_1;
 const vec3 k_sdOctogon_1 = vec3(- .92387953, .38268343, .41421356);
 float sdOctogon_return_value_inlined_70_1;
 float sdOctogon_return_value_inlined_71_1;
 float ocp_room_1;
 float sdOctogon_return_value_inlined_72_1;
 float sdBox_return_value_inlined_73_1;
 float a_rot_1;
 bool rot_has_returned_1;
 mat2 rot_return_value_1;
 float c_rot_1;
 float s_rot_1;
 mat2 rot_return_value_inlined_74_1;
 float sdBox_return_value_inlined_75_1;
 float sdBox_return_value_inlined_76_1;
 float sdBox_return_value_inlined_77_1;
 MarchData_1 room_return_value_inlined_78_1;
 vec3 p_ed209_1;
 bool ed209_has_returned_1;
 MarchData_1 ed209_return_value_1;
 float f_legWalkAngle_1;
 bool legWalkAngle_has_returned_1;
 float legWalkAngle_return_value_1;
 float legWalkAngle_return_value_inlined_54_1;
 float edZ_return_value_inlined_55_1;
 vec3 p_legs_1;
 bool legs_has_returned_1;
 MarchData_1 legs_return_value_1;
 MarchData_1 r_legs_1;
 MarchData_1 mat_setBodyMaterial_1;
 float silver_legs_1;
 float legWalkAngle_return_value_inlined_45_1;
 float legAngle_legs_1;
 mat2 rot_return_value_inlined_46_1;
 mat2 rot_return_value_inlined_47_1;
 mat2 rot_return_value_inlined_48_1;
 vec3 cp_legs_1;
 vec3 pp_legs_1;
 mat2 rot_return_value_inlined_49_1;
 float sdBox_return_value_inlined_50_1;
 float sdBox_return_value_inlined_51_1;
 vec3 p_sdChamferedCube_1;
 vec3 r_sdChamferedCube_1;
 float c_sdChamferedCube_1;
 bool sdChamferedCube_has_returned_1;
 float sdChamferedCube_return_value_1;
 float sdBox_return_value_inlined_0_1;
 float cube_sdChamferedCube_1;
 mat2 rot_return_value_inlined_1_1;
 float sdBox_return_value_inlined_2_1;
 float sdChamferedCube_return_value_inlined_52_1;
 vec3 p_foot_1;
 bool foot_has_returned_1;
 float foot_return_value_1;
 mat2 rot_return_value_inlined_29_1;
 vec3 p_toe_1;
 bool toe_has_returned_1;
 float toe_return_value_1;
 float sdBox_return_value_inlined_28_1;
 float toe_return_value_inlined_30_1;
 float d_foot_1;
 mat2 rot_return_value_inlined_31_1;
 float toe_return_value_inlined_32_1;
 float foot_return_value_inlined_53_1;
 MarchData_1 legs_return_value_inlined_56_1;
 MarchData_1 r_ed209_1;
 float f_ed209_1;
 float slide_ed209_1;
 float fireShock_return_value_inlined_57_1;
 vec3 p_waist_1;
 bool waist_has_returned_1;
 MarchData_1 waist_return_value_1;
 MarchData_1 r_waist_1;
 mat2 rot_return_value_inlined_33_1;
 float bump_waist_1;
 float d_waist_1;
 float legWalkAngle_return_value_inlined_34_1;
 float legAngle_waist_1;
 mat2 rot_return_value_inlined_35_1;
 vec3 pp_waist_1;
 vec3 p_sdCappedCylinder_1;
 float h_sdCappedCylinder_1;
 float r_sdCappedCylinder_1;
 bool sdCappedCylinder_has_returned_1;
 float sdCappedCylinder_return_value_1;
 vec2 d_sdCappedCylinder_1;
 float sdCappedCylinder_return_value_inlined_36_1;
 float sdBox_return_value_inlined_37_1;
 float sdCappedCylinder_return_value_inlined_38_1;
 mat2 rot_return_value_inlined_39_1;
 float sdCappedCylinder_return_value_inlined_40_1;
 float sdBox_return_value_inlined_41_1;
 float sdCappedCylinder_return_value_inlined_42_1;
 float sdCappedCylinder_return_value_inlined_43_1;
 float sdBox_return_value_inlined_44_1;
 MarchData_1 waist_return_value_inlined_58_1;
 MarchData_1 a_minResult_1;
 MarchData_1 b_minResult_1;
 bool minResult_has_returned_1;
 MarchData_1 minResult_return_value_1;
 MarchData_1 minResult_return_value_inlined_59_1;
 float legWalkAngle_return_value_inlined_60_1;
 mat2 rot_return_value_inlined_61_1;
 mat2 rot_return_value_inlined_62_1;
 vec3 p_headLower_1;
 bool headLower_has_returned_1;
 MarchData_1 headLower_return_value_1;
 vec3 op_headLower_1;
 vec3 p_headVisor_1;
 float h_headVisor_1;
 float bump_headVisor_1;
 bool headVisor_has_returned_1;
 MarchData_1 headVisor_return_value_1;
 MarchData_1 result_headVisor_1;
 float sdBox_return_value_inlined_3_1;
 vec3 p_headSphere_1;
 bool headSphere_has_returned_1;
 float headSphere_return_value_1;
 float headSphere_return_value_inlined_4_1;
 MarchData_1 headVisor_return_value_inlined_5_1;
 MarchData_1 r_headLower_1;
 MarchData_1 headVisor_return_value_inlined_6_1;
 mat2 rot_return_value_inlined_7_1;
 float sdBox_return_value_inlined_8_1;
 float sdBox_return_value_inlined_9_1;
 float sdCappedCylinder_return_value_inlined_10_1;
 float sdCappedCylinder_return_value_inlined_11_1;
 MarchData_1 headLower_return_value_inlined_63_1;
 MarchData_1 minResult_return_value_inlined_64_1;
 MarchData_1 headVisor_return_value_inlined_65_1;
 MarchData_1 minResult_return_value_inlined_66_1;
 vec3 p_arms_1;
 bool arms_has_returned_1;
 MarchData_1 arms_return_value_1;
 const vec3 wrist_arms_1 = vec3(1.5, 0, 0) - vec3(0, 0, .3);
 MarchData_1 r_arms_1;
 mat2 rot_return_value_inlined_23_1;
 vec3 p_sdCapsule_1;
 vec3 a_sdCapsule_1;
 vec3 b_sdCapsule_1;
 float r_sdCapsule_1;
 bool sdCapsule_has_returned_1;
 float sdCapsule_return_value_1;
 vec3 pa_sdCapsule_1;
 vec3 ba_sdCapsule_1;
 float sdCapsule_return_value_inlined_24_1;
 float sdCapsule_return_value_inlined_25_1;
 vec3 p_gunPod_1;
 bool gunPod_has_returned_1;
 MarchData_1 gunPod_return_value_1;
 MarchData_1 r_gunPod_1;
 vec3 pp_gunPod_1;
 vec3 p_sdCappedCone_1;
 vec3 a_sdCappedCone_1;
 vec3 b_sdCappedCone_1;
 float ra_sdCappedCone_1;
 float rb_sdCappedCone_1;
 bool sdCappedCone_has_returned_1;
 float sdCappedCone_return_value_1;
 float rba_sdCappedCone_1;
 float baba_sdCappedCone_1;
 float papa_sdCappedCone_1;
 float paba_sdCappedCone_1;
 float x_sdCappedCone_1;
 float cax_sdCappedCone_1;
 float cay_sdCappedCone_1;
 float f_sdCappedCone_1;
 float cbx_sdCappedCone_1;
 float cby_sdCappedCone_1;
 float sdCappedCone_return_value_inlined_12_1;
 float sdCappedCylinder_return_value_inlined_13_1;
 vec3 p_sdTriPrism_1;
 vec2 h_sdTriPrism_1;
 bool sdTriPrism_has_returned_1;
 float sdTriPrism_return_value_1;
 vec3 q_sdTriPrism_1;
 float sdTriPrism_return_value_inlined_14_1;
 mat2 rot_return_value_inlined_15_1;
 float fs_gunPod_1;
 float bump_gunPod_1;
 float sdBox_return_value_inlined_16_1;
 float d_gunPod_1;
 float sdCappedCylinder_return_value_inlined_17_1;
 float sdCappedCylinder_return_value_inlined_18_1;
 float sdBox_return_value_inlined_19_1;
 float sdCappedCylinder_return_value_inlined_20_1;
 float fireShock_return_value_inlined_21_1;
 float sdCappedCylinder_return_value_inlined_22_1;
 MarchData_1 gunPod_return_value_inlined_26_1;
 MarchData_1 minResult_return_value_inlined_27_1;
 MarchData_1 arms_return_value_inlined_67_1;
 MarchData_1 minResult_return_value_inlined_68_1;
 MarchData_1 ed209_return_value_inlined_79_1;
 MarchData_1 minResult_return_value_inlined_80_1;
 MarchData_1 r_map_1;
 float gnd_map_1;
 MarchData_1 map_return_value_inlined_90_1;
 vec3 p_applyLighting_1;
 vec3 rd_applyLighting_1;
 float d_applyLighting_1;
 MarchData_1 data_applyLighting_1;
 bool applyLighting_has_returned_1;
 vec3 applyLighting_return_value_1;
 vec3 sunDir_applyLighting_1;
 vec3 p_calcNormal_1;
 float t_calcNormal_1;
 bool calcNormal_has_returned_1;
 vec3 calcNormal_return_value_1;
 float d_calcNormal_1;
 vec2 e_calcNormal_1;
 MarchData_1 map_return_value_inlined_82_1;
 MarchData_1 map_return_value_inlined_83_1;
 MarchData_1 map_return_value_inlined_84_1;
 MarchData_1 map_return_value_inlined_85_1;
 vec3 calcNormal_return_value_inlined_87_1;
 vec3 n_applyLighting_1;
 float primary_applyLighting_1;
 float bounce_applyLighting_1;
 float spe_applyLighting_1;
 float fre_applyLighting_1;
 float fog_applyLighting_1;
 vec3 p_calcShadow_1;
 vec3 lightPos_calcShadow_1;
 bool calcShadow_has_returned_1;
 float calcShadow_return_value_1;
 vec3 rd_calcShadow_1;
 float res_calcShadow_1;
 float t_calcShadow_1;
 float i_calcShadow_1;
 MarchData_1 map_return_value_inlined_81_1;
 float h_calcShadow_1;
 float calcShadow_return_value_inlined_88_1;
 vec3 p_ao_1;
 vec3 n_ao_1;
 float h_ao_1;
 bool ao_has_returned_1;
 float ao_return_value_1;
 MarchData_1 map_return_value_inlined_86_1;
 float ao_return_value_inlined_89_1;
 vec3 applyLighting_return_value_inlined_91_1;
 float fireShock_return_value_inlined_92_1;
 vec3 getSceneColor_return_value_inlined_112_1;
 vec3 col_vignette_1;
 vec2 fragCoord_vignette_1;
 bool vignette_has_returned_1;
 vec3 vignette_return_value_1;
 vec2 q_vignette_1;
 vec3 vignette_return_value_inlined_113_1;
 edWalk_1 = 1.;
 edTwist_1 = 0.;
 edDown_1 = 0.;
 edShoot_1 = 0.;
 doorOpen_1 = 1.;
 stretch_1 = 1.;
 time_mainImage_1 = mod(iTime + 4., 55.);
 if(time_mainImage_1 < 12.)
  {
   startScene_mainImage_1 = 0.;
   endScene_mainImage_1 = 12.;
   edWalk_1 = 0.;
   ro_mainImage_1 = vec3(0, - 1.5, - .625);
   edZ_has_returned_1 = false;
   edZ_return_value_1 = mix(5., - 2., edWalk_1);
   edZ_has_returned_1 = true;
   edZ_return_value_inlined_93_1 = edZ_return_value_1;
   lookAt_mainImage_1 = vec3(0, - 1, edZ_return_value_inlined_93_1);
   doorOpen_1 = smoothstep(0., 1., time_mainImage_1 / 5.);
   f_remap_1 = time_mainImage_1;
   in1_remap_1 = 7.;
   in2_remap_1 = 10.;
   out1_remap_1 = 0.;
   out2_remap_1 = 1.;
   remap_has_returned_1 = false;
   remap_return_value_1 = mix(out1_remap_1, out2_remap_1, clamp((f_remap_1 - in1_remap_1) / (in2_remap_1 - in1_remap_1), 0., 1.));
   remap_has_returned_1 = true;
   remap_return_value_inlined_94_1 = remap_return_value_1;
   stretch_1 = remap_return_value_inlined_94_1;
  }
 else
  {
   if(time_mainImage_1 < 25.)
    {
     startScene_mainImage_1 = 12.;
     endScene_mainImage_1 = 25.;
     t_mainImage_1 = time_mainImage_1 - startScene_mainImage_1;
     f_remap_1 = t_mainImage_1;
     in1_remap_1 = 3.;
     in2_remap_1 = 8.;
     out1_remap_1 = 0.;
     out2_remap_1 = 1.;
     remap_has_returned_1 = false;
     remap_return_value_1 = mix(out1_remap_1, out2_remap_1, clamp((f_remap_1 - in1_remap_1) / (in2_remap_1 - in1_remap_1), 0., 1.));
     remap_has_returned_1 = true;
     remap_return_value_inlined_95_1 = remap_return_value_1;
     edWalk_1 = smoothstep(0., 1., remap_return_value_inlined_95_1);
     edZ_has_returned_1 = false;
     edZ_return_value_1 = mix(5., - 2., edWalk_1);
     edZ_has_returned_1 = true;
     edZ_return_value_inlined_96_1 = edZ_return_value_1;
     ro_mainImage_1 = vec3(- .5 * cos(t_mainImage_1 * .7), .5 - t_mainImage_1 * .1, edZ_return_value_inlined_96_1 - 3.);
     edZ_has_returned_1 = false;
     edZ_return_value_1 = mix(5., - 2., edWalk_1);
     edZ_has_returned_1 = true;
     edZ_return_value_inlined_97_1 = edZ_return_value_1;
     lookAt_mainImage_1 = vec3(0, 0, edZ_return_value_inlined_97_1);
    }
   else
    {
     if(time_mainImage_1 < 29.)
      {
       startScene_mainImage_1 = 25.;
       endScene_mainImage_1 = 29.;
       edZ_has_returned_1 = false;
       edZ_return_value_1 = mix(5., - 2., edWalk_1);
       edZ_has_returned_1 = true;
       edZ_return_value_inlined_98_1 = edZ_return_value_1;
       ro_mainImage_1 = vec3(- 2, .5 + (time_mainImage_1 - startScene_mainImage_1) * .1, edZ_return_value_inlined_98_1 - 3.);
       edZ_has_returned_1 = false;
       edZ_return_value_1 = mix(5., - 2., edWalk_1);
       edZ_has_returned_1 = true;
       edZ_return_value_inlined_99_1 = edZ_return_value_1;
       lookAt_mainImage_1 = vec3(0, 0, edZ_return_value_inlined_99_1);
      }
     else
      {
       if(time_mainImage_1 < 37.)
        {
         startScene_mainImage_1 = 29.;
         endScene_mainImage_1 = 37.;
         t_mainImage_1 = time_mainImage_1 - startScene_mainImage_1;
         edZ_has_returned_1 = false;
         edZ_return_value_1 = mix(5., - 2., edWalk_1);
         edZ_has_returned_1 = true;
         edZ_return_value_inlined_100_1 = edZ_return_value_1;
         ro_mainImage_1 = vec3(1.5, - 1. - t_mainImage_1 * .05, edZ_return_value_inlined_100_1 - 5.);
         edZ_has_returned_1 = false;
         edZ_return_value_1 = mix(5., - 2., edWalk_1);
         edZ_has_returned_1 = true;
         edZ_return_value_inlined_101_1 = edZ_return_value_1;
         lookAt_mainImage_1 = vec3(0, - 1, edZ_return_value_inlined_101_1);
         f_remap_1 = t_mainImage_1;
         in1_remap_1 = 2.;
         in2_remap_1 = 5.;
         out1_remap_1 = 1.;
         out2_remap_1 = 0.;
         remap_has_returned_1 = false;
         remap_return_value_1 = mix(out1_remap_1, out2_remap_1, clamp((f_remap_1 - in1_remap_1) / (in2_remap_1 - in1_remap_1), 0., 1.));
         remap_has_returned_1 = true;
         remap_return_value_inlined_102_1 = remap_return_value_1;
         stretch_1 = remap_return_value_inlined_102_1;
        }
       else
        {
         if(time_mainImage_1 < 55.)
          {
           startScene_mainImage_1 = 37.;
           endScene_mainImage_1 = 55.;
           t_mainImage_1 = time_mainImage_1 - startScene_mainImage_1;
           edZ_has_returned_1 = false;
           edZ_return_value_1 = mix(5., - 2., edWalk_1);
           edZ_has_returned_1 = true;
           edZ_return_value_inlined_103_1 = edZ_return_value_1;
           ro_mainImage_1 = vec3(- 1.8, - .5, edZ_return_value_inlined_103_1 - 2.5);
           f_remap_1 = t_mainImage_1;
           in1_remap_1 = 2.;
           in2_remap_1 = 3.;
           out1_remap_1 = 0.;
           out2_remap_1 = 1.;
           remap_has_returned_1 = false;
           remap_return_value_1 = mix(out1_remap_1, out2_remap_1, clamp((f_remap_1 - in1_remap_1) / (in2_remap_1 - in1_remap_1), 0., 1.));
           remap_has_returned_1 = true;
           remap_return_value_inlined_104_1 = remap_return_value_1;
           f_remap_1 = t_mainImage_1;
           in1_remap_1 = 11.5;
           in2_remap_1 = 14.5;
           out1_remap_1 = 0.;
           out2_remap_1 = 1.;
           remap_has_returned_1 = false;
           remap_return_value_1 = mix(out1_remap_1, out2_remap_1, clamp((f_remap_1 - in1_remap_1) / (in2_remap_1 - in1_remap_1), 0., 1.));
           remap_has_returned_1 = true;
           remap_return_value_inlined_105_1 = remap_return_value_1;
           stretch_1 = remap_return_value_inlined_104_1 - remap_return_value_inlined_105_1;
           edZ_has_returned_1 = false;
           edZ_return_value_1 = mix(5., - 2., edWalk_1);
           edZ_has_returned_1 = true;
           edZ_return_value_inlined_106_1 = edZ_return_value_1;
           lookAt_mainImage_1 = vec3(0, stretch_1 * .5 - .5, edZ_return_value_inlined_106_1);
           f_remap_1 = t_mainImage_1;
           in1_remap_1 = 3.;
           in2_remap_1 = 3.2;
           out1_remap_1 = 0.;
           out2_remap_1 = 1.;
           remap_has_returned_1 = false;
           remap_return_value_1 = mix(out1_remap_1, out2_remap_1, clamp((f_remap_1 - in1_remap_1) / (in2_remap_1 - in1_remap_1), 0., 1.));
           remap_has_returned_1 = true;
           remap_return_value_inlined_107_1 = remap_return_value_1;
           edTwist_1 = remap_return_value_inlined_107_1 * stretch_1;
           f_remap_1 = t_mainImage_1;
           in1_remap_1 = 3.2;
           in2_remap_1 = 3.4;
           out1_remap_1 = 0.;
           out2_remap_1 = 1.;
           remap_has_returned_1 = false;
           remap_return_value_1 = mix(out1_remap_1, out2_remap_1, clamp((f_remap_1 - in1_remap_1) / (in2_remap_1 - in1_remap_1), 0., 1.));
           remap_has_returned_1 = true;
           remap_return_value_inlined_108_1 = remap_return_value_1;
           edDown_1 = remap_return_value_inlined_108_1 * stretch_1;
           if(t_mainImage_1 <= 9.5)
            {
             f_remap_1 = t_mainImage_1;
             in1_remap_1 = 4.;
             in2_remap_1 = 9.5;
             out1_remap_1 = 0.;
             out2_remap_1 = 1.;
             remap_has_returned_1 = false;
             remap_return_value_1 = mix(out1_remap_1, out2_remap_1, clamp((f_remap_1 - in1_remap_1) / (in2_remap_1 - in1_remap_1), 0., 1.));
             remap_has_returned_1 = true;
             remap_return_value_inlined_109_1 = remap_return_value_1;
             ternary_0_mainImage_1 = remap_return_value_inlined_109_1;
            }
           else
            {
             ternary_0_mainImage_1 = 0.;
            }
           edShoot_1 = ternary_0_mainImage_1;
          }
        }
      }
    }
  }
 dim_mainImage_1 = 1. - cos(min(1., 2. * min(abs(time_mainImage_1 - startScene_mainImage_1), abs(time_mainImage_1 - endScene_mainImage_1))) * 1.5705);
 col_mainImage_1 = vec3(0);
 coord_mainImage_1 = gl_FragCoord.xy;
 fireShock_has_returned_1 = false;
 fireShock_return_value_1 = abs(sin(edShoot_1 * 78.5375));
 fireShock_has_returned_1 = true;
 fireShock_return_value_inlined_110_1 = fireShock_return_value_1;
 coord_mainImage_1 += (fract(fireShock_return_value_inlined_110_1 * vec2(23242.232, 978.23465)) - .5) * 10.;
 uv_mainImage_1 = (coord_mainImage_1 - .5 * iResolution.xy) / iResolution.y;
 ro_getRayDir_1 = ro_mainImage_1;
 lookAt_getRayDir_1 = lookAt_mainImage_1;
 uv_getRayDir_1 = uv_mainImage_1;
 getRayDir_has_returned_1 = false;
 forward_getRayDir_1 = normalize(lookAt_getRayDir_1 - ro_getRayDir_1);
 right_getRayDir_1 = normalize(cross(vec3(0, 1, 0), forward_getRayDir_1));
 getRayDir_return_value_1 = normalize(forward_getRayDir_1 + right_getRayDir_1 * uv_getRayDir_1.x + cross(forward_getRayDir_1, right_getRayDir_1) * uv_getRayDir_1.y);
 getRayDir_has_returned_1 = true;
 getRayDir_return_value_inlined_111_1 = getRayDir_return_value_1;
 ro_getSceneColor_1 = ro_mainImage_1;
 rd_getSceneColor_1 = getRayDir_return_value_inlined_111_1;
 getSceneColor_has_returned_1 = false;
 d_getSceneColor_1 = .01;
 for( steps_getSceneColor_1 = 0.;
 (! getSceneColor_has_returned_1) && steps_getSceneColor_1 < 120.; steps_getSceneColor_1 ++)
  {
   p_getSceneColor_1 = ro_getSceneColor_1 + rd_getSceneColor_1 * d_getSceneColor_1;
   p_map_1 = p_getSceneColor_1;
   map_has_returned_1 = false;
   p_room_1 = p_map_1;
   room_has_returned_1 = false;
   r_room_1.mat = vec3(.4);
   r_room_1.specPower = 1e7;
   xy_room_1 = p_room_1.xy - vec2(0, 2);
   p_room_1.x = abs(p_room_1.x);
   p_room_1.yz += vec2(.5, - 3.4);
   p_sdBox_1 = p_room_1;
   b_sdBox_1 = frameInner_room_1 + vec3(0, 0, 1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_69_1 = sdBox_return_value_1;
   doorHole_room_1 = sdBox_return_value_inlined_69_1;
   backWall_room_1 = length(p_room_1.z - 8.);
   r_room_1.d = min(backWall_room_1, max(length(p_room_1.z), - doorHole_room_1 + .1));
   if(r_room_1.d == backWall_room_1)
    {
     p_sdOctogon_1 = xy_room_1;
     r_sdOctogon_1 = 2.6;
     sdOctogon_has_returned_1 = false;
     p_sdOctogon_1 = abs(p_sdOctogon_1);
     p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
     p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
     p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
     sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
     sdOctogon_has_returned_1 = true;
     sdOctogon_return_value_inlined_70_1 = sdOctogon_return_value_1;
     p_sdOctogon_1 = xy_room_1;
     r_sdOctogon_1 = 1.9;
     sdOctogon_has_returned_1 = false;
     p_sdOctogon_1 = abs(p_sdOctogon_1);
     p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
     p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
     p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
     sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
     sdOctogon_has_returned_1 = true;
     sdOctogon_return_value_inlined_71_1 = sdOctogon_return_value_1;
     ocp_room_1 = min(abs(sdOctogon_return_value_inlined_70_1), abs(sdOctogon_return_value_inlined_71_1));
     p_sdOctogon_1 = xy_room_1;
     r_sdOctogon_1 = 1.2;
     sdOctogon_has_returned_1 = false;
     p_sdOctogon_1 = abs(p_sdOctogon_1);
     p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
     p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
     p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
     sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
     sdOctogon_has_returned_1 = true;
     sdOctogon_return_value_inlined_72_1 = sdOctogon_return_value_1;
     ocp_room_1 = min(max(ocp_room_1, min(.7 - abs(xy_room_1.x + 1.2), - xy_room_1.y)), max(abs(sdOctogon_return_value_inlined_72_1), min(xy_room_1.x, .7 - abs(xy_room_1.y))));
     if(ocp_room_1 < .3)
      {
       r_room_1.mat = vec3(.39, .57, .71);
      }
    }
   p_sdBox_1 = p_room_1;
   b_sdBox_1 = frameInner_room_1 + vec3(.4, .4, .1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_73_1 = sdBox_return_value_1;
   doorFrame_room_1 = max(sdBox_return_value_inlined_73_1, - doorHole_room_1);
   doorWidth_room_1 = frameInner_room_1.x * .5;
   p_room_1.x -= frameInner_room_1.x;
   a_rot_1 = doorOpen_1 * 2.1;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_74_1 = rot_return_value_1;
   p_room_1.xz *= rot_return_value_inlined_74_1;
   p_room_1.x += doorWidth_room_1;
   p_sdBox_1 = p_room_1;
   b_sdBox_1 = vec3(doorWidth_room_1, frameInner_room_1.yz);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_75_1 = sdBox_return_value_1;
   door_room_1 = sdBox_return_value_inlined_75_1;
   p_room_1 = abs(p_room_1) - vec3(doorWidth_room_1 * .5, 1.1, .14);
   p_sdBox_1 = p_room_1;
   b_sdBox_1 = vec3(.45, .9, .1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_76_1 = sdBox_return_value_1;
   p_sdBox_1 = p_room_1;
   b_sdBox_1 = vec3(.35, .8, 1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_77_1 = sdBox_return_value_1;
   d_room_1 = min(doorFrame_room_1, max(door_room_1, - max(sdBox_return_value_inlined_76_1, - sdBox_return_value_inlined_77_1)));
   if(d_room_1 < r_room_1.d)
    {
     r_room_1.d = d_room_1;
     r_room_1.mat = vec3(.02, .02, .024);
     r_room_1.specPower = 10.;
    }
   room_return_value_1 = r_room_1;
   room_has_returned_1 = true;
   room_return_value_inlined_78_1 = room_return_value_1;
   p_ed209_1 = p_map_1;
   ed209_has_returned_1 = false;
   f_legWalkAngle_1 = 2.;
   legWalkAngle_has_returned_1 = false;
   legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
   legWalkAngle_has_returned_1 = true;
   legWalkAngle_return_value_inlined_54_1 = legWalkAngle_return_value_1;
   edZ_has_returned_1 = false;
   edZ_return_value_1 = mix(5., - 2., edWalk_1);
   edZ_has_returned_1 = true;
   edZ_return_value_inlined_55_1 = edZ_return_value_1;
   p_ed209_1.yz += vec2(legWalkAngle_return_value_inlined_54_1 * .2 + .1, - edZ_return_value_inlined_55_1);
   p_legs_1 = p_ed209_1;
   legs_has_returned_1 = false;
   mat_setBodyMaterial_1 = r_legs_1;
   mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
   mat_setBodyMaterial_1.specPower = 30.;
   r_legs_1 = mat_setBodyMaterial_1;
   f_legWalkAngle_1 = 1.;
   legWalkAngle_has_returned_1 = false;
   legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
   legWalkAngle_has_returned_1 = true;
   legWalkAngle_return_value_inlined_45_1 = legWalkAngle_return_value_1;
   legAngle_legs_1 = legWalkAngle_return_value_inlined_45_1;
   p_legs_1.z += .27;
   a_rot_1 = legAngle_legs_1 * sign(p_legs_1.x);
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_46_1 = rot_return_value_1;
   p_legs_1.yz *= rot_return_value_inlined_46_1;
   p_legs_1.z -= .27;
   p_legs_1.y += .65;
   a_rot_1 = - .2;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_47_1 = rot_return_value_1;
   p_legs_1.yz *= rot_return_value_inlined_47_1;
   a_rot_1 = legAngle_legs_1 * .3;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_48_1 = rot_return_value_1;
   p_legs_1.xy *= rot_return_value_inlined_48_1;
   pp_legs_1 = p_legs_1;
   pp_legs_1.x = abs(pp_legs_1.x);
   pp_legs_1.y += .48;
   a_rot_1 = - .58525;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_49_1 = rot_return_value_1;
   pp_legs_1.yz *= rot_return_value_inlined_49_1;
   pp_legs_1.x -= .98;
   cp_legs_1 = pp_legs_1;
   p_legs_1 = pp_legs_1;
   pp_legs_1.xz = abs(pp_legs_1.xz) - vec2(.12, .25);
   p_legs_1.y += .68;
   p_legs_1.xy = abs(p_legs_1.xy) - .12;
   p_sdBox_1 = p_legs_1;
   b_sdBox_1 = vec3(.07, .05, 1.2);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_50_1 = sdBox_return_value_1;
   silver_legs_1 = sdBox_return_value_inlined_50_1;
   cp_legs_1 -= vec3(0, - .7, 0);
   p_sdBox_1 = cp_legs_1 - vec3(0, 0, 1.15);
   b_sdBox_1 = vec3(.17, .17, .07);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_51_1 = sdBox_return_value_1;
   r_legs_1.d = sdBox_return_value_inlined_51_1 - .04;
   cp_legs_1.z ++;
   p_sdChamferedCube_1 = cp_legs_1.xzy;
   r_sdChamferedCube_1 = vec2(.28 - sign(abs(cp_legs_1.z) - .3) * .01, .5).xyx;
   c_sdChamferedCube_1 = .18;
   sdChamferedCube_has_returned_1 = false;
   p_sdBox_1 = p_sdChamferedCube_1;
   b_sdBox_1 = r_sdChamferedCube_1;
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_0_1 = sdBox_return_value_1;
   cube_sdChamferedCube_1 = sdBox_return_value_inlined_0_1;
   a_rot_1 = .78525;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_1_1 = rot_return_value_1;
   p_sdChamferedCube_1.xz *= rot_return_value_inlined_1_1;
   r_sdChamferedCube_1.xz *= - c_sdChamferedCube_1 / 1.41 + 1.41;
   p_sdBox_1 = p_sdChamferedCube_1;
   b_sdBox_1 = r_sdChamferedCube_1;
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_2_1 = sdBox_return_value_1;
   sdChamferedCube_return_value_1 = max(cube_sdChamferedCube_1, sdBox_return_value_inlined_2_1);
   sdChamferedCube_has_returned_1 = true;
   sdChamferedCube_return_value_inlined_52_1 = sdChamferedCube_return_value_1;
   r_legs_1.d = min(r_legs_1.d, sdChamferedCube_return_value_inlined_52_1);
   p_foot_1 = cp_legs_1;
   foot_has_returned_1 = false;
   p_foot_1.z += .8;
   a_rot_1 = .86;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_29_1 = rot_return_value_1;
   p_foot_1.yz *= rot_return_value_inlined_29_1;
   p_toe_1 = p_foot_1;
   toe_has_returned_1 = false;
   p_toe_1.yz += vec2(.1, .32);
   p_sdBox_1 = p_toe_1;
   b_sdBox_1 = vec3(.3 + .2 * (p_toe_1.z - .18) - p_toe_1.y * .228, .3 + .2 * cos((p_toe_1.z - .18) * 3.69), .35);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_28_1 = sdBox_return_value_1;
   toe_return_value_1 = max(sdBox_return_value_inlined_28_1, .1 - p_toe_1.y);
   toe_has_returned_1 = true;
   toe_return_value_inlined_30_1 = toe_return_value_1;
   d_foot_1 = toe_return_value_inlined_30_1;
   a_rot_1 = 1.57;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_31_1 = rot_return_value_1;
   p_foot_1.xz *= rot_return_value_inlined_31_1;
   p_foot_1.x -= .43;
   p_foot_1.z = .25 - abs(p_foot_1.z);
   p_toe_1 = p_foot_1;
   toe_has_returned_1 = false;
   p_toe_1.yz += vec2(.1, .32);
   p_sdBox_1 = p_toe_1;
   b_sdBox_1 = vec3(.3 + .2 * (p_toe_1.z - .18) - p_toe_1.y * .228, .3 + .2 * cos((p_toe_1.z - .18) * 3.69), .35);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_28_1 = sdBox_return_value_1;
   toe_return_value_1 = max(sdBox_return_value_inlined_28_1, .1 - p_toe_1.y);
   toe_has_returned_1 = true;
   toe_return_value_inlined_32_1 = toe_return_value_1;
   foot_return_value_1 = min(d_foot_1, toe_return_value_inlined_32_1);
   foot_has_returned_1 = true;
   foot_return_value_inlined_53_1 = foot_return_value_1;
   r_legs_1.d = min(r_legs_1.d, foot_return_value_inlined_53_1);
   if(silver_legs_1 < r_legs_1.d)
    {
     r_legs_1.d = silver_legs_1;
     r_legs_1.mat = vec3(.8);
    }
   legs_return_value_1 = r_legs_1;
   legs_has_returned_1 = true;
   legs_return_value_inlined_56_1 = legs_return_value_1;
   r_ed209_1 = legs_return_value_inlined_56_1;
   f_ed209_1 = min(stretch_1 * 2., 1.);
   slide_ed209_1 = f_ed209_1 < .5 ? smoothstep(0., .5, f_ed209_1) : (1. - smoothstep(.5, 1., f_ed209_1) * .2);
   p_ed209_1.yz -= slide_ed209_1 * .5;
   gunsUp_1 = smoothstep(0., 1., clamp((stretch_1 - .66) * 6., 0., 1.));
   fireShock_has_returned_1 = false;
   fireShock_return_value_1 = abs(sin(edShoot_1 * 78.5375));
   fireShock_has_returned_1 = true;
   fireShock_return_value_inlined_57_1 = fireShock_return_value_1;
   gunsForward_1 = smoothstep(0., 1., clamp((stretch_1 - .83) * 6., 0., 1.)) + fireShock_return_value_inlined_57_1 * .5;
   p_waist_1 = p_ed209_1;
   waist_has_returned_1 = false;
   mat_setBodyMaterial_1 = r_waist_1;
   mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
   mat_setBodyMaterial_1.specPower = 30.;
   r_waist_1 = mat_setBodyMaterial_1;
   p_waist_1.y += .65;
   a_rot_1 = - .2;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_33_1 = rot_return_value_1;
   p_waist_1.yz *= rot_return_value_inlined_33_1;
   f_legWalkAngle_1 = 1.;
   legWalkAngle_has_returned_1 = false;
   legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
   legWalkAngle_has_returned_1 = true;
   legWalkAngle_return_value_inlined_34_1 = legWalkAngle_return_value_1;
   legAngle_waist_1 = legWalkAngle_return_value_inlined_34_1;
   a_rot_1 = legAngle_waist_1 * .3;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_35_1 = rot_return_value_1;
   p_waist_1.xy *= rot_return_value_inlined_35_1;
   pp_waist_1 = p_waist_1;
   pp_waist_1.y += .3;
   p_sdCappedCylinder_1 = pp_waist_1.zyx;
   h_sdCappedCylinder_1 = .5;
   r_sdCappedCylinder_1 = .5;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_36_1 = sdCappedCylinder_return_value_1;
   r_waist_1.d = max(sdCappedCylinder_return_value_inlined_36_1, p_waist_1.y + .15);
   bump_waist_1 = .5 - abs(sin(p_waist_1.y * 40.)) * .03;
   p_sdBox_1 = p_waist_1;
   b_sdBox_1 = vec3(bump_waist_1, .15, bump_waist_1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_37_1 = sdBox_return_value_1;
   d_waist_1 = sdBox_return_value_inlined_37_1;
   bump_waist_1 = .3 - abs(sin(p_waist_1.x * 40.)) * .03;
   pp_waist_1.y += .18;
   p_sdCappedCylinder_1 = pp_waist_1.zyx;
   h_sdCappedCylinder_1 = bump_waist_1;
   r_sdCappedCylinder_1 = .75;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_38_1 = sdCappedCylinder_return_value_1;
   d_waist_1 = min(d_waist_1, sdCappedCylinder_return_value_inlined_38_1);
   pp_waist_1.x = abs(pp_waist_1.x);
   a_rot_1 = - .58525 + legAngle_waist_1 * sign(p_waist_1.x);
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_39_1 = rot_return_value_1;
   pp_waist_1.yz *= rot_return_value_inlined_39_1;
   pp_waist_1.x -= .98;
   p_sdCappedCylinder_1 = pp_waist_1.zyx;
   h_sdCappedCylinder_1 = .4;
   r_sdCappedCylinder_1 = .24;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_40_1 = sdCappedCylinder_return_value_1;
   r_waist_1.d = min(r_waist_1.d, max(sdCappedCylinder_return_value_inlined_40_1, - pp_waist_1.y));
   p_sdBox_1 = pp_waist_1;
   b_sdBox_1 = vec3(.24, .2, .14 + .2 * pp_waist_1.y);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_41_1 = sdBox_return_value_1;
   r_waist_1.d = min(r_waist_1.d, sdBox_return_value_inlined_41_1);
   p_waist_1 = pp_waist_1;
   pp_waist_1.xz = abs(pp_waist_1.xz) - vec2(.12, .25);
   p_sdCappedCylinder_1 = pp_waist_1.xzy;
   h_sdCappedCylinder_1 = .1;
   r_sdCappedCylinder_1 = .325;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_42_1 = sdCappedCylinder_return_value_1;
   p_sdCappedCylinder_1 = pp_waist_1.xzy;
   h_sdCappedCylinder_1 = .05;
   r_sdCappedCylinder_1 = .5;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_43_1 = sdCappedCylinder_return_value_1;
   r_waist_1.d = min(r_waist_1.d, max(min(sdCappedCylinder_return_value_inlined_42_1, sdCappedCylinder_return_value_inlined_43_1), pp_waist_1.y));
   p_waist_1.y += .68;
   p_sdBox_1 = p_waist_1;
   b_sdBox_1 = vec3(sign(abs(p_waist_1.y) - .04) * .005 + .26, .2, .34);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_44_1 = sdBox_return_value_1;
   r_waist_1.d = min(r_waist_1.d, sdBox_return_value_inlined_44_1);
   if(d_waist_1 < r_waist_1.d)
    {
     r_waist_1.d = d_waist_1;
     r_waist_1.mat = vec3(.02);
    }
   waist_return_value_1 = r_waist_1;
   waist_has_returned_1 = true;
   waist_return_value_inlined_58_1 = waist_return_value_1;
   a_minResult_1 = r_ed209_1;
   b_minResult_1 = waist_return_value_inlined_58_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     if(! live_tu_has_executed)
      {
       float an_mainImage_2;
       vec3 ro_mainImage_2;
       vec3 ta_mainImage_2;
       vec3 ww_mainImage_2;
       vec3 uu_mainImage_2;
       vec3 vv_mainImage_2;
       vec3 tot_mainImage_2;
       int m_mainImage_2;
       int n_mainImage_2;
       vec2 o_mainImage_2;
       vec2 p_mainImage_2;
       vec3 rd_mainImage_2;
       const float tmax_mainImage_2 = 5.0;
       float t_mainImage_2;
       int i_mainImage_2;
       vec3 pos_mainImage_2;
       vec3 pos_map_2;
       bool map_has_returned_2;
       float map_return_value_2;
       float ra_map_2;
       float rb_map_2;
       float di_map_2;
       vec3 p2_sdDeathStar_2;
       float ra_sdDeathStar_2;
       float rb_sdDeathStar_2;
       float d_sdDeathStar_2;
       bool sdDeathStar_has_returned_2;
       float sdDeathStar_return_value_2;
       vec2 p_sdDeathStar_2;
       float a_sdDeathStar_2;
       float b_sdDeathStar_2;
       float sdDeathStar_return_value_inlined_0_2;
       float map_return_value_inlined_6_2;
       float h_mainImage_2;
       vec3 col_mainImage_2;
       vec3 pos_calcNormal_2;
       bool calcNormal_has_returned_2;
       vec3 calcNormal_return_value_2;
       vec2 e_calcNormal_2;
       const float eps_calcNormal_2 = 0.0005;
       float map_return_value_inlined_2_2;
       float map_return_value_inlined_3_2;
       float map_return_value_inlined_4_2;
       float map_return_value_inlined_5_2;
       vec3 calcNormal_return_value_inlined_7_2;
       vec3 nor_mainImage_2;
       vec3 lig_mainImage_2;
       float dif_mainImage_2;
       vec3 ro_calcSoftshadow_2;
       vec3 rd_calcSoftshadow_2;
       float tmin_calcSoftshadow_2;
       float tmax_calcSoftshadow_2;
       float k_calcSoftshadow_2;
       bool calcSoftshadow_has_returned_2;
       float calcSoftshadow_return_value_2;
       float res_calcSoftshadow_2;
       float t_calcSoftshadow_2;
       int i_calcSoftshadow_2;
       float map_return_value_inlined_1_2;
       float h_calcSoftshadow_2;
       float calcSoftshadow_return_value_inlined_8_2;
       float amb_mainImage_2;
       dim_mainImage_1 = 1.0 * sin(0.38 * iTime + 3.0);
       b_sdBox_1 = vec3(1.0 * cos(dim_mainImage_1), - 0.1, 1.0 * sin(dim_mainImage_1));
       p_sdCappedCylinder_1 = vec3(0.0, 0.0, 0.0);
       pp_gunPod_1 = normalize(p_sdCappedCylinder_1 - b_sdBox_1);
       p_sdChamferedCube_1 = normalize(cross(pp_gunPod_1, vec3(0.0, 1.0, 0.0)));
       ro_getRayDir_1 = normalize(cross(p_sdChamferedCube_1, pp_gunPod_1));
       p_applyLighting_1 = vec3(0.0);
       for(       m_mainImage_2 = 0;
 m_mainImage_2 < 3; m_mainImage_2 ++)
        {
         for(         n_mainImage_2 = 0;
 n_mainImage_2 < 3; n_mainImage_2 ++)
          {
           coord_mainImage_1 = vec2(float(m_mainImage_2), float(n_mainImage_2)) / float(3) - 0.5;
           q_vignette_1 = (2.0 * (gl_FragCoord.xy + coord_mainImage_1) - iResolution.xy) / iResolution.y;
           r_sdChamferedCube_1 = normalize(q_vignette_1.x * p_sdChamferedCube_1 + q_vignette_1.y * ro_getRayDir_1 + 1.5 * pp_gunPod_1);
           sdCappedCylinder_return_value_inlined_18_1 = 0.0;
           for(           i_mainImage_2 = 0;
 i_mainImage_2 < 256; i_mainImage_2 ++)
            {
             p_waist_1 = b_sdBox_1 + sdCappedCylinder_return_value_inlined_18_1 * r_sdChamferedCube_1;
             q_sdBox_1 = p_waist_1;
             legWalkAngle_has_returned_1 = false;
             r_sdOctogon_1 = 0.5;
             c_sdChamferedCube_1 = 0.35 + 0.20 * cos(iTime * 1.1 + 4.0);
             sdCappedCylinder_return_value_inlined_40_1 = 0.50 + 0.15 * cos(iTime * 1.7);
             p_toe_1 = q_sdBox_1;
             ternary_0_mainImage_1 = r_sdOctogon_1;
             sdBox_return_value_inlined_16_1 = c_sdChamferedCube_1;
             edZ_return_value_inlined_97_1 = sdCappedCylinder_return_value_inlined_40_1;
             headLower_has_returned_1 = false;
             uv_getRayDir_1 = vec2(p_toe_1.x, length(p_toe_1.yz));
             doorFrame_room_1 = (ternary_0_mainImage_1 * ternary_0_mainImage_1 - sdBox_return_value_inlined_16_1 * sdBox_return_value_inlined_16_1 + edZ_return_value_inlined_97_1 * edZ_return_value_inlined_97_1) / (2.0 * edZ_return_value_inlined_97_1);
             sdCapsule_return_value_inlined_25_1 = sqrt(max(ternary_0_mainImage_1 * ternary_0_mainImage_1 - doorFrame_room_1 * doorFrame_room_1, 0.0));
             if(uv_getRayDir_1.x * sdCapsule_return_value_inlined_25_1 - uv_getRayDir_1.y * doorFrame_room_1 > edZ_return_value_inlined_97_1 * max(sdCapsule_return_value_inlined_25_1 - uv_getRayDir_1.y, 0.0))
              {
               s_rot_1 = length(uv_getRayDir_1 - vec2(doorFrame_room_1, sdCapsule_return_value_inlined_25_1));
               headLower_has_returned_1 = true;
              }
             else
              {
               s_rot_1 = max((length(uv_getRayDir_1) - ternary_0_mainImage_1), - (length(uv_getRayDir_1 - vec2(edZ_return_value_inlined_97_1, 0)) - sdBox_return_value_inlined_16_1));
               headLower_has_returned_1 = true;
              }
             spe_applyLighting_1 = s_rot_1;
             toe_return_value_inlined_30_1 = spe_applyLighting_1;
             legWalkAngle_has_returned_1 = true;
             sdBox_return_value_1 = toe_return_value_inlined_30_1;
             cax_sdCappedCone_1 = sdBox_return_value_1;
             if(cax_sdCappedCone_1 < 0.0001 || sdCappedCylinder_return_value_inlined_18_1 > tmax_mainImage_2)
              {
               break;
              }
             sdCappedCylinder_return_value_inlined_18_1 += cax_sdCappedCone_1;
            }
           lookAt_getRayDir_1 = vec3(0.0);
           if(sdCappedCylinder_return_value_inlined_18_1 < tmax_mainImage_2)
            {
             p_waist_1 = b_sdBox_1 + sdCappedCylinder_return_value_inlined_18_1 * r_sdChamferedCube_1;
             p_calcNormal_1 = p_waist_1;
             applyLighting_has_returned_1 = false;
             h_sdTriPrism_1 = vec2(1.0, - 1.0) * 0.5773;
             q_sdBox_1 = p_calcNormal_1 + h_sdTriPrism_1.xyy * eps_calcNormal_2;
             legWalkAngle_has_returned_1 = false;
             r_sdOctogon_1 = 0.5;
             c_sdChamferedCube_1 = 0.35 + 0.20 * cos(iTime * 1.1 + 4.0);
             sdCappedCylinder_return_value_inlined_40_1 = 0.50 + 0.15 * cos(iTime * 1.7);
             p_toe_1 = q_sdBox_1;
             ternary_0_mainImage_1 = r_sdOctogon_1;
             sdBox_return_value_inlined_16_1 = c_sdChamferedCube_1;
             edZ_return_value_inlined_97_1 = sdCappedCylinder_return_value_inlined_40_1;
             headLower_has_returned_1 = false;
             uv_getRayDir_1 = vec2(p_toe_1.x, length(p_toe_1.yz));
             doorFrame_room_1 = (ternary_0_mainImage_1 * ternary_0_mainImage_1 - sdBox_return_value_inlined_16_1 * sdBox_return_value_inlined_16_1 + edZ_return_value_inlined_97_1 * edZ_return_value_inlined_97_1) / (2.0 * edZ_return_value_inlined_97_1);
             sdCapsule_return_value_inlined_25_1 = sqrt(max(ternary_0_mainImage_1 * ternary_0_mainImage_1 - doorFrame_room_1 * doorFrame_room_1, 0.0));
             if(uv_getRayDir_1.x * sdCapsule_return_value_inlined_25_1 - uv_getRayDir_1.y * doorFrame_room_1 > edZ_return_value_inlined_97_1 * max(sdCapsule_return_value_inlined_25_1 - uv_getRayDir_1.y, 0.0))
              {
               s_rot_1 = length(uv_getRayDir_1 - vec2(doorFrame_room_1, sdCapsule_return_value_inlined_25_1));
               headLower_has_returned_1 = true;
              }
             else
              {
               s_rot_1 = max((length(uv_getRayDir_1) - ternary_0_mainImage_1), - (length(uv_getRayDir_1 - vec2(edZ_return_value_inlined_97_1, 0)) - sdBox_return_value_inlined_16_1));
               headLower_has_returned_1 = true;
              }
             spe_applyLighting_1 = s_rot_1;
             toe_return_value_inlined_30_1 = spe_applyLighting_1;
             legWalkAngle_has_returned_1 = true;
             a_rot_1 = toe_return_value_inlined_30_1;
             q_sdBox_1 = p_calcNormal_1 + h_sdTriPrism_1.yyx * eps_calcNormal_2;
             legWalkAngle_has_returned_1 = false;
             r_sdOctogon_1 = 0.5;
             c_sdChamferedCube_1 = 0.35 + 0.20 * cos(iTime * 1.1 + 4.0);
             sdCappedCylinder_return_value_inlined_40_1 = 0.50 + 0.15 * cos(iTime * 1.7);
             p_toe_1 = q_sdBox_1;
             ternary_0_mainImage_1 = r_sdOctogon_1;
             sdBox_return_value_inlined_16_1 = c_sdChamferedCube_1;
             edZ_return_value_inlined_97_1 = sdCappedCylinder_return_value_inlined_40_1;
             headLower_has_returned_1 = false;
             uv_getRayDir_1 = vec2(p_toe_1.x, length(p_toe_1.yz));
             doorFrame_room_1 = (ternary_0_mainImage_1 * ternary_0_mainImage_1 - sdBox_return_value_inlined_16_1 * sdBox_return_value_inlined_16_1 + edZ_return_value_inlined_97_1 * edZ_return_value_inlined_97_1) / (2.0 * edZ_return_value_inlined_97_1);
             sdCapsule_return_value_inlined_25_1 = sqrt(max(ternary_0_mainImage_1 * ternary_0_mainImage_1 - doorFrame_room_1 * doorFrame_room_1, 0.0));
             if(uv_getRayDir_1.x * sdCapsule_return_value_inlined_25_1 - uv_getRayDir_1.y * doorFrame_room_1 > edZ_return_value_inlined_97_1 * max(sdCapsule_return_value_inlined_25_1 - uv_getRayDir_1.y, 0.0))
              {
               s_rot_1 = length(uv_getRayDir_1 - vec2(doorFrame_room_1, sdCapsule_return_value_inlined_25_1));
               headLower_has_returned_1 = true;
              }
             else
              {
               s_rot_1 = max((length(uv_getRayDir_1) - ternary_0_mainImage_1), - (length(uv_getRayDir_1 - vec2(edZ_return_value_inlined_97_1, 0)) - sdBox_return_value_inlined_16_1));
               headLower_has_returned_1 = true;
              }
             spe_applyLighting_1 = s_rot_1;
             toe_return_value_inlined_30_1 = spe_applyLighting_1;
             legWalkAngle_has_returned_1 = true;
             startScene_mainImage_1 = toe_return_value_inlined_30_1;
             q_sdBox_1 = p_calcNormal_1 + h_sdTriPrism_1.yxy * eps_calcNormal_2;
             legWalkAngle_has_returned_1 = false;
             r_sdOctogon_1 = 0.5;
             c_sdChamferedCube_1 = 0.35 + 0.20 * cos(iTime * 1.1 + 4.0);
             sdCappedCylinder_return_value_inlined_40_1 = 0.50 + 0.15 * cos(iTime * 1.7);
             p_toe_1 = q_sdBox_1;
             ternary_0_mainImage_1 = r_sdOctogon_1;
             sdBox_return_value_inlined_16_1 = c_sdChamferedCube_1;
             edZ_return_value_inlined_97_1 = sdCappedCylinder_return_value_inlined_40_1;
             headLower_has_returned_1 = false;
             uv_getRayDir_1 = vec2(p_toe_1.x, length(p_toe_1.yz));
             doorFrame_room_1 = (ternary_0_mainImage_1 * ternary_0_mainImage_1 - sdBox_return_value_inlined_16_1 * sdBox_return_value_inlined_16_1 + edZ_return_value_inlined_97_1 * edZ_return_value_inlined_97_1) / (2.0 * edZ_return_value_inlined_97_1);
             sdCapsule_return_value_inlined_25_1 = sqrt(max(ternary_0_mainImage_1 * ternary_0_mainImage_1 - doorFrame_room_1 * doorFrame_room_1, 0.0));
             if(uv_getRayDir_1.x * sdCapsule_return_value_inlined_25_1 - uv_getRayDir_1.y * doorFrame_room_1 > edZ_return_value_inlined_97_1 * max(sdCapsule_return_value_inlined_25_1 - uv_getRayDir_1.y, 0.0))
              {
               s_rot_1 = length(uv_getRayDir_1 - vec2(doorFrame_room_1, sdCapsule_return_value_inlined_25_1));
               headLower_has_returned_1 = true;
              }
             else
              {
               s_rot_1 = max((length(uv_getRayDir_1) - ternary_0_mainImage_1), - (length(uv_getRayDir_1 - vec2(edZ_return_value_inlined_97_1, 0)) - sdBox_return_value_inlined_16_1));
               headLower_has_returned_1 = true;
              }
             spe_applyLighting_1 = s_rot_1;
             toe_return_value_inlined_30_1 = spe_applyLighting_1;
             legWalkAngle_has_returned_1 = true;
             edZ_return_value_inlined_93_1 = toe_return_value_inlined_30_1;
             q_sdBox_1 = p_calcNormal_1 + h_sdTriPrism_1.xxx * eps_calcNormal_2;
             legWalkAngle_has_returned_1 = false;
             r_sdOctogon_1 = 0.5;
             c_sdChamferedCube_1 = 0.35 + 0.20 * cos(iTime * 1.1 + 4.0);
             sdCappedCylinder_return_value_inlined_40_1 = 0.50 + 0.15 * cos(iTime * 1.7);
             p_toe_1 = q_sdBox_1;
             ternary_0_mainImage_1 = r_sdOctogon_1;
             sdBox_return_value_inlined_16_1 = c_sdChamferedCube_1;
             edZ_return_value_inlined_97_1 = sdCappedCylinder_return_value_inlined_40_1;
             headLower_has_returned_1 = false;
             uv_getRayDir_1 = vec2(p_toe_1.x, length(p_toe_1.yz));
             doorFrame_room_1 = (ternary_0_mainImage_1 * ternary_0_mainImage_1 - sdBox_return_value_inlined_16_1 * sdBox_return_value_inlined_16_1 + edZ_return_value_inlined_97_1 * edZ_return_value_inlined_97_1) / (2.0 * edZ_return_value_inlined_97_1);
             sdCapsule_return_value_inlined_25_1 = sqrt(max(ternary_0_mainImage_1 * ternary_0_mainImage_1 - doorFrame_room_1 * doorFrame_room_1, 0.0));
             if(uv_getRayDir_1.x * sdCapsule_return_value_inlined_25_1 - uv_getRayDir_1.y * doorFrame_room_1 > edZ_return_value_inlined_97_1 * max(sdCapsule_return_value_inlined_25_1 - uv_getRayDir_1.y, 0.0))
              {
               s_rot_1 = length(uv_getRayDir_1 - vec2(doorFrame_room_1, sdCapsule_return_value_inlined_25_1));
               headLower_has_returned_1 = true;
              }
             else
              {
               s_rot_1 = max((length(uv_getRayDir_1) - ternary_0_mainImage_1), - (length(uv_getRayDir_1 - vec2(edZ_return_value_inlined_97_1, 0)) - sdBox_return_value_inlined_16_1));
               headLower_has_returned_1 = true;
              }
             spe_applyLighting_1 = s_rot_1;
             toe_return_value_inlined_30_1 = spe_applyLighting_1;
             legWalkAngle_has_returned_1 = true;
             edZ_return_value_inlined_99_1 = toe_return_value_inlined_30_1;
             op_headLower_1 = normalize(h_sdTriPrism_1.xyy * a_rot_1 + h_sdTriPrism_1.yyx * startScene_mainImage_1 + h_sdTriPrism_1.yxy * edZ_return_value_inlined_93_1 + h_sdTriPrism_1.xxx * edZ_return_value_inlined_99_1);
             applyLighting_has_returned_1 = true;
             a_sdCapsule_1 = op_headLower_1;
             p_sdTriPrism_1 = a_sdCapsule_1;
             pp_legs_1 = vec3(0.57703);
             doorWidth_room_1 = clamp(dot(p_sdTriPrism_1, pp_legs_1), 0.0, 1.0);
             if(doorWidth_room_1 > 0.001)
              {
               p_getSceneColor_1 = p_waist_1 + p_sdTriPrism_1 * 0.001;
               p_arms_1 = pp_legs_1;
               foot_return_value_1 = 0.001;
               x_sdCappedCone_1 = 1.0;
               fireShock_return_value_inlined_21_1 = 32.0;
               sdOctogon_has_returned_1 = false;
               ao_return_value_inlined_89_1 = 1.0;
               remap_return_value_inlined_104_1 = foot_return_value_1;
               for(               i_calcSoftshadow_2 = 0;
 i_calcSoftshadow_2 < 64; i_calcSoftshadow_2 ++)
                {
                 q_sdBox_1 = p_getSceneColor_1 + p_arms_1 * remap_return_value_inlined_104_1;
                 legWalkAngle_has_returned_1 = false;
                 r_sdOctogon_1 = 0.5;
                 c_sdChamferedCube_1 = 0.35 + 0.20 * cos(iTime * 1.1 + 4.0);
                 sdCappedCylinder_return_value_inlined_40_1 = 0.50 + 0.15 * cos(iTime * 1.7);
                 p_toe_1 = q_sdBox_1;
                 ternary_0_mainImage_1 = r_sdOctogon_1;
                 sdBox_return_value_inlined_16_1 = c_sdChamferedCube_1;
                 edZ_return_value_inlined_97_1 = sdCappedCylinder_return_value_inlined_40_1;
                 headLower_has_returned_1 = false;
                 uv_getRayDir_1 = vec2(p_toe_1.x, length(p_toe_1.yz));
                 doorFrame_room_1 = (ternary_0_mainImage_1 * ternary_0_mainImage_1 - sdBox_return_value_inlined_16_1 * sdBox_return_value_inlined_16_1 + edZ_return_value_inlined_97_1 * edZ_return_value_inlined_97_1) / (2.0 * edZ_return_value_inlined_97_1);
                 sdCapsule_return_value_inlined_25_1 = sqrt(max(ternary_0_mainImage_1 * ternary_0_mainImage_1 - doorFrame_room_1 * doorFrame_room_1, 0.0));
                 if(uv_getRayDir_1.x * sdCapsule_return_value_inlined_25_1 - uv_getRayDir_1.y * doorFrame_room_1 > edZ_return_value_inlined_97_1 * max(sdCapsule_return_value_inlined_25_1 - uv_getRayDir_1.y, 0.0))
                  {
                   s_rot_1 = length(uv_getRayDir_1 - vec2(doorFrame_room_1, sdCapsule_return_value_inlined_25_1));
                   headLower_has_returned_1 = true;
                  }
                 else
                  {
                   s_rot_1 = max((length(uv_getRayDir_1) - ternary_0_mainImage_1), - (length(uv_getRayDir_1 - vec2(edZ_return_value_inlined_97_1, 0)) - sdBox_return_value_inlined_16_1));
                   headLower_has_returned_1 = true;
                  }
                 spe_applyLighting_1 = s_rot_1;
                 toe_return_value_inlined_30_1 = spe_applyLighting_1;
                 legWalkAngle_has_returned_1 = true;
                 out2_remap_1 = toe_return_value_inlined_30_1;
                 edZ_return_value_inlined_55_1 = out2_remap_1;
                 ao_return_value_inlined_89_1 = min(ao_return_value_inlined_89_1, fireShock_return_value_inlined_21_1 * edZ_return_value_inlined_55_1 / remap_return_value_inlined_104_1);
                 remap_return_value_inlined_104_1 += clamp(edZ_return_value_inlined_55_1, 0.003, 0.10);
                 if(ao_return_value_inlined_89_1 < 0.002 || remap_return_value_inlined_104_1 > x_sdCappedCone_1)
                  {
                   break;
                  }
                }
               bounce_applyLighting_1 = clamp(ao_return_value_inlined_89_1, 0.0, 1.0);
               sdOctogon_has_returned_1 = true;
               sdBox_return_value_inlined_9_1 = bounce_applyLighting_1;
               doorWidth_room_1 *= sdBox_return_value_inlined_9_1;
              }
             calcShadow_return_value_inlined_88_1 = 0.5 + 0.5 * dot(p_sdTriPrism_1, vec3(0.0, 1.0, 0.0));
             lookAt_getRayDir_1 = vec3(0.2, 0.3, 0.4) * calcShadow_return_value_inlined_88_1 + vec3(0.8, 0.7, 0.5) * doorWidth_room_1;
            }
           lookAt_getRayDir_1 = sqrt(lookAt_getRayDir_1);
           p_applyLighting_1 += lookAt_getRayDir_1;
          }
        }
       p_applyLighting_1 /= float(3 * 3);
       fragColor_2 = vec4(p_applyLighting_1, 1.0);
       fragColor_2.w = 1.0;
       live_tu_has_executed = true;
      }
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_59_1 = minResult_return_value_1;
   r_ed209_1 = minResult_return_value_inlined_59_1;
   f_legWalkAngle_1 = 2.;
   legWalkAngle_has_returned_1 = false;
   legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
   legWalkAngle_has_returned_1 = true;
   legWalkAngle_return_value_inlined_60_1 = legWalkAngle_return_value_1;
   a_rot_1 = .1 * (- edDown_1 + legWalkAngle_return_value_inlined_60_1 + smoothstep(0., 1., clamp((stretch_1 - .5) * 6., 0., 1.)) - 1.);
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_61_1 = rot_return_value_1;
   p_ed209_1.yz *= rot_return_value_inlined_61_1;
   a_rot_1 = edTwist_1 * .2;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_62_1 = rot_return_value_1;
   p_ed209_1.xz *= rot_return_value_inlined_62_1;
   p_headLower_1 = p_ed209_1;
   headLower_has_returned_1 = false;
   op_headLower_1 = p_headLower_1;
   p_headVisor_1 = p_headLower_1 * vec3(.95, - 1.4, .95);
   h_headVisor_1 = 1.;
   bump_headVisor_1 = 0.;
   headVisor_has_returned_1 = false;
   bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
   p_sdBox_1 = p_headVisor_1;
   b_sdBox_1 = vec3(1, h_headVisor_1, 2);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
   result_headVisor_1.d = sdBox_return_value_inlined_3_1;
   p_headSphere_1 = p_headVisor_1;
   headSphere_has_returned_1 = false;
   headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
   headSphere_has_returned_1 = true;
   headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
   result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
   result_headVisor_1.mat = vec3(.05);
   result_headVisor_1.specPower = 30.;
   headVisor_return_value_1 = result_headVisor_1;
   headVisor_has_returned_1 = true;
   headVisor_return_value_inlined_5_1 = headVisor_return_value_1;
   r_headLower_1 = headVisor_return_value_inlined_5_1;
   p_headVisor_1 = (p_headLower_1 + vec3(0, .01, 0)) * vec3(.95);
   h_headVisor_1 = 1.;
   bump_headVisor_1 = 0.;
   headVisor_has_returned_1 = false;
   bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
   p_sdBox_1 = p_headVisor_1;
   b_sdBox_1 = vec3(1, h_headVisor_1, 2);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
   result_headVisor_1.d = sdBox_return_value_inlined_3_1;
   p_headSphere_1 = p_headVisor_1;
   headSphere_has_returned_1 = false;
   headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
   headSphere_has_returned_1 = true;
   headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
   result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
   result_headVisor_1.mat = vec3(.05);
   result_headVisor_1.specPower = 30.;
   headVisor_return_value_1 = result_headVisor_1;
   headVisor_has_returned_1 = true;
   headVisor_return_value_inlined_6_1 = headVisor_return_value_1;
   r_headLower_1.d = min(r_headLower_1.d, max(max(headVisor_return_value_inlined_6_1.d, p_headLower_1.y - .35), p_headLower_1.y * .625 - p_headLower_1.z - .66));
   a_rot_1 = .075 * (gunsUp_1 - 1.) * sign(p_headLower_1.x);
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_7_1 = rot_return_value_1;
   p_headLower_1.xy *= rot_return_value_inlined_7_1;
   p_headLower_1.x = abs(p_headLower_1.x) - 1.33;
   p_headLower_1.y -= .1 - p_headLower_1.x * .1;
   p_sdBox_1 = p_headLower_1;
   b_sdBox_1 = vec3(.4, .06 * (1. - p_headLower_1.x), .3 - p_headLower_1.x * .2);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_8_1 = sdBox_return_value_1;
   r_headLower_1.d = min(r_headLower_1.d, sdBox_return_value_inlined_8_1);
   p_headLower_1 = op_headLower_1;
   p_headLower_1.y = abs(abs(p_headLower_1.y + .147) - .0556) - .0278;
   p_sdBox_1 = p_headLower_1 + vec3(0, 0, 1.5);
   b_sdBox_1 = vec3(mix(.25, .55, - op_headLower_1.y), .015, .1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_9_1 = sdBox_return_value_1;
   r_headLower_1.d = max(r_headLower_1.d, - sdBox_return_value_inlined_9_1);
   p_headLower_1 = op_headLower_1;
   p_headLower_1.y = abs(p_headLower_1.y + .16) - .06;
   p_headLower_1.z -= - 1.1;
   p_sdCappedCylinder_1 = p_headLower_1.xzy;
   h_sdCappedCylinder_1 = 1.;
   r_sdCappedCylinder_1 = .03;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_10_1 = sdCappedCylinder_return_value_1;
   p_sdCappedCylinder_1 = p_headLower_1.xzy;
   h_sdCappedCylinder_1 = .55;
   r_sdCappedCylinder_1 = 1.;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_11_1 = sdCappedCylinder_return_value_1;
   r_headLower_1.d = max(r_headLower_1.d, - max(max(sdCappedCylinder_return_value_inlined_10_1, - sdCappedCylinder_return_value_inlined_11_1), p_headLower_1.z + .2));
   mat_setBodyMaterial_1 = r_headLower_1;
   mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
   mat_setBodyMaterial_1.specPower = 30.;
   r_headLower_1 = mat_setBodyMaterial_1;
   headLower_return_value_1 = r_headLower_1;
   headLower_has_returned_1 = true;
   headLower_return_value_inlined_63_1 = headLower_return_value_1;
   a_minResult_1 = r_ed209_1;
   b_minResult_1 = headLower_return_value_inlined_63_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_64_1 = minResult_return_value_1;
   p_headVisor_1 = p_ed209_1;
   h_headVisor_1 = .8;
   bump_headVisor_1 = 1.;
   headVisor_has_returned_1 = false;
   bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
   p_sdBox_1 = p_headVisor_1;
   b_sdBox_1 = vec3(1, h_headVisor_1, 2);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
   result_headVisor_1.d = sdBox_return_value_inlined_3_1;
   p_headSphere_1 = p_headVisor_1;
   headSphere_has_returned_1 = false;
   headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
   headSphere_has_returned_1 = true;
   headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
   result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
   result_headVisor_1.mat = vec3(.05);
   result_headVisor_1.specPower = 30.;
   headVisor_return_value_1 = result_headVisor_1;
   headVisor_has_returned_1 = true;
   headVisor_return_value_inlined_65_1 = headVisor_return_value_1;
   a_minResult_1 = minResult_return_value_inlined_64_1;
   b_minResult_1 = headVisor_return_value_inlined_65_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_66_1 = minResult_return_value_1;
   p_arms_1 = p_ed209_1;
   arms_has_returned_1 = false;
   mat_setBodyMaterial_1 = r_arms_1;
   mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
   mat_setBodyMaterial_1.specPower = 30.;
   r_arms_1 = mat_setBodyMaterial_1;
   p_arms_1.x = abs(p_arms_1.x);
   p_arms_1.yz += vec2(.24, 0);
   a_rot_1 = .15 * (gunsUp_1 - 1.);
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_23_1 = rot_return_value_1;
   p_arms_1.xy *= rot_return_value_inlined_23_1;
   p_sdCapsule_1 = p_arms_1;
   a_sdCapsule_1 = vec3(0);
   b_sdCapsule_1 = vec3(1.5, 0, 0);
   r_sdCapsule_1 = .2;
   sdCapsule_has_returned_1 = false;
   pa_sdCapsule_1 = p_sdCapsule_1 - a_sdCapsule_1;
   ba_sdCapsule_1 = b_sdCapsule_1 - a_sdCapsule_1;
   sdCapsule_return_value_1 = length(pa_sdCapsule_1 - ba_sdCapsule_1 * clamp(dot(pa_sdCapsule_1, ba_sdCapsule_1) / dot(ba_sdCapsule_1, ba_sdCapsule_1), 0., 1.)) - r_sdCapsule_1;
   sdCapsule_has_returned_1 = true;
   sdCapsule_return_value_inlined_24_1 = sdCapsule_return_value_1;
   p_sdCapsule_1 = p_arms_1;
   a_sdCapsule_1 = vec3(1.5, 0, 0);
   b_sdCapsule_1 = wrist_arms_1;
   r_sdCapsule_1 = .2;
   sdCapsule_has_returned_1 = false;
   pa_sdCapsule_1 = p_sdCapsule_1 - a_sdCapsule_1;
   ba_sdCapsule_1 = b_sdCapsule_1 - a_sdCapsule_1;
   sdCapsule_return_value_1 = length(pa_sdCapsule_1 - ba_sdCapsule_1 * clamp(dot(pa_sdCapsule_1, ba_sdCapsule_1) / dot(ba_sdCapsule_1, ba_sdCapsule_1), 0., 1.)) - r_sdCapsule_1;
   sdCapsule_has_returned_1 = true;
   sdCapsule_return_value_inlined_25_1 = sdCapsule_return_value_1;
   r_arms_1.d = min(sdCapsule_return_value_inlined_24_1, sdCapsule_return_value_inlined_25_1);
   p_arms_1 -= wrist_arms_1;
   p_arms_1.z -= gunsForward_1 * .15;
   p_gunPod_1 = p_arms_1;
   gunPod_has_returned_1 = false;
   mat_setBodyMaterial_1 = r_gunPod_1;
   mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
   mat_setBodyMaterial_1.specPower = 30.;
   r_gunPod_1 = mat_setBodyMaterial_1;
   p_gunPod_1.yz += vec2(.1, .45);
   pp_gunPod_1 = p_gunPod_1;
   pp_gunPod_1.z = abs(pp_gunPod_1.z) - .5;
   p_sdCappedCone_1 = pp_gunPod_1;
   a_sdCappedCone_1 = vec3(0);
   b_sdCappedCone_1 = vec3(0, 0, - .1);
   ra_sdCappedCone_1 = .35 - .1;
   rb_sdCappedCone_1 = .35;
   sdCappedCone_has_returned_1 = false;
   rba_sdCappedCone_1 = rb_sdCappedCone_1 - ra_sdCappedCone_1;
   baba_sdCappedCone_1 = dot(b_sdCappedCone_1 - a_sdCappedCone_1, b_sdCappedCone_1 - a_sdCappedCone_1);
   papa_sdCappedCone_1 = dot(p_sdCappedCone_1 - a_sdCappedCone_1, p_sdCappedCone_1 - a_sdCappedCone_1);
   paba_sdCappedCone_1 = dot(p_sdCappedCone_1 - a_sdCappedCone_1, b_sdCappedCone_1 - a_sdCappedCone_1) / baba_sdCappedCone_1;
   x_sdCappedCone_1 = sqrt(papa_sdCappedCone_1 - paba_sdCappedCone_1 * paba_sdCappedCone_1 * baba_sdCappedCone_1);
   cax_sdCappedCone_1 = max(0., x_sdCappedCone_1 - ((paba_sdCappedCone_1 < .5) ? ra_sdCappedCone_1 : rb_sdCappedCone_1));
   cay_sdCappedCone_1 = abs(paba_sdCappedCone_1 - .5) - .5;
   f_sdCappedCone_1 = clamp((rba_sdCappedCone_1 * (x_sdCappedCone_1 - ra_sdCappedCone_1) + paba_sdCappedCone_1 * baba_sdCappedCone_1) / (rba_sdCappedCone_1 * rba_sdCappedCone_1 + baba_sdCappedCone_1), 0., 1.);
   cbx_sdCappedCone_1 = x_sdCappedCone_1 - ra_sdCappedCone_1 - f_sdCappedCone_1 * rba_sdCappedCone_1;
   cby_sdCappedCone_1 = paba_sdCappedCone_1 - f_sdCappedCone_1;
   sdCappedCone_return_value_1 = ((cbx_sdCappedCone_1 < 0. && cay_sdCappedCone_1 < 0.) ? - 1. : 1.) * sqrt(min(cax_sdCappedCone_1 * cax_sdCappedCone_1 + cay_sdCappedCone_1 * cay_sdCappedCone_1 * baba_sdCappedCone_1, cbx_sdCappedCone_1 * cbx_sdCappedCone_1 + cby_sdCappedCone_1 * cby_sdCappedCone_1 * baba_sdCappedCone_1));
   sdCappedCone_has_returned_1 = true;
   sdCappedCone_return_value_inlined_12_1 = sdCappedCone_return_value_1;
   r_gunPod_1.d = sdCappedCone_return_value_inlined_12_1;
   p_sdCappedCylinder_1 = p_gunPod_1;
   h_sdCappedCylinder_1 = .35;
   r_sdCappedCylinder_1 = .4;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_13_1 = sdCappedCylinder_return_value_1;
   r_gunPod_1.d = min(r_gunPod_1.d, sdCappedCylinder_return_value_inlined_13_1);
   pp_gunPod_1 = vec3(p_gunPod_1.x, .28 - p_gunPod_1.y, p_gunPod_1.z);
   p_sdTriPrism_1 = pp_gunPod_1;
   h_sdTriPrism_1 = vec2(.1, .5);
   sdTriPrism_has_returned_1 = false;
   q_sdTriPrism_1 = abs(p_sdTriPrism_1);
   sdTriPrism_return_value_1 = max(q_sdTriPrism_1.z - h_sdTriPrism_1.y, max(q_sdTriPrism_1.x * .866025 + p_sdTriPrism_1.y * .5, - p_sdTriPrism_1.y) - h_sdTriPrism_1.x * .5);
   sdTriPrism_has_returned_1 = true;
   sdTriPrism_return_value_inlined_14_1 = sdTriPrism_return_value_1;
   r_gunPod_1.d = min(r_gunPod_1.d, sdTriPrism_return_value_inlined_14_1);
   pp_gunPod_1 = p_gunPod_1;
   pp_gunPod_1.x = abs(p_gunPod_1.x);
   a_rot_1 = .78525;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_15_1 = rot_return_value_1;
   pp_gunPod_1.xy *= rot_return_value_inlined_15_1;
   bump_gunPod_1 = sign(sin(pp_gunPod_1.z * 33.3)) * .003;
   p_sdBox_1 = pp_gunPod_1;
   b_sdBox_1 = vec3(.1 - bump_gunPod_1, .38 - bump_gunPod_1, .34);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_16_1 = sdBox_return_value_1;
   d_gunPod_1 = sdBox_return_value_inlined_16_1 - .02;
   pp_gunPod_1 = p_gunPod_1 - vec3(0, 0, - .6);
   pp_gunPod_1.x = abs(pp_gunPod_1.x) - .1;
   p_sdCappedCylinder_1 = pp_gunPod_1;
   h_sdCappedCylinder_1 = .06;
   r_sdCappedCylinder_1 = .15;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_17_1 = sdCappedCylinder_return_value_1;
   p_sdCappedCylinder_1 = pp_gunPod_1 + vec3(0, .12, - .05);
   h_sdCappedCylinder_1 = .06;
   r_sdCappedCylinder_1 = .05;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_18_1 = sdCappedCylinder_return_value_1;
   p_sdBox_1 = p_gunPod_1 + vec3(0, 0, .54);
   b_sdBox_1 = vec3(.1, .06, .04);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_19_1 = sdBox_return_value_1;
   d_gunPod_1 = min(min(min(d_gunPod_1, sdCappedCylinder_return_value_inlined_17_1), sdCappedCylinder_return_value_inlined_18_1), sdBox_return_value_inlined_19_1);
   if(d_gunPod_1 < r_gunPod_1.d)
    {
     p_sdCappedCylinder_1 = pp_gunPod_1 + vec3(0, 0, .1);
     h_sdCappedCylinder_1 = .03;
     r_sdCappedCylinder_1 = .2;
     sdCappedCylinder_has_returned_1 = false;
     d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
     sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
     sdCappedCylinder_has_returned_1 = true;
     sdCappedCylinder_return_value_inlined_20_1 = sdCappedCylinder_return_value_1;
     d_gunPod_1 = max(d_gunPod_1, - sdCappedCylinder_return_value_inlined_20_1);
     r_gunPod_1.d = d_gunPod_1;
     r_gunPod_1.mat = vec3(.02);
    }
   fireShock_has_returned_1 = false;
   fireShock_return_value_1 = abs(sin(edShoot_1 * 78.5375));
   fireShock_has_returned_1 = true;
   fireShock_return_value_inlined_21_1 = fireShock_return_value_1;
   fs_gunPod_1 = fireShock_return_value_inlined_21_1;
   if(fs_gunPod_1 > .5)
    {
     p_sdCappedCylinder_1 = pp_gunPod_1;
     h_sdCappedCylinder_1 = .01 + pp_gunPod_1.z * .05;
     r_sdCappedCylinder_1 = fract(fs_gunPod_1 * 3322.423) * .5 + .9;
     sdCappedCylinder_has_returned_1 = false;
     d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
     sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
     sdCappedCylinder_has_returned_1 = true;
     sdCappedCylinder_return_value_inlined_22_1 = sdCappedCylinder_return_value_1;
     d_gunPod_1 = sdCappedCylinder_return_value_inlined_22_1;
     if(d_gunPod_1 < r_gunPod_1.d)
      {
       r_gunPod_1.d = d_gunPod_1;
       r_gunPod_1.mat = vec3(1);
       glow_1 += .1 / (.01 + d_gunPod_1 * d_gunPod_1 * 4e2);
      }
    }
   gunPod_return_value_1 = r_gunPod_1;
   gunPod_has_returned_1 = true;
   gunPod_return_value_inlined_26_1 = gunPod_return_value_1;
   a_minResult_1 = r_arms_1;
   b_minResult_1 = gunPod_return_value_inlined_26_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_27_1 = minResult_return_value_1;
   arms_return_value_1 = minResult_return_value_inlined_27_1;
   arms_has_returned_1 = true;
   arms_return_value_inlined_67_1 = arms_return_value_1;
   a_minResult_1 = minResult_return_value_inlined_66_1;
   b_minResult_1 = arms_return_value_inlined_67_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_68_1 = minResult_return_value_1;
   ed209_return_value_1 = minResult_return_value_inlined_68_1;
   ed209_has_returned_1 = true;
   ed209_return_value_inlined_79_1 = ed209_return_value_1;
   a_minResult_1 = room_return_value_inlined_78_1;
   b_minResult_1 = ed209_return_value_inlined_79_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_80_1 = minResult_return_value_1;
   r_map_1 = minResult_return_value_inlined_80_1;
   gnd_map_1 = length(p_map_1.y + 3.);
   if(gnd_map_1 < r_map_1.d)
    {
     r_map_1.d = gnd_map_1;
     r_map_1.mat = vec3(.1);
    }
   map_return_value_1 = r_map_1;
   map_has_returned_1 = true;
   map_return_value_inlined_90_1 = map_return_value_1;
   h_getSceneColor_1 = map_return_value_inlined_90_1;
   if(abs(h_getSceneColor_1.d) < .0015 * d_getSceneColor_1)
    {
     break;
    }
   if(d_getSceneColor_1 > 64.)
    {
     getSceneColor_return_value_1 = vec3(0);
     getSceneColor_has_returned_1 = true;
    }
   if(! getSceneColor_has_returned_1)
    {
     d_getSceneColor_1 += h_getSceneColor_1.d;
    }
  }
 if(! getSceneColor_has_returned_1)
  {
   g_getSceneColor_1 = glow_1;
   p_applyLighting_1 = p_getSceneColor_1;
   rd_applyLighting_1 = rd_getSceneColor_1;
   d_applyLighting_1 = d_getSceneColor_1;
   data_applyLighting_1 = h_getSceneColor_1;
   applyLighting_has_returned_1 = false;
   sunDir_applyLighting_1 = normalize(vec3(10, 10, - 10) - p_applyLighting_1);
   p_calcNormal_1 = p_applyLighting_1;
   t_calcNormal_1 = d_applyLighting_1;
   calcNormal_has_returned_1 = false;
   d_calcNormal_1 = .01 * t_calcNormal_1 * .33;
   e_calcNormal_1 = vec2(1, - 1) * .5773 * d_calcNormal_1;
   p_map_1 = p_calcNormal_1 + e_calcNormal_1.xyy;
   map_has_returned_1 = false;
   p_room_1 = p_map_1;
   room_has_returned_1 = false;
   r_room_1.mat = vec3(.4);
   r_room_1.specPower = 1e7;
   xy_room_1 = p_room_1.xy - vec2(0, 2);
   p_room_1.x = abs(p_room_1.x);
   p_room_1.yz += vec2(.5, - 3.4);
   p_sdBox_1 = p_room_1;
   b_sdBox_1 = frameInner_room_1 + vec3(0, 0, 1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_69_1 = sdBox_return_value_1;
   doorHole_room_1 = sdBox_return_value_inlined_69_1;
   backWall_room_1 = length(p_room_1.z - 8.);
   r_room_1.d = min(backWall_room_1, max(length(p_room_1.z), - doorHole_room_1 + .1));
   if(r_room_1.d == backWall_room_1)
    {
     p_sdOctogon_1 = xy_room_1;
     r_sdOctogon_1 = 2.6;
     sdOctogon_has_returned_1 = false;
     p_sdOctogon_1 = abs(p_sdOctogon_1);
     p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
     p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
     p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
     sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
     sdOctogon_has_returned_1 = true;
     sdOctogon_return_value_inlined_70_1 = sdOctogon_return_value_1;
     p_sdOctogon_1 = xy_room_1;
     r_sdOctogon_1 = 1.9;
     sdOctogon_has_returned_1 = false;
     p_sdOctogon_1 = abs(p_sdOctogon_1);
     p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
     p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
     p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
     sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
     sdOctogon_has_returned_1 = true;
     sdOctogon_return_value_inlined_71_1 = sdOctogon_return_value_1;
     ocp_room_1 = min(abs(sdOctogon_return_value_inlined_70_1), abs(sdOctogon_return_value_inlined_71_1));
     p_sdOctogon_1 = xy_room_1;
     r_sdOctogon_1 = 1.2;
     sdOctogon_has_returned_1 = false;
     p_sdOctogon_1 = abs(p_sdOctogon_1);
     p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
     p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
     p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
     sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
     sdOctogon_has_returned_1 = true;
     sdOctogon_return_value_inlined_72_1 = sdOctogon_return_value_1;
     ocp_room_1 = min(max(ocp_room_1, min(.7 - abs(xy_room_1.x + 1.2), - xy_room_1.y)), max(abs(sdOctogon_return_value_inlined_72_1), min(xy_room_1.x, .7 - abs(xy_room_1.y))));
     if(ocp_room_1 < .3)
      {
       r_room_1.mat = vec3(.39, .57, .71);
      }
    }
   p_sdBox_1 = p_room_1;
   b_sdBox_1 = frameInner_room_1 + vec3(.4, .4, .1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_73_1 = sdBox_return_value_1;
   doorFrame_room_1 = max(sdBox_return_value_inlined_73_1, - doorHole_room_1);
   doorWidth_room_1 = frameInner_room_1.x * .5;
   p_room_1.x -= frameInner_room_1.x;
   a_rot_1 = doorOpen_1 * 2.1;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_74_1 = rot_return_value_1;
   p_room_1.xz *= rot_return_value_inlined_74_1;
   p_room_1.x += doorWidth_room_1;
   p_sdBox_1 = p_room_1;
   b_sdBox_1 = vec3(doorWidth_room_1, frameInner_room_1.yz);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_75_1 = sdBox_return_value_1;
   door_room_1 = sdBox_return_value_inlined_75_1;
   p_room_1 = abs(p_room_1) - vec3(doorWidth_room_1 * .5, 1.1, .14);
   p_sdBox_1 = p_room_1;
   b_sdBox_1 = vec3(.45, .9, .1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_76_1 = sdBox_return_value_1;
   p_sdBox_1 = p_room_1;
   b_sdBox_1 = vec3(.35, .8, 1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_77_1 = sdBox_return_value_1;
   d_room_1 = min(doorFrame_room_1, max(door_room_1, - max(sdBox_return_value_inlined_76_1, - sdBox_return_value_inlined_77_1)));
   if(d_room_1 < r_room_1.d)
    {
     r_room_1.d = d_room_1;
     r_room_1.mat = vec3(.02, .02, .024);
     r_room_1.specPower = 10.;
    }
   room_return_value_1 = r_room_1;
   room_has_returned_1 = true;
   room_return_value_inlined_78_1 = room_return_value_1;
   p_ed209_1 = p_map_1;
   ed209_has_returned_1 = false;
   f_legWalkAngle_1 = 2.;
   legWalkAngle_has_returned_1 = false;
   legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
   legWalkAngle_has_returned_1 = true;
   legWalkAngle_return_value_inlined_54_1 = legWalkAngle_return_value_1;
   edZ_has_returned_1 = false;
   edZ_return_value_1 = mix(5., - 2., edWalk_1);
   edZ_has_returned_1 = true;
   edZ_return_value_inlined_55_1 = edZ_return_value_1;
   p_ed209_1.yz += vec2(legWalkAngle_return_value_inlined_54_1 * .2 + .1, - edZ_return_value_inlined_55_1);
   p_legs_1 = p_ed209_1;
   legs_has_returned_1 = false;
   mat_setBodyMaterial_1 = r_legs_1;
   mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
   mat_setBodyMaterial_1.specPower = 30.;
   r_legs_1 = mat_setBodyMaterial_1;
   f_legWalkAngle_1 = 1.;
   legWalkAngle_has_returned_1 = false;
   legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
   legWalkAngle_has_returned_1 = true;
   legWalkAngle_return_value_inlined_45_1 = legWalkAngle_return_value_1;
   legAngle_legs_1 = legWalkAngle_return_value_inlined_45_1;
   p_legs_1.z += .27;
   a_rot_1 = legAngle_legs_1 * sign(p_legs_1.x);
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_46_1 = rot_return_value_1;
   p_legs_1.yz *= rot_return_value_inlined_46_1;
   p_legs_1.z -= .27;
   p_legs_1.y += .65;
   a_rot_1 = - .2;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_47_1 = rot_return_value_1;
   p_legs_1.yz *= rot_return_value_inlined_47_1;
   a_rot_1 = legAngle_legs_1 * .3;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_48_1 = rot_return_value_1;
   p_legs_1.xy *= rot_return_value_inlined_48_1;
   pp_legs_1 = p_legs_1;
   pp_legs_1.x = abs(pp_legs_1.x);
   pp_legs_1.y += .48;
   a_rot_1 = - .58525;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_49_1 = rot_return_value_1;
   pp_legs_1.yz *= rot_return_value_inlined_49_1;
   pp_legs_1.x -= .98;
   cp_legs_1 = pp_legs_1;
   p_legs_1 = pp_legs_1;
   pp_legs_1.xz = abs(pp_legs_1.xz) - vec2(.12, .25);
   p_legs_1.y += .68;
   p_legs_1.xy = abs(p_legs_1.xy) - .12;
   p_sdBox_1 = p_legs_1;
   b_sdBox_1 = vec3(.07, .05, 1.2);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_50_1 = sdBox_return_value_1;
   silver_legs_1 = sdBox_return_value_inlined_50_1;
   cp_legs_1 -= vec3(0, - .7, 0);
   p_sdBox_1 = cp_legs_1 - vec3(0, 0, 1.15);
   b_sdBox_1 = vec3(.17, .17, .07);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_51_1 = sdBox_return_value_1;
   r_legs_1.d = sdBox_return_value_inlined_51_1 - .04;
   cp_legs_1.z ++;
   p_sdChamferedCube_1 = cp_legs_1.xzy;
   r_sdChamferedCube_1 = vec2(.28 - sign(abs(cp_legs_1.z) - .3) * .01, .5).xyx;
   c_sdChamferedCube_1 = .18;
   sdChamferedCube_has_returned_1 = false;
   p_sdBox_1 = p_sdChamferedCube_1;
   b_sdBox_1 = r_sdChamferedCube_1;
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_0_1 = sdBox_return_value_1;
   cube_sdChamferedCube_1 = sdBox_return_value_inlined_0_1;
   a_rot_1 = .78525;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_1_1 = rot_return_value_1;
   p_sdChamferedCube_1.xz *= rot_return_value_inlined_1_1;
   r_sdChamferedCube_1.xz *= - c_sdChamferedCube_1 / 1.41 + 1.41;
   p_sdBox_1 = p_sdChamferedCube_1;
   b_sdBox_1 = r_sdChamferedCube_1;
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_2_1 = sdBox_return_value_1;
   sdChamferedCube_return_value_1 = max(cube_sdChamferedCube_1, sdBox_return_value_inlined_2_1);
   sdChamferedCube_has_returned_1 = true;
   sdChamferedCube_return_value_inlined_52_1 = sdChamferedCube_return_value_1;
   r_legs_1.d = min(r_legs_1.d, sdChamferedCube_return_value_inlined_52_1);
   p_foot_1 = cp_legs_1;
   foot_has_returned_1 = false;
   p_foot_1.z += .8;
   a_rot_1 = .86;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_29_1 = rot_return_value_1;
   p_foot_1.yz *= rot_return_value_inlined_29_1;
   p_toe_1 = p_foot_1;
   toe_has_returned_1 = false;
   p_toe_1.yz += vec2(.1, .32);
   p_sdBox_1 = p_toe_1;
   b_sdBox_1 = vec3(.3 + .2 * (p_toe_1.z - .18) - p_toe_1.y * .228, .3 + .2 * cos((p_toe_1.z - .18) * 3.69), .35);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_28_1 = sdBox_return_value_1;
   toe_return_value_1 = max(sdBox_return_value_inlined_28_1, .1 - p_toe_1.y);
   toe_has_returned_1 = true;
   toe_return_value_inlined_30_1 = toe_return_value_1;
   d_foot_1 = toe_return_value_inlined_30_1;
   a_rot_1 = 1.57;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_31_1 = rot_return_value_1;
   p_foot_1.xz *= rot_return_value_inlined_31_1;
   p_foot_1.x -= .43;
   p_foot_1.z = .25 - abs(p_foot_1.z);
   p_toe_1 = p_foot_1;
   toe_has_returned_1 = false;
   p_toe_1.yz += vec2(.1, .32);
   p_sdBox_1 = p_toe_1;
   b_sdBox_1 = vec3(.3 + .2 * (p_toe_1.z - .18) - p_toe_1.y * .228, .3 + .2 * cos((p_toe_1.z - .18) * 3.69), .35);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_28_1 = sdBox_return_value_1;
   toe_return_value_1 = max(sdBox_return_value_inlined_28_1, .1 - p_toe_1.y);
   toe_has_returned_1 = true;
   toe_return_value_inlined_32_1 = toe_return_value_1;
   foot_return_value_1 = min(d_foot_1, toe_return_value_inlined_32_1);
   foot_has_returned_1 = true;
   foot_return_value_inlined_53_1 = foot_return_value_1;
   r_legs_1.d = min(r_legs_1.d, foot_return_value_inlined_53_1);
   if(silver_legs_1 < r_legs_1.d)
    {
     r_legs_1.d = silver_legs_1;
     r_legs_1.mat = vec3(.8);
    }
   legs_return_value_1 = r_legs_1;
   legs_has_returned_1 = true;
   legs_return_value_inlined_56_1 = legs_return_value_1;
   r_ed209_1 = legs_return_value_inlined_56_1;
   f_ed209_1 = min(stretch_1 * 2., 1.);
   slide_ed209_1 = f_ed209_1 < .5 ? smoothstep(0., .5, f_ed209_1) : (1. - smoothstep(.5, 1., f_ed209_1) * .2);
   p_ed209_1.yz -= slide_ed209_1 * .5;
   gunsUp_1 = smoothstep(0., 1., clamp((stretch_1 - .66) * 6., 0., 1.));
   fireShock_has_returned_1 = false;
   fireShock_return_value_1 = abs(sin(edShoot_1 * 78.5375));
   fireShock_has_returned_1 = true;
   fireShock_return_value_inlined_57_1 = fireShock_return_value_1;
   gunsForward_1 = smoothstep(0., 1., clamp((stretch_1 - .83) * 6., 0., 1.)) + fireShock_return_value_inlined_57_1 * .5;
   p_waist_1 = p_ed209_1;
   waist_has_returned_1 = false;
   mat_setBodyMaterial_1 = r_waist_1;
   mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
   mat_setBodyMaterial_1.specPower = 30.;
   r_waist_1 = mat_setBodyMaterial_1;
   p_waist_1.y += .65;
   a_rot_1 = - .2;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_33_1 = rot_return_value_1;
   p_waist_1.yz *= rot_return_value_inlined_33_1;
   f_legWalkAngle_1 = 1.;
   legWalkAngle_has_returned_1 = false;
   legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
   legWalkAngle_has_returned_1 = true;
   legWalkAngle_return_value_inlined_34_1 = legWalkAngle_return_value_1;
   legAngle_waist_1 = legWalkAngle_return_value_inlined_34_1;
   a_rot_1 = legAngle_waist_1 * .3;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_35_1 = rot_return_value_1;
   p_waist_1.xy *= rot_return_value_inlined_35_1;
   pp_waist_1 = p_waist_1;
   pp_waist_1.y += .3;
   p_sdCappedCylinder_1 = pp_waist_1.zyx;
   h_sdCappedCylinder_1 = .5;
   r_sdCappedCylinder_1 = .5;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_36_1 = sdCappedCylinder_return_value_1;
   r_waist_1.d = max(sdCappedCylinder_return_value_inlined_36_1, p_waist_1.y + .15);
   bump_waist_1 = .5 - abs(sin(p_waist_1.y * 40.)) * .03;
   p_sdBox_1 = p_waist_1;
   b_sdBox_1 = vec3(bump_waist_1, .15, bump_waist_1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_37_1 = sdBox_return_value_1;
   d_waist_1 = sdBox_return_value_inlined_37_1;
   bump_waist_1 = .3 - abs(sin(p_waist_1.x * 40.)) * .03;
   pp_waist_1.y += .18;
   p_sdCappedCylinder_1 = pp_waist_1.zyx;
   h_sdCappedCylinder_1 = bump_waist_1;
   r_sdCappedCylinder_1 = .75;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_38_1 = sdCappedCylinder_return_value_1;
   d_waist_1 = min(d_waist_1, sdCappedCylinder_return_value_inlined_38_1);
   pp_waist_1.x = abs(pp_waist_1.x);
   a_rot_1 = - .58525 + legAngle_waist_1 * sign(p_waist_1.x);
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_39_1 = rot_return_value_1;
   pp_waist_1.yz *= rot_return_value_inlined_39_1;
   pp_waist_1.x -= .98;
   p_sdCappedCylinder_1 = pp_waist_1.zyx;
   h_sdCappedCylinder_1 = .4;
   r_sdCappedCylinder_1 = .24;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_40_1 = sdCappedCylinder_return_value_1;
   r_waist_1.d = min(r_waist_1.d, max(sdCappedCylinder_return_value_inlined_40_1, - pp_waist_1.y));
   p_sdBox_1 = pp_waist_1;
   b_sdBox_1 = vec3(.24, .2, .14 + .2 * pp_waist_1.y);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_41_1 = sdBox_return_value_1;
   r_waist_1.d = min(r_waist_1.d, sdBox_return_value_inlined_41_1);
   p_waist_1 = pp_waist_1;
   pp_waist_1.xz = abs(pp_waist_1.xz) - vec2(.12, .25);
   p_sdCappedCylinder_1 = pp_waist_1.xzy;
   h_sdCappedCylinder_1 = .1;
   r_sdCappedCylinder_1 = .325;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_42_1 = sdCappedCylinder_return_value_1;
   p_sdCappedCylinder_1 = pp_waist_1.xzy;
   h_sdCappedCylinder_1 = .05;
   r_sdCappedCylinder_1 = .5;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_43_1 = sdCappedCylinder_return_value_1;
   r_waist_1.d = min(r_waist_1.d, max(min(sdCappedCylinder_return_value_inlined_42_1, sdCappedCylinder_return_value_inlined_43_1), pp_waist_1.y));
   p_waist_1.y += .68;
   p_sdBox_1 = p_waist_1;
   b_sdBox_1 = vec3(sign(abs(p_waist_1.y) - .04) * .005 + .26, .2, .34);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_44_1 = sdBox_return_value_1;
   r_waist_1.d = min(r_waist_1.d, sdBox_return_value_inlined_44_1);
   if(d_waist_1 < r_waist_1.d)
    {
     r_waist_1.d = d_waist_1;
     r_waist_1.mat = vec3(.02);
    }
   waist_return_value_1 = r_waist_1;
   waist_has_returned_1 = true;
   waist_return_value_inlined_58_1 = waist_return_value_1;
   a_minResult_1 = r_ed209_1;
   b_minResult_1 = waist_return_value_inlined_58_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_59_1 = minResult_return_value_1;
   r_ed209_1 = minResult_return_value_inlined_59_1;
   f_legWalkAngle_1 = 2.;
   legWalkAngle_has_returned_1 = false;
   legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
   legWalkAngle_has_returned_1 = true;
   legWalkAngle_return_value_inlined_60_1 = legWalkAngle_return_value_1;
   a_rot_1 = .1 * (- edDown_1 + legWalkAngle_return_value_inlined_60_1 + smoothstep(0., 1., clamp((stretch_1 - .5) * 6., 0., 1.)) - 1.);
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_61_1 = rot_return_value_1;
   p_ed209_1.yz *= rot_return_value_inlined_61_1;
   a_rot_1 = edTwist_1 * .2;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_62_1 = rot_return_value_1;
   p_ed209_1.xz *= rot_return_value_inlined_62_1;
   p_headLower_1 = p_ed209_1;
   headLower_has_returned_1 = false;
   op_headLower_1 = p_headLower_1;
   p_headVisor_1 = p_headLower_1 * vec3(.95, - 1.4, .95);
   h_headVisor_1 = 1.;
   bump_headVisor_1 = 0.;
   headVisor_has_returned_1 = false;
   bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
   p_sdBox_1 = p_headVisor_1;
   b_sdBox_1 = vec3(1, h_headVisor_1, 2);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
   result_headVisor_1.d = sdBox_return_value_inlined_3_1;
   p_headSphere_1 = p_headVisor_1;
   headSphere_has_returned_1 = false;
   headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
   headSphere_has_returned_1 = true;
   headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
   result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
   result_headVisor_1.mat = vec3(.05);
   result_headVisor_1.specPower = 30.;
   headVisor_return_value_1 = result_headVisor_1;
   headVisor_has_returned_1 = true;
   headVisor_return_value_inlined_5_1 = headVisor_return_value_1;
   r_headLower_1 = headVisor_return_value_inlined_5_1;
   p_headVisor_1 = (p_headLower_1 + vec3(0, .01, 0)) * vec3(.95);
   h_headVisor_1 = 1.;
   bump_headVisor_1 = 0.;
   headVisor_has_returned_1 = false;
   bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
   p_sdBox_1 = p_headVisor_1;
   b_sdBox_1 = vec3(1, h_headVisor_1, 2);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
   result_headVisor_1.d = sdBox_return_value_inlined_3_1;
   p_headSphere_1 = p_headVisor_1;
   headSphere_has_returned_1 = false;
   headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
   headSphere_has_returned_1 = true;
   headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
   result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
   result_headVisor_1.mat = vec3(.05);
   result_headVisor_1.specPower = 30.;
   headVisor_return_value_1 = result_headVisor_1;
   headVisor_has_returned_1 = true;
   headVisor_return_value_inlined_6_1 = headVisor_return_value_1;
   r_headLower_1.d = min(r_headLower_1.d, max(max(headVisor_return_value_inlined_6_1.d, p_headLower_1.y - .35), p_headLower_1.y * .625 - p_headLower_1.z - .66));
   a_rot_1 = .075 * (gunsUp_1 - 1.) * sign(p_headLower_1.x);
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_7_1 = rot_return_value_1;
   p_headLower_1.xy *= rot_return_value_inlined_7_1;
   p_headLower_1.x = abs(p_headLower_1.x) - 1.33;
   p_headLower_1.y -= .1 - p_headLower_1.x * .1;
   p_sdBox_1 = p_headLower_1;
   b_sdBox_1 = vec3(.4, .06 * (1. - p_headLower_1.x), .3 - p_headLower_1.x * .2);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_8_1 = sdBox_return_value_1;
   r_headLower_1.d = min(r_headLower_1.d, sdBox_return_value_inlined_8_1);
   p_headLower_1 = op_headLower_1;
   p_headLower_1.y = abs(abs(p_headLower_1.y + .147) - .0556) - .0278;
   p_sdBox_1 = p_headLower_1 + vec3(0, 0, 1.5);
   b_sdBox_1 = vec3(mix(.25, .55, - op_headLower_1.y), .015, .1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_9_1 = sdBox_return_value_1;
   r_headLower_1.d = max(r_headLower_1.d, - sdBox_return_value_inlined_9_1);
   p_headLower_1 = op_headLower_1;
   p_headLower_1.y = abs(p_headLower_1.y + .16) - .06;
   p_headLower_1.z -= - 1.1;
   p_sdCappedCylinder_1 = p_headLower_1.xzy;
   h_sdCappedCylinder_1 = 1.;
   r_sdCappedCylinder_1 = .03;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_10_1 = sdCappedCylinder_return_value_1;
   p_sdCappedCylinder_1 = p_headLower_1.xzy;
   h_sdCappedCylinder_1 = .55;
   r_sdCappedCylinder_1 = 1.;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_11_1 = sdCappedCylinder_return_value_1;
   r_headLower_1.d = max(r_headLower_1.d, - max(max(sdCappedCylinder_return_value_inlined_10_1, - sdCappedCylinder_return_value_inlined_11_1), p_headLower_1.z + .2));
   mat_setBodyMaterial_1 = r_headLower_1;
   mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
   mat_setBodyMaterial_1.specPower = 30.;
   r_headLower_1 = mat_setBodyMaterial_1;
   headLower_return_value_1 = r_headLower_1;
   headLower_has_returned_1 = true;
   headLower_return_value_inlined_63_1 = headLower_return_value_1;
   a_minResult_1 = r_ed209_1;
   b_minResult_1 = headLower_return_value_inlined_63_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_64_1 = minResult_return_value_1;
   p_headVisor_1 = p_ed209_1;
   h_headVisor_1 = .8;
   bump_headVisor_1 = 1.;
   headVisor_has_returned_1 = false;
   bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
   p_sdBox_1 = p_headVisor_1;
   b_sdBox_1 = vec3(1, h_headVisor_1, 2);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
   result_headVisor_1.d = sdBox_return_value_inlined_3_1;
   p_headSphere_1 = p_headVisor_1;
   headSphere_has_returned_1 = false;
   headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
   headSphere_has_returned_1 = true;
   headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
   result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
   result_headVisor_1.mat = vec3(.05);
   result_headVisor_1.specPower = 30.;
   headVisor_return_value_1 = result_headVisor_1;
   headVisor_has_returned_1 = true;
   headVisor_return_value_inlined_65_1 = headVisor_return_value_1;
   a_minResult_1 = minResult_return_value_inlined_64_1;
   b_minResult_1 = headVisor_return_value_inlined_65_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_66_1 = minResult_return_value_1;
   p_arms_1 = p_ed209_1;
   arms_has_returned_1 = false;
   mat_setBodyMaterial_1 = r_arms_1;
   mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
   mat_setBodyMaterial_1.specPower = 30.;
   r_arms_1 = mat_setBodyMaterial_1;
   p_arms_1.x = abs(p_arms_1.x);
   p_arms_1.yz += vec2(.24, 0);
   a_rot_1 = .15 * (gunsUp_1 - 1.);
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_23_1 = rot_return_value_1;
   p_arms_1.xy *= rot_return_value_inlined_23_1;
   p_sdCapsule_1 = p_arms_1;
   a_sdCapsule_1 = vec3(0);
   b_sdCapsule_1 = vec3(1.5, 0, 0);
   r_sdCapsule_1 = .2;
   sdCapsule_has_returned_1 = false;
   pa_sdCapsule_1 = p_sdCapsule_1 - a_sdCapsule_1;
   ba_sdCapsule_1 = b_sdCapsule_1 - a_sdCapsule_1;
   sdCapsule_return_value_1 = length(pa_sdCapsule_1 - ba_sdCapsule_1 * clamp(dot(pa_sdCapsule_1, ba_sdCapsule_1) / dot(ba_sdCapsule_1, ba_sdCapsule_1), 0., 1.)) - r_sdCapsule_1;
   sdCapsule_has_returned_1 = true;
   sdCapsule_return_value_inlined_24_1 = sdCapsule_return_value_1;
   p_sdCapsule_1 = p_arms_1;
   a_sdCapsule_1 = vec3(1.5, 0, 0);
   b_sdCapsule_1 = wrist_arms_1;
   r_sdCapsule_1 = .2;
   sdCapsule_has_returned_1 = false;
   pa_sdCapsule_1 = p_sdCapsule_1 - a_sdCapsule_1;
   ba_sdCapsule_1 = b_sdCapsule_1 - a_sdCapsule_1;
   sdCapsule_return_value_1 = length(pa_sdCapsule_1 - ba_sdCapsule_1 * clamp(dot(pa_sdCapsule_1, ba_sdCapsule_1) / dot(ba_sdCapsule_1, ba_sdCapsule_1), 0., 1.)) - r_sdCapsule_1;
   sdCapsule_has_returned_1 = true;
   sdCapsule_return_value_inlined_25_1 = sdCapsule_return_value_1;
   r_arms_1.d = min(sdCapsule_return_value_inlined_24_1, sdCapsule_return_value_inlined_25_1);
   p_arms_1 -= wrist_arms_1;
   p_arms_1.z -= gunsForward_1 * .15;
   p_gunPod_1 = p_arms_1;
   gunPod_has_returned_1 = false;
   mat_setBodyMaterial_1 = r_gunPod_1;
   mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
   mat_setBodyMaterial_1.specPower = 30.;
   r_gunPod_1 = mat_setBodyMaterial_1;
   p_gunPod_1.yz += vec2(.1, .45);
   pp_gunPod_1 = p_gunPod_1;
   pp_gunPod_1.z = abs(pp_gunPod_1.z) - .5;
   p_sdCappedCone_1 = pp_gunPod_1;
   a_sdCappedCone_1 = vec3(0);
   b_sdCappedCone_1 = vec3(0, 0, - .1);
   ra_sdCappedCone_1 = .35 - .1;
   rb_sdCappedCone_1 = .35;
   sdCappedCone_has_returned_1 = false;
   rba_sdCappedCone_1 = rb_sdCappedCone_1 - ra_sdCappedCone_1;
   baba_sdCappedCone_1 = dot(b_sdCappedCone_1 - a_sdCappedCone_1, b_sdCappedCone_1 - a_sdCappedCone_1);
   papa_sdCappedCone_1 = dot(p_sdCappedCone_1 - a_sdCappedCone_1, p_sdCappedCone_1 - a_sdCappedCone_1);
   paba_sdCappedCone_1 = dot(p_sdCappedCone_1 - a_sdCappedCone_1, b_sdCappedCone_1 - a_sdCappedCone_1) / baba_sdCappedCone_1;
   x_sdCappedCone_1 = sqrt(papa_sdCappedCone_1 - paba_sdCappedCone_1 * paba_sdCappedCone_1 * baba_sdCappedCone_1);
   cax_sdCappedCone_1 = max(0., x_sdCappedCone_1 - ((paba_sdCappedCone_1 < .5) ? ra_sdCappedCone_1 : rb_sdCappedCone_1));
   cay_sdCappedCone_1 = abs(paba_sdCappedCone_1 - .5) - .5;
   f_sdCappedCone_1 = clamp((rba_sdCappedCone_1 * (x_sdCappedCone_1 - ra_sdCappedCone_1) + paba_sdCappedCone_1 * baba_sdCappedCone_1) / (rba_sdCappedCone_1 * rba_sdCappedCone_1 + baba_sdCappedCone_1), 0., 1.);
   cbx_sdCappedCone_1 = x_sdCappedCone_1 - ra_sdCappedCone_1 - f_sdCappedCone_1 * rba_sdCappedCone_1;
   cby_sdCappedCone_1 = paba_sdCappedCone_1 - f_sdCappedCone_1;
   sdCappedCone_return_value_1 = ((cbx_sdCappedCone_1 < 0. && cay_sdCappedCone_1 < 0.) ? - 1. : 1.) * sqrt(min(cax_sdCappedCone_1 * cax_sdCappedCone_1 + cay_sdCappedCone_1 * cay_sdCappedCone_1 * baba_sdCappedCone_1, cbx_sdCappedCone_1 * cbx_sdCappedCone_1 + cby_sdCappedCone_1 * cby_sdCappedCone_1 * baba_sdCappedCone_1));
   sdCappedCone_has_returned_1 = true;
   sdCappedCone_return_value_inlined_12_1 = sdCappedCone_return_value_1;
   r_gunPod_1.d = sdCappedCone_return_value_inlined_12_1;
   p_sdCappedCylinder_1 = p_gunPod_1;
   h_sdCappedCylinder_1 = .35;
   r_sdCappedCylinder_1 = .4;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_13_1 = sdCappedCylinder_return_value_1;
   r_gunPod_1.d = min(r_gunPod_1.d, sdCappedCylinder_return_value_inlined_13_1);
   pp_gunPod_1 = vec3(p_gunPod_1.x, .28 - p_gunPod_1.y, p_gunPod_1.z);
   p_sdTriPrism_1 = pp_gunPod_1;
   h_sdTriPrism_1 = vec2(.1, .5);
   sdTriPrism_has_returned_1 = false;
   q_sdTriPrism_1 = abs(p_sdTriPrism_1);
   sdTriPrism_return_value_1 = max(q_sdTriPrism_1.z - h_sdTriPrism_1.y, max(q_sdTriPrism_1.x * .866025 + p_sdTriPrism_1.y * .5, - p_sdTriPrism_1.y) - h_sdTriPrism_1.x * .5);
   sdTriPrism_has_returned_1 = true;
   sdTriPrism_return_value_inlined_14_1 = sdTriPrism_return_value_1;
   r_gunPod_1.d = min(r_gunPod_1.d, sdTriPrism_return_value_inlined_14_1);
   pp_gunPod_1 = p_gunPod_1;
   pp_gunPod_1.x = abs(p_gunPod_1.x);
   a_rot_1 = .78525;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_15_1 = rot_return_value_1;
   pp_gunPod_1.xy *= rot_return_value_inlined_15_1;
   bump_gunPod_1 = sign(sin(pp_gunPod_1.z * 33.3)) * .003;
   p_sdBox_1 = pp_gunPod_1;
   b_sdBox_1 = vec3(.1 - bump_gunPod_1, .38 - bump_gunPod_1, .34);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_16_1 = sdBox_return_value_1;
   d_gunPod_1 = sdBox_return_value_inlined_16_1 - .02;
   pp_gunPod_1 = p_gunPod_1 - vec3(0, 0, - .6);
   pp_gunPod_1.x = abs(pp_gunPod_1.x) - .1;
   p_sdCappedCylinder_1 = pp_gunPod_1;
   h_sdCappedCylinder_1 = .06;
   r_sdCappedCylinder_1 = .15;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_17_1 = sdCappedCylinder_return_value_1;
   p_sdCappedCylinder_1 = pp_gunPod_1 + vec3(0, .12, - .05);
   h_sdCappedCylinder_1 = .06;
   r_sdCappedCylinder_1 = .05;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_18_1 = sdCappedCylinder_return_value_1;
   p_sdBox_1 = p_gunPod_1 + vec3(0, 0, .54);
   b_sdBox_1 = vec3(.1, .06, .04);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_19_1 = sdBox_return_value_1;
   d_gunPod_1 = min(min(min(d_gunPod_1, sdCappedCylinder_return_value_inlined_17_1), sdCappedCylinder_return_value_inlined_18_1), sdBox_return_value_inlined_19_1);
   if(d_gunPod_1 < r_gunPod_1.d)
    {
     p_sdCappedCylinder_1 = pp_gunPod_1 + vec3(0, 0, .1);
     h_sdCappedCylinder_1 = .03;
     r_sdCappedCylinder_1 = .2;
     sdCappedCylinder_has_returned_1 = false;
     d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
     sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
     sdCappedCylinder_has_returned_1 = true;
     sdCappedCylinder_return_value_inlined_20_1 = sdCappedCylinder_return_value_1;
     d_gunPod_1 = max(d_gunPod_1, - sdCappedCylinder_return_value_inlined_20_1);
     r_gunPod_1.d = d_gunPod_1;
     r_gunPod_1.mat = vec3(.02);
    }
   fireShock_has_returned_1 = false;
   fireShock_return_value_1 = abs(sin(edShoot_1 * 78.5375));
   fireShock_has_returned_1 = true;
   fireShock_return_value_inlined_21_1 = fireShock_return_value_1;
   fs_gunPod_1 = fireShock_return_value_inlined_21_1;
   if(fs_gunPod_1 > .5)
    {
     p_sdCappedCylinder_1 = pp_gunPod_1;
     h_sdCappedCylinder_1 = .01 + pp_gunPod_1.z * .05;
     r_sdCappedCylinder_1 = fract(fs_gunPod_1 * 3322.423) * .5 + .9;
     sdCappedCylinder_has_returned_1 = false;
     d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
     sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
     sdCappedCylinder_has_returned_1 = true;
     sdCappedCylinder_return_value_inlined_22_1 = sdCappedCylinder_return_value_1;
     d_gunPod_1 = sdCappedCylinder_return_value_inlined_22_1;
     if(d_gunPod_1 < r_gunPod_1.d)
      {
       r_gunPod_1.d = d_gunPod_1;
       r_gunPod_1.mat = vec3(1);
       glow_1 += .1 / (.01 + d_gunPod_1 * d_gunPod_1 * 4e2);
      }
    }
   gunPod_return_value_1 = r_gunPod_1;
   gunPod_has_returned_1 = true;
   gunPod_return_value_inlined_26_1 = gunPod_return_value_1;
   a_minResult_1 = r_arms_1;
   b_minResult_1 = gunPod_return_value_inlined_26_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_27_1 = minResult_return_value_1;
   arms_return_value_1 = minResult_return_value_inlined_27_1;
   arms_has_returned_1 = true;
   arms_return_value_inlined_67_1 = arms_return_value_1;
   a_minResult_1 = minResult_return_value_inlined_66_1;
   b_minResult_1 = arms_return_value_inlined_67_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_68_1 = minResult_return_value_1;
   ed209_return_value_1 = minResult_return_value_inlined_68_1;
   ed209_has_returned_1 = true;
   ed209_return_value_inlined_79_1 = ed209_return_value_1;
   a_minResult_1 = room_return_value_inlined_78_1;
   b_minResult_1 = ed209_return_value_inlined_79_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_80_1 = minResult_return_value_1;
   r_map_1 = minResult_return_value_inlined_80_1;
   gnd_map_1 = length(p_map_1.y + 3.);
   if(gnd_map_1 < r_map_1.d)
    {
     r_map_1.d = gnd_map_1;
     r_map_1.mat = vec3(.1);
    }
   map_return_value_1 = r_map_1;
   map_has_returned_1 = true;
   map_return_value_inlined_82_1 = map_return_value_1;
   p_map_1 = p_calcNormal_1 + e_calcNormal_1.yyx;
   map_has_returned_1 = false;
   p_room_1 = p_map_1;
   room_has_returned_1 = false;
   r_room_1.mat = vec3(.4);
   r_room_1.specPower = 1e7;
   xy_room_1 = p_room_1.xy - vec2(0, 2);
   p_room_1.x = abs(p_room_1.x);
   p_room_1.yz += vec2(.5, - 3.4);
   p_sdBox_1 = p_room_1;
   b_sdBox_1 = frameInner_room_1 + vec3(0, 0, 1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_69_1 = sdBox_return_value_1;
   doorHole_room_1 = sdBox_return_value_inlined_69_1;
   backWall_room_1 = length(p_room_1.z - 8.);
   r_room_1.d = min(backWall_room_1, max(length(p_room_1.z), - doorHole_room_1 + .1));
   if(r_room_1.d == backWall_room_1)
    {
     p_sdOctogon_1 = xy_room_1;
     r_sdOctogon_1 = 2.6;
     sdOctogon_has_returned_1 = false;
     p_sdOctogon_1 = abs(p_sdOctogon_1);
     p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
     p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
     p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
     sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
     sdOctogon_has_returned_1 = true;
     sdOctogon_return_value_inlined_70_1 = sdOctogon_return_value_1;
     p_sdOctogon_1 = xy_room_1;
     r_sdOctogon_1 = 1.9;
     sdOctogon_has_returned_1 = false;
     p_sdOctogon_1 = abs(p_sdOctogon_1);
     p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
     p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
     p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
     sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
     sdOctogon_has_returned_1 = true;
     sdOctogon_return_value_inlined_71_1 = sdOctogon_return_value_1;
     ocp_room_1 = min(abs(sdOctogon_return_value_inlined_70_1), abs(sdOctogon_return_value_inlined_71_1));
     p_sdOctogon_1 = xy_room_1;
     r_sdOctogon_1 = 1.2;
     sdOctogon_has_returned_1 = false;
     p_sdOctogon_1 = abs(p_sdOctogon_1);
     p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
     p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
     p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
     sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
     sdOctogon_has_returned_1 = true;
     sdOctogon_return_value_inlined_72_1 = sdOctogon_return_value_1;
     ocp_room_1 = min(max(ocp_room_1, min(.7 - abs(xy_room_1.x + 1.2), - xy_room_1.y)), max(abs(sdOctogon_return_value_inlined_72_1), min(xy_room_1.x, .7 - abs(xy_room_1.y))));
     if(ocp_room_1 < .3)
      {
       r_room_1.mat = vec3(.39, .57, .71);
      }
    }
   p_sdBox_1 = p_room_1;
   b_sdBox_1 = frameInner_room_1 + vec3(.4, .4, .1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_73_1 = sdBox_return_value_1;
   doorFrame_room_1 = max(sdBox_return_value_inlined_73_1, - doorHole_room_1);
   doorWidth_room_1 = frameInner_room_1.x * .5;
   p_room_1.x -= frameInner_room_1.x;
   a_rot_1 = doorOpen_1 * 2.1;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_74_1 = rot_return_value_1;
   p_room_1.xz *= rot_return_value_inlined_74_1;
   p_room_1.x += doorWidth_room_1;
   p_sdBox_1 = p_room_1;
   b_sdBox_1 = vec3(doorWidth_room_1, frameInner_room_1.yz);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_75_1 = sdBox_return_value_1;
   door_room_1 = sdBox_return_value_inlined_75_1;
   p_room_1 = abs(p_room_1) - vec3(doorWidth_room_1 * .5, 1.1, .14);
   p_sdBox_1 = p_room_1;
   b_sdBox_1 = vec3(.45, .9, .1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_76_1 = sdBox_return_value_1;
   p_sdBox_1 = p_room_1;
   b_sdBox_1 = vec3(.35, .8, 1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_77_1 = sdBox_return_value_1;
   d_room_1 = min(doorFrame_room_1, max(door_room_1, - max(sdBox_return_value_inlined_76_1, - sdBox_return_value_inlined_77_1)));
   if(d_room_1 < r_room_1.d)
    {
     r_room_1.d = d_room_1;
     r_room_1.mat = vec3(.02, .02, .024);
     r_room_1.specPower = 10.;
    }
   room_return_value_1 = r_room_1;
   room_has_returned_1 = true;
   room_return_value_inlined_78_1 = room_return_value_1;
   p_ed209_1 = p_map_1;
   ed209_has_returned_1 = false;
   f_legWalkAngle_1 = 2.;
   legWalkAngle_has_returned_1 = false;
   legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
   legWalkAngle_has_returned_1 = true;
   legWalkAngle_return_value_inlined_54_1 = legWalkAngle_return_value_1;
   edZ_has_returned_1 = false;
   edZ_return_value_1 = mix(5., - 2., edWalk_1);
   edZ_has_returned_1 = true;
   edZ_return_value_inlined_55_1 = edZ_return_value_1;
   p_ed209_1.yz += vec2(legWalkAngle_return_value_inlined_54_1 * .2 + .1, - edZ_return_value_inlined_55_1);
   p_legs_1 = p_ed209_1;
   legs_has_returned_1 = false;
   mat_setBodyMaterial_1 = r_legs_1;
   mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
   mat_setBodyMaterial_1.specPower = 30.;
   r_legs_1 = mat_setBodyMaterial_1;
   f_legWalkAngle_1 = 1.;
   legWalkAngle_has_returned_1 = false;
   legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
   legWalkAngle_has_returned_1 = true;
   legWalkAngle_return_value_inlined_45_1 = legWalkAngle_return_value_1;
   legAngle_legs_1 = legWalkAngle_return_value_inlined_45_1;
   p_legs_1.z += .27;
   a_rot_1 = legAngle_legs_1 * sign(p_legs_1.x);
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_46_1 = rot_return_value_1;
   p_legs_1.yz *= rot_return_value_inlined_46_1;
   p_legs_1.z -= .27;
   p_legs_1.y += .65;
   a_rot_1 = - .2;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_47_1 = rot_return_value_1;
   p_legs_1.yz *= rot_return_value_inlined_47_1;
   a_rot_1 = legAngle_legs_1 * .3;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_48_1 = rot_return_value_1;
   p_legs_1.xy *= rot_return_value_inlined_48_1;
   pp_legs_1 = p_legs_1;
   pp_legs_1.x = abs(pp_legs_1.x);
   pp_legs_1.y += .48;
   a_rot_1 = - .58525;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_49_1 = rot_return_value_1;
   pp_legs_1.yz *= rot_return_value_inlined_49_1;
   pp_legs_1.x -= .98;
   cp_legs_1 = pp_legs_1;
   p_legs_1 = pp_legs_1;
   pp_legs_1.xz = abs(pp_legs_1.xz) - vec2(.12, .25);
   p_legs_1.y += .68;
   p_legs_1.xy = abs(p_legs_1.xy) - .12;
   p_sdBox_1 = p_legs_1;
   b_sdBox_1 = vec3(.07, .05, 1.2);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_50_1 = sdBox_return_value_1;
   silver_legs_1 = sdBox_return_value_inlined_50_1;
   cp_legs_1 -= vec3(0, - .7, 0);
   p_sdBox_1 = cp_legs_1 - vec3(0, 0, 1.15);
   b_sdBox_1 = vec3(.17, .17, .07);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_51_1 = sdBox_return_value_1;
   r_legs_1.d = sdBox_return_value_inlined_51_1 - .04;
   cp_legs_1.z ++;
   p_sdChamferedCube_1 = cp_legs_1.xzy;
   r_sdChamferedCube_1 = vec2(.28 - sign(abs(cp_legs_1.z) - .3) * .01, .5).xyx;
   c_sdChamferedCube_1 = .18;
   sdChamferedCube_has_returned_1 = false;
   p_sdBox_1 = p_sdChamferedCube_1;
   b_sdBox_1 = r_sdChamferedCube_1;
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_0_1 = sdBox_return_value_1;
   cube_sdChamferedCube_1 = sdBox_return_value_inlined_0_1;
   a_rot_1 = .78525;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_1_1 = rot_return_value_1;
   p_sdChamferedCube_1.xz *= rot_return_value_inlined_1_1;
   r_sdChamferedCube_1.xz *= - c_sdChamferedCube_1 / 1.41 + 1.41;
   p_sdBox_1 = p_sdChamferedCube_1;
   b_sdBox_1 = r_sdChamferedCube_1;
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_2_1 = sdBox_return_value_1;
   sdChamferedCube_return_value_1 = max(cube_sdChamferedCube_1, sdBox_return_value_inlined_2_1);
   sdChamferedCube_has_returned_1 = true;
   sdChamferedCube_return_value_inlined_52_1 = sdChamferedCube_return_value_1;
   r_legs_1.d = min(r_legs_1.d, sdChamferedCube_return_value_inlined_52_1);
   p_foot_1 = cp_legs_1;
   foot_has_returned_1 = false;
   p_foot_1.z += .8;
   a_rot_1 = .86;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_29_1 = rot_return_value_1;
   p_foot_1.yz *= rot_return_value_inlined_29_1;
   p_toe_1 = p_foot_1;
   toe_has_returned_1 = false;
   p_toe_1.yz += vec2(.1, .32);
   p_sdBox_1 = p_toe_1;
   b_sdBox_1 = vec3(.3 + .2 * (p_toe_1.z - .18) - p_toe_1.y * .228, .3 + .2 * cos((p_toe_1.z - .18) * 3.69), .35);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_28_1 = sdBox_return_value_1;
   toe_return_value_1 = max(sdBox_return_value_inlined_28_1, .1 - p_toe_1.y);
   toe_has_returned_1 = true;
   toe_return_value_inlined_30_1 = toe_return_value_1;
   d_foot_1 = toe_return_value_inlined_30_1;
   a_rot_1 = 1.57;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_31_1 = rot_return_value_1;
   p_foot_1.xz *= rot_return_value_inlined_31_1;
   p_foot_1.x -= .43;
   p_foot_1.z = .25 - abs(p_foot_1.z);
   p_toe_1 = p_foot_1;
   toe_has_returned_1 = false;
   p_toe_1.yz += vec2(.1, .32);
   p_sdBox_1 = p_toe_1;
   b_sdBox_1 = vec3(.3 + .2 * (p_toe_1.z - .18) - p_toe_1.y * .228, .3 + .2 * cos((p_toe_1.z - .18) * 3.69), .35);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_28_1 = sdBox_return_value_1;
   toe_return_value_1 = max(sdBox_return_value_inlined_28_1, .1 - p_toe_1.y);
   toe_has_returned_1 = true;
   toe_return_value_inlined_32_1 = toe_return_value_1;
   foot_return_value_1 = min(d_foot_1, toe_return_value_inlined_32_1);
   foot_has_returned_1 = true;
   foot_return_value_inlined_53_1 = foot_return_value_1;
   r_legs_1.d = min(r_legs_1.d, foot_return_value_inlined_53_1);
   if(silver_legs_1 < r_legs_1.d)
    {
     r_legs_1.d = silver_legs_1;
     r_legs_1.mat = vec3(.8);
    }
   legs_return_value_1 = r_legs_1;
   legs_has_returned_1 = true;
   legs_return_value_inlined_56_1 = legs_return_value_1;
   r_ed209_1 = legs_return_value_inlined_56_1;
   f_ed209_1 = min(stretch_1 * 2., 1.);
   slide_ed209_1 = f_ed209_1 < .5 ? smoothstep(0., .5, f_ed209_1) : (1. - smoothstep(.5, 1., f_ed209_1) * .2);
   p_ed209_1.yz -= slide_ed209_1 * .5;
   gunsUp_1 = smoothstep(0., 1., clamp((stretch_1 - .66) * 6., 0., 1.));
   fireShock_has_returned_1 = false;
   fireShock_return_value_1 = abs(sin(edShoot_1 * 78.5375));
   fireShock_has_returned_1 = true;
   fireShock_return_value_inlined_57_1 = fireShock_return_value_1;
   gunsForward_1 = smoothstep(0., 1., clamp((stretch_1 - .83) * 6., 0., 1.)) + fireShock_return_value_inlined_57_1 * .5;
   p_waist_1 = p_ed209_1;
   waist_has_returned_1 = false;
   mat_setBodyMaterial_1 = r_waist_1;
   mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
   mat_setBodyMaterial_1.specPower = 30.;
   r_waist_1 = mat_setBodyMaterial_1;
   p_waist_1.y += .65;
   a_rot_1 = - .2;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_33_1 = rot_return_value_1;
   p_waist_1.yz *= rot_return_value_inlined_33_1;
   f_legWalkAngle_1 = 1.;
   legWalkAngle_has_returned_1 = false;
   legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
   legWalkAngle_has_returned_1 = true;
   legWalkAngle_return_value_inlined_34_1 = legWalkAngle_return_value_1;
   legAngle_waist_1 = legWalkAngle_return_value_inlined_34_1;
   a_rot_1 = legAngle_waist_1 * .3;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_35_1 = rot_return_value_1;
   p_waist_1.xy *= rot_return_value_inlined_35_1;
   pp_waist_1 = p_waist_1;
   pp_waist_1.y += .3;
   p_sdCappedCylinder_1 = pp_waist_1.zyx;
   h_sdCappedCylinder_1 = .5;
   r_sdCappedCylinder_1 = .5;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_36_1 = sdCappedCylinder_return_value_1;
   r_waist_1.d = max(sdCappedCylinder_return_value_inlined_36_1, p_waist_1.y + .15);
   bump_waist_1 = .5 - abs(sin(p_waist_1.y * 40.)) * .03;
   p_sdBox_1 = p_waist_1;
   b_sdBox_1 = vec3(bump_waist_1, .15, bump_waist_1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_37_1 = sdBox_return_value_1;
   d_waist_1 = sdBox_return_value_inlined_37_1;
   bump_waist_1 = .3 - abs(sin(p_waist_1.x * 40.)) * .03;
   pp_waist_1.y += .18;
   p_sdCappedCylinder_1 = pp_waist_1.zyx;
   h_sdCappedCylinder_1 = bump_waist_1;
   r_sdCappedCylinder_1 = .75;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_38_1 = sdCappedCylinder_return_value_1;
   d_waist_1 = min(d_waist_1, sdCappedCylinder_return_value_inlined_38_1);
   pp_waist_1.x = abs(pp_waist_1.x);
   a_rot_1 = - .58525 + legAngle_waist_1 * sign(p_waist_1.x);
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_39_1 = rot_return_value_1;
   pp_waist_1.yz *= rot_return_value_inlined_39_1;
   pp_waist_1.x -= .98;
   p_sdCappedCylinder_1 = pp_waist_1.zyx;
   h_sdCappedCylinder_1 = .4;
   r_sdCappedCylinder_1 = .24;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_40_1 = sdCappedCylinder_return_value_1;
   r_waist_1.d = min(r_waist_1.d, max(sdCappedCylinder_return_value_inlined_40_1, - pp_waist_1.y));
   p_sdBox_1 = pp_waist_1;
   b_sdBox_1 = vec3(.24, .2, .14 + .2 * pp_waist_1.y);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_41_1 = sdBox_return_value_1;
   r_waist_1.d = min(r_waist_1.d, sdBox_return_value_inlined_41_1);
   p_waist_1 = pp_waist_1;
   pp_waist_1.xz = abs(pp_waist_1.xz) - vec2(.12, .25);
   p_sdCappedCylinder_1 = pp_waist_1.xzy;
   h_sdCappedCylinder_1 = .1;
   r_sdCappedCylinder_1 = .325;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_42_1 = sdCappedCylinder_return_value_1;
   p_sdCappedCylinder_1 = pp_waist_1.xzy;
   h_sdCappedCylinder_1 = .05;
   r_sdCappedCylinder_1 = .5;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_43_1 = sdCappedCylinder_return_value_1;
   r_waist_1.d = min(r_waist_1.d, max(min(sdCappedCylinder_return_value_inlined_42_1, sdCappedCylinder_return_value_inlined_43_1), pp_waist_1.y));
   p_waist_1.y += .68;
   p_sdBox_1 = p_waist_1;
   b_sdBox_1 = vec3(sign(abs(p_waist_1.y) - .04) * .005 + .26, .2, .34);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_44_1 = sdBox_return_value_1;
   r_waist_1.d = min(r_waist_1.d, sdBox_return_value_inlined_44_1);
   if(d_waist_1 < r_waist_1.d)
    {
     r_waist_1.d = d_waist_1;
     r_waist_1.mat = vec3(.02);
    }
   waist_return_value_1 = r_waist_1;
   waist_has_returned_1 = true;
   waist_return_value_inlined_58_1 = waist_return_value_1;
   a_minResult_1 = r_ed209_1;
   b_minResult_1 = waist_return_value_inlined_58_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_59_1 = minResult_return_value_1;
   r_ed209_1 = minResult_return_value_inlined_59_1;
   f_legWalkAngle_1 = 2.;
   legWalkAngle_has_returned_1 = false;
   legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
   legWalkAngle_has_returned_1 = true;
   legWalkAngle_return_value_inlined_60_1 = legWalkAngle_return_value_1;
   a_rot_1 = .1 * (- edDown_1 + legWalkAngle_return_value_inlined_60_1 + smoothstep(0., 1., clamp((stretch_1 - .5) * 6., 0., 1.)) - 1.);
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_61_1 = rot_return_value_1;
   p_ed209_1.yz *= rot_return_value_inlined_61_1;
   a_rot_1 = edTwist_1 * .2;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_62_1 = rot_return_value_1;
   p_ed209_1.xz *= rot_return_value_inlined_62_1;
   p_headLower_1 = p_ed209_1;
   headLower_has_returned_1 = false;
   op_headLower_1 = p_headLower_1;
   p_headVisor_1 = p_headLower_1 * vec3(.95, - 1.4, .95);
   h_headVisor_1 = 1.;
   bump_headVisor_1 = 0.;
   headVisor_has_returned_1 = false;
   bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
   p_sdBox_1 = p_headVisor_1;
   b_sdBox_1 = vec3(1, h_headVisor_1, 2);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
   result_headVisor_1.d = sdBox_return_value_inlined_3_1;
   p_headSphere_1 = p_headVisor_1;
   headSphere_has_returned_1 = false;
   headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
   headSphere_has_returned_1 = true;
   headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
   result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
   result_headVisor_1.mat = vec3(.05);
   result_headVisor_1.specPower = 30.;
   headVisor_return_value_1 = result_headVisor_1;
   headVisor_has_returned_1 = true;
   headVisor_return_value_inlined_5_1 = headVisor_return_value_1;
   r_headLower_1 = headVisor_return_value_inlined_5_1;
   p_headVisor_1 = (p_headLower_1 + vec3(0, .01, 0)) * vec3(.95);
   h_headVisor_1 = 1.;
   bump_headVisor_1 = 0.;
   headVisor_has_returned_1 = false;
   bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
   p_sdBox_1 = p_headVisor_1;
   b_sdBox_1 = vec3(1, h_headVisor_1, 2);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
   result_headVisor_1.d = sdBox_return_value_inlined_3_1;
   p_headSphere_1 = p_headVisor_1;
   headSphere_has_returned_1 = false;
   headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
   headSphere_has_returned_1 = true;
   headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
   result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
   result_headVisor_1.mat = vec3(.05);
   result_headVisor_1.specPower = 30.;
   headVisor_return_value_1 = result_headVisor_1;
   headVisor_has_returned_1 = true;
   headVisor_return_value_inlined_6_1 = headVisor_return_value_1;
   r_headLower_1.d = min(r_headLower_1.d, max(max(headVisor_return_value_inlined_6_1.d, p_headLower_1.y - .35), p_headLower_1.y * .625 - p_headLower_1.z - .66));
   a_rot_1 = .075 * (gunsUp_1 - 1.) * sign(p_headLower_1.x);
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_7_1 = rot_return_value_1;
   p_headLower_1.xy *= rot_return_value_inlined_7_1;
   p_headLower_1.x = abs(p_headLower_1.x) - 1.33;
   p_headLower_1.y -= .1 - p_headLower_1.x * .1;
   p_sdBox_1 = p_headLower_1;
   b_sdBox_1 = vec3(.4, .06 * (1. - p_headLower_1.x), .3 - p_headLower_1.x * .2);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_8_1 = sdBox_return_value_1;
   r_headLower_1.d = min(r_headLower_1.d, sdBox_return_value_inlined_8_1);
   p_headLower_1 = op_headLower_1;
   p_headLower_1.y = abs(abs(p_headLower_1.y + .147) - .0556) - .0278;
   p_sdBox_1 = p_headLower_1 + vec3(0, 0, 1.5);
   b_sdBox_1 = vec3(mix(.25, .55, - op_headLower_1.y), .015, .1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_9_1 = sdBox_return_value_1;
   r_headLower_1.d = max(r_headLower_1.d, - sdBox_return_value_inlined_9_1);
   p_headLower_1 = op_headLower_1;
   p_headLower_1.y = abs(p_headLower_1.y + .16) - .06;
   p_headLower_1.z -= - 1.1;
   p_sdCappedCylinder_1 = p_headLower_1.xzy;
   h_sdCappedCylinder_1 = 1.;
   r_sdCappedCylinder_1 = .03;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_10_1 = sdCappedCylinder_return_value_1;
   p_sdCappedCylinder_1 = p_headLower_1.xzy;
   h_sdCappedCylinder_1 = .55;
   r_sdCappedCylinder_1 = 1.;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_11_1 = sdCappedCylinder_return_value_1;
   r_headLower_1.d = max(r_headLower_1.d, - max(max(sdCappedCylinder_return_value_inlined_10_1, - sdCappedCylinder_return_value_inlined_11_1), p_headLower_1.z + .2));
   mat_setBodyMaterial_1 = r_headLower_1;
   mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
   mat_setBodyMaterial_1.specPower = 30.;
   r_headLower_1 = mat_setBodyMaterial_1;
   headLower_return_value_1 = r_headLower_1;
   headLower_has_returned_1 = true;
   headLower_return_value_inlined_63_1 = headLower_return_value_1;
   a_minResult_1 = r_ed209_1;
   b_minResult_1 = headLower_return_value_inlined_63_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_64_1 = minResult_return_value_1;
   p_headVisor_1 = p_ed209_1;
   h_headVisor_1 = .8;
   bump_headVisor_1 = 1.;
   headVisor_has_returned_1 = false;
   bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
   p_sdBox_1 = p_headVisor_1;
   b_sdBox_1 = vec3(1, h_headVisor_1, 2);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
   result_headVisor_1.d = sdBox_return_value_inlined_3_1;
   p_headSphere_1 = p_headVisor_1;
   headSphere_has_returned_1 = false;
   headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
   headSphere_has_returned_1 = true;
   headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
   result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
   result_headVisor_1.mat = vec3(.05);
   result_headVisor_1.specPower = 30.;
   headVisor_return_value_1 = result_headVisor_1;
   headVisor_has_returned_1 = true;
   headVisor_return_value_inlined_65_1 = headVisor_return_value_1;
   a_minResult_1 = minResult_return_value_inlined_64_1;
   b_minResult_1 = headVisor_return_value_inlined_65_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_66_1 = minResult_return_value_1;
   p_arms_1 = p_ed209_1;
   arms_has_returned_1 = false;
   mat_setBodyMaterial_1 = r_arms_1;
   mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
   mat_setBodyMaterial_1.specPower = 30.;
   r_arms_1 = mat_setBodyMaterial_1;
   p_arms_1.x = abs(p_arms_1.x);
   p_arms_1.yz += vec2(.24, 0);
   a_rot_1 = .15 * (gunsUp_1 - 1.);
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_23_1 = rot_return_value_1;
   p_arms_1.xy *= rot_return_value_inlined_23_1;
   p_sdCapsule_1 = p_arms_1;
   a_sdCapsule_1 = vec3(0);
   b_sdCapsule_1 = vec3(1.5, 0, 0);
   r_sdCapsule_1 = .2;
   sdCapsule_has_returned_1 = false;
   pa_sdCapsule_1 = p_sdCapsule_1 - a_sdCapsule_1;
   ba_sdCapsule_1 = b_sdCapsule_1 - a_sdCapsule_1;
   sdCapsule_return_value_1 = length(pa_sdCapsule_1 - ba_sdCapsule_1 * clamp(dot(pa_sdCapsule_1, ba_sdCapsule_1) / dot(ba_sdCapsule_1, ba_sdCapsule_1), 0., 1.)) - r_sdCapsule_1;
   sdCapsule_has_returned_1 = true;
   sdCapsule_return_value_inlined_24_1 = sdCapsule_return_value_1;
   p_sdCapsule_1 = p_arms_1;
   a_sdCapsule_1 = vec3(1.5, 0, 0);
   b_sdCapsule_1 = wrist_arms_1;
   r_sdCapsule_1 = .2;
   sdCapsule_has_returned_1 = false;
   pa_sdCapsule_1 = p_sdCapsule_1 - a_sdCapsule_1;
   ba_sdCapsule_1 = b_sdCapsule_1 - a_sdCapsule_1;
   sdCapsule_return_value_1 = length(pa_sdCapsule_1 - ba_sdCapsule_1 * clamp(dot(pa_sdCapsule_1, ba_sdCapsule_1) / dot(ba_sdCapsule_1, ba_sdCapsule_1), 0., 1.)) - r_sdCapsule_1;
   sdCapsule_has_returned_1 = true;
   sdCapsule_return_value_inlined_25_1 = sdCapsule_return_value_1;
   r_arms_1.d = min(sdCapsule_return_value_inlined_24_1, sdCapsule_return_value_inlined_25_1);
   p_arms_1 -= wrist_arms_1;
   p_arms_1.z -= gunsForward_1 * .15;
   p_gunPod_1 = p_arms_1;
   gunPod_has_returned_1 = false;
   mat_setBodyMaterial_1 = r_gunPod_1;
   mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
   mat_setBodyMaterial_1.specPower = 30.;
   r_gunPod_1 = mat_setBodyMaterial_1;
   p_gunPod_1.yz += vec2(.1, .45);
   pp_gunPod_1 = p_gunPod_1;
   pp_gunPod_1.z = abs(pp_gunPod_1.z) - .5;
   p_sdCappedCone_1 = pp_gunPod_1;
   a_sdCappedCone_1 = vec3(0);
   b_sdCappedCone_1 = vec3(0, 0, - .1);
   ra_sdCappedCone_1 = .35 - .1;
   rb_sdCappedCone_1 = .35;
   sdCappedCone_has_returned_1 = false;
   rba_sdCappedCone_1 = rb_sdCappedCone_1 - ra_sdCappedCone_1;
   baba_sdCappedCone_1 = dot(b_sdCappedCone_1 - a_sdCappedCone_1, b_sdCappedCone_1 - a_sdCappedCone_1);
   papa_sdCappedCone_1 = dot(p_sdCappedCone_1 - a_sdCappedCone_1, p_sdCappedCone_1 - a_sdCappedCone_1);
   paba_sdCappedCone_1 = dot(p_sdCappedCone_1 - a_sdCappedCone_1, b_sdCappedCone_1 - a_sdCappedCone_1) / baba_sdCappedCone_1;
   x_sdCappedCone_1 = sqrt(papa_sdCappedCone_1 - paba_sdCappedCone_1 * paba_sdCappedCone_1 * baba_sdCappedCone_1);
   cax_sdCappedCone_1 = max(0., x_sdCappedCone_1 - ((paba_sdCappedCone_1 < .5) ? ra_sdCappedCone_1 : rb_sdCappedCone_1));
   cay_sdCappedCone_1 = abs(paba_sdCappedCone_1 - .5) - .5;
   f_sdCappedCone_1 = clamp((rba_sdCappedCone_1 * (x_sdCappedCone_1 - ra_sdCappedCone_1) + paba_sdCappedCone_1 * baba_sdCappedCone_1) / (rba_sdCappedCone_1 * rba_sdCappedCone_1 + baba_sdCappedCone_1), 0., 1.);
   cbx_sdCappedCone_1 = x_sdCappedCone_1 - ra_sdCappedCone_1 - f_sdCappedCone_1 * rba_sdCappedCone_1;
   cby_sdCappedCone_1 = paba_sdCappedCone_1 - f_sdCappedCone_1;
   sdCappedCone_return_value_1 = ((cbx_sdCappedCone_1 < 0. && cay_sdCappedCone_1 < 0.) ? - 1. : 1.) * sqrt(min(cax_sdCappedCone_1 * cax_sdCappedCone_1 + cay_sdCappedCone_1 * cay_sdCappedCone_1 * baba_sdCappedCone_1, cbx_sdCappedCone_1 * cbx_sdCappedCone_1 + cby_sdCappedCone_1 * cby_sdCappedCone_1 * baba_sdCappedCone_1));
   sdCappedCone_has_returned_1 = true;
   sdCappedCone_return_value_inlined_12_1 = sdCappedCone_return_value_1;
   r_gunPod_1.d = sdCappedCone_return_value_inlined_12_1;
   p_sdCappedCylinder_1 = p_gunPod_1;
   h_sdCappedCylinder_1 = .35;
   r_sdCappedCylinder_1 = .4;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_13_1 = sdCappedCylinder_return_value_1;
   r_gunPod_1.d = min(r_gunPod_1.d, sdCappedCylinder_return_value_inlined_13_1);
   pp_gunPod_1 = vec3(p_gunPod_1.x, .28 - p_gunPod_1.y, p_gunPod_1.z);
   p_sdTriPrism_1 = pp_gunPod_1;
   h_sdTriPrism_1 = vec2(.1, .5);
   sdTriPrism_has_returned_1 = false;
   q_sdTriPrism_1 = abs(p_sdTriPrism_1);
   sdTriPrism_return_value_1 = max(q_sdTriPrism_1.z - h_sdTriPrism_1.y, max(q_sdTriPrism_1.x * .866025 + p_sdTriPrism_1.y * .5, - p_sdTriPrism_1.y) - h_sdTriPrism_1.x * .5);
   sdTriPrism_has_returned_1 = true;
   sdTriPrism_return_value_inlined_14_1 = sdTriPrism_return_value_1;
   r_gunPod_1.d = min(r_gunPod_1.d, sdTriPrism_return_value_inlined_14_1);
   pp_gunPod_1 = p_gunPod_1;
   pp_gunPod_1.x = abs(p_gunPod_1.x);
   a_rot_1 = .78525;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_15_1 = rot_return_value_1;
   pp_gunPod_1.xy *= rot_return_value_inlined_15_1;
   bump_gunPod_1 = sign(sin(pp_gunPod_1.z * 33.3)) * .003;
   p_sdBox_1 = pp_gunPod_1;
   b_sdBox_1 = vec3(.1 - bump_gunPod_1, .38 - bump_gunPod_1, .34);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_16_1 = sdBox_return_value_1;
   d_gunPod_1 = sdBox_return_value_inlined_16_1 - .02;
   pp_gunPod_1 = p_gunPod_1 - vec3(0, 0, - .6);
   pp_gunPod_1.x = abs(pp_gunPod_1.x) - .1;
   p_sdCappedCylinder_1 = pp_gunPod_1;
   h_sdCappedCylinder_1 = .06;
   r_sdCappedCylinder_1 = .15;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_17_1 = sdCappedCylinder_return_value_1;
   p_sdCappedCylinder_1 = pp_gunPod_1 + vec3(0, .12, - .05);
   h_sdCappedCylinder_1 = .06;
   r_sdCappedCylinder_1 = .05;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_18_1 = sdCappedCylinder_return_value_1;
   p_sdBox_1 = p_gunPod_1 + vec3(0, 0, .54);
   b_sdBox_1 = vec3(.1, .06, .04);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_19_1 = sdBox_return_value_1;
   d_gunPod_1 = min(min(min(d_gunPod_1, sdCappedCylinder_return_value_inlined_17_1), sdCappedCylinder_return_value_inlined_18_1), sdBox_return_value_inlined_19_1);
   if(d_gunPod_1 < r_gunPod_1.d)
    {
     p_sdCappedCylinder_1 = pp_gunPod_1 + vec3(0, 0, .1);
     h_sdCappedCylinder_1 = .03;
     r_sdCappedCylinder_1 = .2;
     sdCappedCylinder_has_returned_1 = false;
     d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
     sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
     sdCappedCylinder_has_returned_1 = true;
     sdCappedCylinder_return_value_inlined_20_1 = sdCappedCylinder_return_value_1;
     d_gunPod_1 = max(d_gunPod_1, - sdCappedCylinder_return_value_inlined_20_1);
     r_gunPod_1.d = d_gunPod_1;
     r_gunPod_1.mat = vec3(.02);
    }
   fireShock_has_returned_1 = false;
   fireShock_return_value_1 = abs(sin(edShoot_1 * 78.5375));
   fireShock_has_returned_1 = true;
   fireShock_return_value_inlined_21_1 = fireShock_return_value_1;
   fs_gunPod_1 = fireShock_return_value_inlined_21_1;
   if(fs_gunPod_1 > .5)
    {
     p_sdCappedCylinder_1 = pp_gunPod_1;
     h_sdCappedCylinder_1 = .01 + pp_gunPod_1.z * .05;
     r_sdCappedCylinder_1 = fract(fs_gunPod_1 * 3322.423) * .5 + .9;
     sdCappedCylinder_has_returned_1 = false;
     d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
     sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
     sdCappedCylinder_has_returned_1 = true;
     sdCappedCylinder_return_value_inlined_22_1 = sdCappedCylinder_return_value_1;
     d_gunPod_1 = sdCappedCylinder_return_value_inlined_22_1;
     if(d_gunPod_1 < r_gunPod_1.d)
      {
       r_gunPod_1.d = d_gunPod_1;
       r_gunPod_1.mat = vec3(1);
       glow_1 += .1 / (.01 + d_gunPod_1 * d_gunPod_1 * 4e2);
      }
    }
   gunPod_return_value_1 = r_gunPod_1;
   gunPod_has_returned_1 = true;
   gunPod_return_value_inlined_26_1 = gunPod_return_value_1;
   a_minResult_1 = r_arms_1;
   b_minResult_1 = gunPod_return_value_inlined_26_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_27_1 = minResult_return_value_1;
   arms_return_value_1 = minResult_return_value_inlined_27_1;
   arms_has_returned_1 = true;
   arms_return_value_inlined_67_1 = arms_return_value_1;
   a_minResult_1 = minResult_return_value_inlined_66_1;
   b_minResult_1 = arms_return_value_inlined_67_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_68_1 = minResult_return_value_1;
   ed209_return_value_1 = minResult_return_value_inlined_68_1;
   ed209_has_returned_1 = true;
   ed209_return_value_inlined_79_1 = ed209_return_value_1;
   a_minResult_1 = room_return_value_inlined_78_1;
   b_minResult_1 = ed209_return_value_inlined_79_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_80_1 = minResult_return_value_1;
   r_map_1 = minResult_return_value_inlined_80_1;
   gnd_map_1 = length(p_map_1.y + 3.);
   if(gnd_map_1 < r_map_1.d)
    {
     r_map_1.d = gnd_map_1;
     r_map_1.mat = vec3(.1);
    }
   map_return_value_1 = r_map_1;
   map_has_returned_1 = true;
   map_return_value_inlined_83_1 = map_return_value_1;
   p_map_1 = p_calcNormal_1 + e_calcNormal_1.yxy;
   map_has_returned_1 = false;
   p_room_1 = p_map_1;
   room_has_returned_1 = false;
   r_room_1.mat = vec3(.4);
   r_room_1.specPower = 1e7;
   xy_room_1 = p_room_1.xy - vec2(0, 2);
   p_room_1.x = abs(p_room_1.x);
   p_room_1.yz += vec2(.5, - 3.4);
   p_sdBox_1 = p_room_1;
   b_sdBox_1 = frameInner_room_1 + vec3(0, 0, 1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_69_1 = sdBox_return_value_1;
   doorHole_room_1 = sdBox_return_value_inlined_69_1;
   backWall_room_1 = length(p_room_1.z - 8.);
   r_room_1.d = min(backWall_room_1, max(length(p_room_1.z), - doorHole_room_1 + .1));
   if(r_room_1.d == backWall_room_1)
    {
     p_sdOctogon_1 = xy_room_1;
     r_sdOctogon_1 = 2.6;
     sdOctogon_has_returned_1 = false;
     p_sdOctogon_1 = abs(p_sdOctogon_1);
     p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
     p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
     p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
     sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
     sdOctogon_has_returned_1 = true;
     sdOctogon_return_value_inlined_70_1 = sdOctogon_return_value_1;
     p_sdOctogon_1 = xy_room_1;
     r_sdOctogon_1 = 1.9;
     sdOctogon_has_returned_1 = false;
     p_sdOctogon_1 = abs(p_sdOctogon_1);
     p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
     p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
     p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
     sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
     sdOctogon_has_returned_1 = true;
     sdOctogon_return_value_inlined_71_1 = sdOctogon_return_value_1;
     ocp_room_1 = min(abs(sdOctogon_return_value_inlined_70_1), abs(sdOctogon_return_value_inlined_71_1));
     p_sdOctogon_1 = xy_room_1;
     r_sdOctogon_1 = 1.2;
     sdOctogon_has_returned_1 = false;
     p_sdOctogon_1 = abs(p_sdOctogon_1);
     p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
     p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
     p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
     sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
     sdOctogon_has_returned_1 = true;
     sdOctogon_return_value_inlined_72_1 = sdOctogon_return_value_1;
     ocp_room_1 = min(max(ocp_room_1, min(.7 - abs(xy_room_1.x + 1.2), - xy_room_1.y)), max(abs(sdOctogon_return_value_inlined_72_1), min(xy_room_1.x, .7 - abs(xy_room_1.y))));
     if(ocp_room_1 < .3)
      {
       r_room_1.mat = vec3(.39, .57, .71);
      }
    }
   p_sdBox_1 = p_room_1;
   b_sdBox_1 = frameInner_room_1 + vec3(.4, .4, .1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_73_1 = sdBox_return_value_1;
   doorFrame_room_1 = max(sdBox_return_value_inlined_73_1, - doorHole_room_1);
   doorWidth_room_1 = frameInner_room_1.x * .5;
   p_room_1.x -= frameInner_room_1.x;
   a_rot_1 = doorOpen_1 * 2.1;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_74_1 = rot_return_value_1;
   p_room_1.xz *= rot_return_value_inlined_74_1;
   p_room_1.x += doorWidth_room_1;
   p_sdBox_1 = p_room_1;
   b_sdBox_1 = vec3(doorWidth_room_1, frameInner_room_1.yz);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_75_1 = sdBox_return_value_1;
   door_room_1 = sdBox_return_value_inlined_75_1;
   p_room_1 = abs(p_room_1) - vec3(doorWidth_room_1 * .5, 1.1, .14);
   p_sdBox_1 = p_room_1;
   b_sdBox_1 = vec3(.45, .9, .1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_76_1 = sdBox_return_value_1;
   p_sdBox_1 = p_room_1;
   b_sdBox_1 = vec3(.35, .8, 1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_77_1 = sdBox_return_value_1;
   d_room_1 = min(doorFrame_room_1, max(door_room_1, - max(sdBox_return_value_inlined_76_1, - sdBox_return_value_inlined_77_1)));
   if(d_room_1 < r_room_1.d)
    {
     r_room_1.d = d_room_1;
     r_room_1.mat = vec3(.02, .02, .024);
     r_room_1.specPower = 10.;
    }
   room_return_value_1 = r_room_1;
   room_has_returned_1 = true;
   room_return_value_inlined_78_1 = room_return_value_1;
   p_ed209_1 = p_map_1;
   ed209_has_returned_1 = false;
   f_legWalkAngle_1 = 2.;
   legWalkAngle_has_returned_1 = false;
   legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
   legWalkAngle_has_returned_1 = true;
   legWalkAngle_return_value_inlined_54_1 = legWalkAngle_return_value_1;
   edZ_has_returned_1 = false;
   edZ_return_value_1 = mix(5., - 2., edWalk_1);
   edZ_has_returned_1 = true;
   edZ_return_value_inlined_55_1 = edZ_return_value_1;
   p_ed209_1.yz += vec2(legWalkAngle_return_value_inlined_54_1 * .2 + .1, - edZ_return_value_inlined_55_1);
   p_legs_1 = p_ed209_1;
   legs_has_returned_1 = false;
   mat_setBodyMaterial_1 = r_legs_1;
   mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
   mat_setBodyMaterial_1.specPower = 30.;
   r_legs_1 = mat_setBodyMaterial_1;
   f_legWalkAngle_1 = 1.;
   legWalkAngle_has_returned_1 = false;
   legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
   legWalkAngle_has_returned_1 = true;
   legWalkAngle_return_value_inlined_45_1 = legWalkAngle_return_value_1;
   legAngle_legs_1 = legWalkAngle_return_value_inlined_45_1;
   p_legs_1.z += .27;
   a_rot_1 = legAngle_legs_1 * sign(p_legs_1.x);
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_46_1 = rot_return_value_1;
   p_legs_1.yz *= rot_return_value_inlined_46_1;
   p_legs_1.z -= .27;
   p_legs_1.y += .65;
   a_rot_1 = - .2;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_47_1 = rot_return_value_1;
   p_legs_1.yz *= rot_return_value_inlined_47_1;
   a_rot_1 = legAngle_legs_1 * .3;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_48_1 = rot_return_value_1;
   p_legs_1.xy *= rot_return_value_inlined_48_1;
   pp_legs_1 = p_legs_1;
   pp_legs_1.x = abs(pp_legs_1.x);
   pp_legs_1.y += .48;
   a_rot_1 = - .58525;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_49_1 = rot_return_value_1;
   pp_legs_1.yz *= rot_return_value_inlined_49_1;
   pp_legs_1.x -= .98;
   cp_legs_1 = pp_legs_1;
   p_legs_1 = pp_legs_1;
   pp_legs_1.xz = abs(pp_legs_1.xz) - vec2(.12, .25);
   p_legs_1.y += .68;
   p_legs_1.xy = abs(p_legs_1.xy) - .12;
   p_sdBox_1 = p_legs_1;
   b_sdBox_1 = vec3(.07, .05, 1.2);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_50_1 = sdBox_return_value_1;
   silver_legs_1 = sdBox_return_value_inlined_50_1;
   cp_legs_1 -= vec3(0, - .7, 0);
   p_sdBox_1 = cp_legs_1 - vec3(0, 0, 1.15);
   b_sdBox_1 = vec3(.17, .17, .07);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_51_1 = sdBox_return_value_1;
   r_legs_1.d = sdBox_return_value_inlined_51_1 - .04;
   cp_legs_1.z ++;
   p_sdChamferedCube_1 = cp_legs_1.xzy;
   r_sdChamferedCube_1 = vec2(.28 - sign(abs(cp_legs_1.z) - .3) * .01, .5).xyx;
   c_sdChamferedCube_1 = .18;
   sdChamferedCube_has_returned_1 = false;
   p_sdBox_1 = p_sdChamferedCube_1;
   b_sdBox_1 = r_sdChamferedCube_1;
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_0_1 = sdBox_return_value_1;
   cube_sdChamferedCube_1 = sdBox_return_value_inlined_0_1;
   a_rot_1 = .78525;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_1_1 = rot_return_value_1;
   p_sdChamferedCube_1.xz *= rot_return_value_inlined_1_1;
   r_sdChamferedCube_1.xz *= - c_sdChamferedCube_1 / 1.41 + 1.41;
   p_sdBox_1 = p_sdChamferedCube_1;
   b_sdBox_1 = r_sdChamferedCube_1;
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_2_1 = sdBox_return_value_1;
   sdChamferedCube_return_value_1 = max(cube_sdChamferedCube_1, sdBox_return_value_inlined_2_1);
   sdChamferedCube_has_returned_1 = true;
   sdChamferedCube_return_value_inlined_52_1 = sdChamferedCube_return_value_1;
   r_legs_1.d = min(r_legs_1.d, sdChamferedCube_return_value_inlined_52_1);
   p_foot_1 = cp_legs_1;
   foot_has_returned_1 = false;
   p_foot_1.z += .8;
   a_rot_1 = .86;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_29_1 = rot_return_value_1;
   p_foot_1.yz *= rot_return_value_inlined_29_1;
   p_toe_1 = p_foot_1;
   toe_has_returned_1 = false;
   p_toe_1.yz += vec2(.1, .32);
   p_sdBox_1 = p_toe_1;
   b_sdBox_1 = vec3(.3 + .2 * (p_toe_1.z - .18) - p_toe_1.y * .228, .3 + .2 * cos((p_toe_1.z - .18) * 3.69), .35);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_28_1 = sdBox_return_value_1;
   toe_return_value_1 = max(sdBox_return_value_inlined_28_1, .1 - p_toe_1.y);
   toe_has_returned_1 = true;
   toe_return_value_inlined_30_1 = toe_return_value_1;
   d_foot_1 = toe_return_value_inlined_30_1;
   a_rot_1 = 1.57;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_31_1 = rot_return_value_1;
   p_foot_1.xz *= rot_return_value_inlined_31_1;
   p_foot_1.x -= .43;
   p_foot_1.z = .25 - abs(p_foot_1.z);
   p_toe_1 = p_foot_1;
   toe_has_returned_1 = false;
   p_toe_1.yz += vec2(.1, .32);
   p_sdBox_1 = p_toe_1;
   b_sdBox_1 = vec3(.3 + .2 * (p_toe_1.z - .18) - p_toe_1.y * .228, .3 + .2 * cos((p_toe_1.z - .18) * 3.69), .35);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_28_1 = sdBox_return_value_1;
   toe_return_value_1 = max(sdBox_return_value_inlined_28_1, .1 - p_toe_1.y);
   toe_has_returned_1 = true;
   toe_return_value_inlined_32_1 = toe_return_value_1;
   foot_return_value_1 = min(d_foot_1, toe_return_value_inlined_32_1);
   foot_has_returned_1 = true;
   foot_return_value_inlined_53_1 = foot_return_value_1;
   r_legs_1.d = min(r_legs_1.d, foot_return_value_inlined_53_1);
   if(silver_legs_1 < r_legs_1.d)
    {
     r_legs_1.d = silver_legs_1;
     r_legs_1.mat = vec3(.8);
    }
   legs_return_value_1 = r_legs_1;
   legs_has_returned_1 = true;
   legs_return_value_inlined_56_1 = legs_return_value_1;
   r_ed209_1 = legs_return_value_inlined_56_1;
   f_ed209_1 = min(stretch_1 * 2., 1.);
   slide_ed209_1 = f_ed209_1 < .5 ? smoothstep(0., .5, f_ed209_1) : (1. - smoothstep(.5, 1., f_ed209_1) * .2);
   p_ed209_1.yz -= slide_ed209_1 * .5;
   gunsUp_1 = smoothstep(0., 1., clamp((stretch_1 - .66) * 6., 0., 1.));
   fireShock_has_returned_1 = false;
   fireShock_return_value_1 = abs(sin(edShoot_1 * 78.5375));
   fireShock_has_returned_1 = true;
   fireShock_return_value_inlined_57_1 = fireShock_return_value_1;
   gunsForward_1 = smoothstep(0., 1., clamp((stretch_1 - .83) * 6., 0., 1.)) + fireShock_return_value_inlined_57_1 * .5;
   p_waist_1 = p_ed209_1;
   waist_has_returned_1 = false;
   mat_setBodyMaterial_1 = r_waist_1;
   mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
   mat_setBodyMaterial_1.specPower = 30.;
   r_waist_1 = mat_setBodyMaterial_1;
   p_waist_1.y += .65;
   a_rot_1 = - .2;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_33_1 = rot_return_value_1;
   p_waist_1.yz *= rot_return_value_inlined_33_1;
   f_legWalkAngle_1 = 1.;
   legWalkAngle_has_returned_1 = false;
   legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
   legWalkAngle_has_returned_1 = true;
   legWalkAngle_return_value_inlined_34_1 = legWalkAngle_return_value_1;
   legAngle_waist_1 = legWalkAngle_return_value_inlined_34_1;
   a_rot_1 = legAngle_waist_1 * .3;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_35_1 = rot_return_value_1;
   p_waist_1.xy *= rot_return_value_inlined_35_1;
   pp_waist_1 = p_waist_1;
   pp_waist_1.y += .3;
   p_sdCappedCylinder_1 = pp_waist_1.zyx;
   h_sdCappedCylinder_1 = .5;
   r_sdCappedCylinder_1 = .5;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_36_1 = sdCappedCylinder_return_value_1;
   r_waist_1.d = max(sdCappedCylinder_return_value_inlined_36_1, p_waist_1.y + .15);
   bump_waist_1 = .5 - abs(sin(p_waist_1.y * 40.)) * .03;
   p_sdBox_1 = p_waist_1;
   b_sdBox_1 = vec3(bump_waist_1, .15, bump_waist_1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_37_1 = sdBox_return_value_1;
   d_waist_1 = sdBox_return_value_inlined_37_1;
   bump_waist_1 = .3 - abs(sin(p_waist_1.x * 40.)) * .03;
   pp_waist_1.y += .18;
   p_sdCappedCylinder_1 = pp_waist_1.zyx;
   h_sdCappedCylinder_1 = bump_waist_1;
   r_sdCappedCylinder_1 = .75;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_38_1 = sdCappedCylinder_return_value_1;
   d_waist_1 = min(d_waist_1, sdCappedCylinder_return_value_inlined_38_1);
   pp_waist_1.x = abs(pp_waist_1.x);
   a_rot_1 = - .58525 + legAngle_waist_1 * sign(p_waist_1.x);
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_39_1 = rot_return_value_1;
   pp_waist_1.yz *= rot_return_value_inlined_39_1;
   pp_waist_1.x -= .98;
   p_sdCappedCylinder_1 = pp_waist_1.zyx;
   h_sdCappedCylinder_1 = .4;
   r_sdCappedCylinder_1 = .24;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_40_1 = sdCappedCylinder_return_value_1;
   r_waist_1.d = min(r_waist_1.d, max(sdCappedCylinder_return_value_inlined_40_1, - pp_waist_1.y));
   p_sdBox_1 = pp_waist_1;
   b_sdBox_1 = vec3(.24, .2, .14 + .2 * pp_waist_1.y);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_41_1 = sdBox_return_value_1;
   r_waist_1.d = min(r_waist_1.d, sdBox_return_value_inlined_41_1);
   p_waist_1 = pp_waist_1;
   pp_waist_1.xz = abs(pp_waist_1.xz) - vec2(.12, .25);
   p_sdCappedCylinder_1 = pp_waist_1.xzy;
   h_sdCappedCylinder_1 = .1;
   r_sdCappedCylinder_1 = .325;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_42_1 = sdCappedCylinder_return_value_1;
   p_sdCappedCylinder_1 = pp_waist_1.xzy;
   h_sdCappedCylinder_1 = .05;
   r_sdCappedCylinder_1 = .5;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_43_1 = sdCappedCylinder_return_value_1;
   r_waist_1.d = min(r_waist_1.d, max(min(sdCappedCylinder_return_value_inlined_42_1, sdCappedCylinder_return_value_inlined_43_1), pp_waist_1.y));
   p_waist_1.y += .68;
   p_sdBox_1 = p_waist_1;
   b_sdBox_1 = vec3(sign(abs(p_waist_1.y) - .04) * .005 + .26, .2, .34);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_44_1 = sdBox_return_value_1;
   r_waist_1.d = min(r_waist_1.d, sdBox_return_value_inlined_44_1);
   if(d_waist_1 < r_waist_1.d)
    {
     r_waist_1.d = d_waist_1;
     r_waist_1.mat = vec3(.02);
    }
   waist_return_value_1 = r_waist_1;
   waist_has_returned_1 = true;
   waist_return_value_inlined_58_1 = waist_return_value_1;
   a_minResult_1 = r_ed209_1;
   b_minResult_1 = waist_return_value_inlined_58_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_59_1 = minResult_return_value_1;
   r_ed209_1 = minResult_return_value_inlined_59_1;
   f_legWalkAngle_1 = 2.;
   legWalkAngle_has_returned_1 = false;
   legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
   legWalkAngle_has_returned_1 = true;
   legWalkAngle_return_value_inlined_60_1 = legWalkAngle_return_value_1;
   a_rot_1 = .1 * (- edDown_1 + legWalkAngle_return_value_inlined_60_1 + smoothstep(0., 1., clamp((stretch_1 - .5) * 6., 0., 1.)) - 1.);
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_61_1 = rot_return_value_1;
   p_ed209_1.yz *= rot_return_value_inlined_61_1;
   a_rot_1 = edTwist_1 * .2;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_62_1 = rot_return_value_1;
   p_ed209_1.xz *= rot_return_value_inlined_62_1;
   p_headLower_1 = p_ed209_1;
   headLower_has_returned_1 = false;
   op_headLower_1 = p_headLower_1;
   p_headVisor_1 = p_headLower_1 * vec3(.95, - 1.4, .95);
   h_headVisor_1 = 1.;
   bump_headVisor_1 = 0.;
   headVisor_has_returned_1 = false;
   bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
   p_sdBox_1 = p_headVisor_1;
   b_sdBox_1 = vec3(1, h_headVisor_1, 2);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
   result_headVisor_1.d = sdBox_return_value_inlined_3_1;
   p_headSphere_1 = p_headVisor_1;
   headSphere_has_returned_1 = false;
   headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
   headSphere_has_returned_1 = true;
   headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
   result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
   result_headVisor_1.mat = vec3(.05);
   result_headVisor_1.specPower = 30.;
   headVisor_return_value_1 = result_headVisor_1;
   headVisor_has_returned_1 = true;
   headVisor_return_value_inlined_5_1 = headVisor_return_value_1;
   r_headLower_1 = headVisor_return_value_inlined_5_1;
   p_headVisor_1 = (p_headLower_1 + vec3(0, .01, 0)) * vec3(.95);
   h_headVisor_1 = 1.;
   bump_headVisor_1 = 0.;
   headVisor_has_returned_1 = false;
   bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
   p_sdBox_1 = p_headVisor_1;
   b_sdBox_1 = vec3(1, h_headVisor_1, 2);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
   result_headVisor_1.d = sdBox_return_value_inlined_3_1;
   p_headSphere_1 = p_headVisor_1;
   headSphere_has_returned_1 = false;
   headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
   headSphere_has_returned_1 = true;
   headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
   result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
   result_headVisor_1.mat = vec3(.05);
   result_headVisor_1.specPower = 30.;
   headVisor_return_value_1 = result_headVisor_1;
   headVisor_has_returned_1 = true;
   headVisor_return_value_inlined_6_1 = headVisor_return_value_1;
   r_headLower_1.d = min(r_headLower_1.d, max(max(headVisor_return_value_inlined_6_1.d, p_headLower_1.y - .35), p_headLower_1.y * .625 - p_headLower_1.z - .66));
   a_rot_1 = .075 * (gunsUp_1 - 1.) * sign(p_headLower_1.x);
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_7_1 = rot_return_value_1;
   p_headLower_1.xy *= rot_return_value_inlined_7_1;
   p_headLower_1.x = abs(p_headLower_1.x) - 1.33;
   p_headLower_1.y -= .1 - p_headLower_1.x * .1;
   p_sdBox_1 = p_headLower_1;
   b_sdBox_1 = vec3(.4, .06 * (1. - p_headLower_1.x), .3 - p_headLower_1.x * .2);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_8_1 = sdBox_return_value_1;
   r_headLower_1.d = min(r_headLower_1.d, sdBox_return_value_inlined_8_1);
   p_headLower_1 = op_headLower_1;
   p_headLower_1.y = abs(abs(p_headLower_1.y + .147) - .0556) - .0278;
   p_sdBox_1 = p_headLower_1 + vec3(0, 0, 1.5);
   b_sdBox_1 = vec3(mix(.25, .55, - op_headLower_1.y), .015, .1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_9_1 = sdBox_return_value_1;
   r_headLower_1.d = max(r_headLower_1.d, - sdBox_return_value_inlined_9_1);
   p_headLower_1 = op_headLower_1;
   p_headLower_1.y = abs(p_headLower_1.y + .16) - .06;
   p_headLower_1.z -= - 1.1;
   p_sdCappedCylinder_1 = p_headLower_1.xzy;
   h_sdCappedCylinder_1 = 1.;
   r_sdCappedCylinder_1 = .03;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_10_1 = sdCappedCylinder_return_value_1;
   p_sdCappedCylinder_1 = p_headLower_1.xzy;
   h_sdCappedCylinder_1 = .55;
   r_sdCappedCylinder_1 = 1.;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_11_1 = sdCappedCylinder_return_value_1;
   r_headLower_1.d = max(r_headLower_1.d, - max(max(sdCappedCylinder_return_value_inlined_10_1, - sdCappedCylinder_return_value_inlined_11_1), p_headLower_1.z + .2));
   mat_setBodyMaterial_1 = r_headLower_1;
   mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
   mat_setBodyMaterial_1.specPower = 30.;
   r_headLower_1 = mat_setBodyMaterial_1;
   headLower_return_value_1 = r_headLower_1;
   headLower_has_returned_1 = true;
   headLower_return_value_inlined_63_1 = headLower_return_value_1;
   a_minResult_1 = r_ed209_1;
   b_minResult_1 = headLower_return_value_inlined_63_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_64_1 = minResult_return_value_1;
   p_headVisor_1 = p_ed209_1;
   h_headVisor_1 = .8;
   bump_headVisor_1 = 1.;
   headVisor_has_returned_1 = false;
   bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
   p_sdBox_1 = p_headVisor_1;
   b_sdBox_1 = vec3(1, h_headVisor_1, 2);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
   result_headVisor_1.d = sdBox_return_value_inlined_3_1;
   p_headSphere_1 = p_headVisor_1;
   headSphere_has_returned_1 = false;
   headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
   headSphere_has_returned_1 = true;
   headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
   result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
   result_headVisor_1.mat = vec3(.05);
   result_headVisor_1.specPower = 30.;
   headVisor_return_value_1 = result_headVisor_1;
   headVisor_has_returned_1 = true;
   headVisor_return_value_inlined_65_1 = headVisor_return_value_1;
   a_minResult_1 = minResult_return_value_inlined_64_1;
   b_minResult_1 = headVisor_return_value_inlined_65_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_66_1 = minResult_return_value_1;
   p_arms_1 = p_ed209_1;
   arms_has_returned_1 = false;
   mat_setBodyMaterial_1 = r_arms_1;
   mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
   mat_setBodyMaterial_1.specPower = 30.;
   r_arms_1 = mat_setBodyMaterial_1;
   p_arms_1.x = abs(p_arms_1.x);
   p_arms_1.yz += vec2(.24, 0);
   a_rot_1 = .15 * (gunsUp_1 - 1.);
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_23_1 = rot_return_value_1;
   p_arms_1.xy *= rot_return_value_inlined_23_1;
   p_sdCapsule_1 = p_arms_1;
   a_sdCapsule_1 = vec3(0);
   b_sdCapsule_1 = vec3(1.5, 0, 0);
   r_sdCapsule_1 = .2;
   sdCapsule_has_returned_1 = false;
   pa_sdCapsule_1 = p_sdCapsule_1 - a_sdCapsule_1;
   ba_sdCapsule_1 = b_sdCapsule_1 - a_sdCapsule_1;
   sdCapsule_return_value_1 = length(pa_sdCapsule_1 - ba_sdCapsule_1 * clamp(dot(pa_sdCapsule_1, ba_sdCapsule_1) / dot(ba_sdCapsule_1, ba_sdCapsule_1), 0., 1.)) - r_sdCapsule_1;
   sdCapsule_has_returned_1 = true;
   sdCapsule_return_value_inlined_24_1 = sdCapsule_return_value_1;
   p_sdCapsule_1 = p_arms_1;
   a_sdCapsule_1 = vec3(1.5, 0, 0);
   b_sdCapsule_1 = wrist_arms_1;
   r_sdCapsule_1 = .2;
   sdCapsule_has_returned_1 = false;
   pa_sdCapsule_1 = p_sdCapsule_1 - a_sdCapsule_1;
   ba_sdCapsule_1 = b_sdCapsule_1 - a_sdCapsule_1;
   sdCapsule_return_value_1 = length(pa_sdCapsule_1 - ba_sdCapsule_1 * clamp(dot(pa_sdCapsule_1, ba_sdCapsule_1) / dot(ba_sdCapsule_1, ba_sdCapsule_1), 0., 1.)) - r_sdCapsule_1;
   sdCapsule_has_returned_1 = true;
   sdCapsule_return_value_inlined_25_1 = sdCapsule_return_value_1;
   r_arms_1.d = min(sdCapsule_return_value_inlined_24_1, sdCapsule_return_value_inlined_25_1);
   p_arms_1 -= wrist_arms_1;
   p_arms_1.z -= gunsForward_1 * .15;
   p_gunPod_1 = p_arms_1;
   gunPod_has_returned_1 = false;
   mat_setBodyMaterial_1 = r_gunPod_1;
   mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
   mat_setBodyMaterial_1.specPower = 30.;
   r_gunPod_1 = mat_setBodyMaterial_1;
   p_gunPod_1.yz += vec2(.1, .45);
   pp_gunPod_1 = p_gunPod_1;
   pp_gunPod_1.z = abs(pp_gunPod_1.z) - .5;
   p_sdCappedCone_1 = pp_gunPod_1;
   a_sdCappedCone_1 = vec3(0);
   b_sdCappedCone_1 = vec3(0, 0, - .1);
   ra_sdCappedCone_1 = .35 - .1;
   rb_sdCappedCone_1 = .35;
   sdCappedCone_has_returned_1 = false;
   rba_sdCappedCone_1 = rb_sdCappedCone_1 - ra_sdCappedCone_1;
   baba_sdCappedCone_1 = dot(b_sdCappedCone_1 - a_sdCappedCone_1, b_sdCappedCone_1 - a_sdCappedCone_1);
   papa_sdCappedCone_1 = dot(p_sdCappedCone_1 - a_sdCappedCone_1, p_sdCappedCone_1 - a_sdCappedCone_1);
   paba_sdCappedCone_1 = dot(p_sdCappedCone_1 - a_sdCappedCone_1, b_sdCappedCone_1 - a_sdCappedCone_1) / baba_sdCappedCone_1;
   x_sdCappedCone_1 = sqrt(papa_sdCappedCone_1 - paba_sdCappedCone_1 * paba_sdCappedCone_1 * baba_sdCappedCone_1);
   cax_sdCappedCone_1 = max(0., x_sdCappedCone_1 - ((paba_sdCappedCone_1 < .5) ? ra_sdCappedCone_1 : rb_sdCappedCone_1));
   cay_sdCappedCone_1 = abs(paba_sdCappedCone_1 - .5) - .5;
   f_sdCappedCone_1 = clamp((rba_sdCappedCone_1 * (x_sdCappedCone_1 - ra_sdCappedCone_1) + paba_sdCappedCone_1 * baba_sdCappedCone_1) / (rba_sdCappedCone_1 * rba_sdCappedCone_1 + baba_sdCappedCone_1), 0., 1.);
   cbx_sdCappedCone_1 = x_sdCappedCone_1 - ra_sdCappedCone_1 - f_sdCappedCone_1 * rba_sdCappedCone_1;
   cby_sdCappedCone_1 = paba_sdCappedCone_1 - f_sdCappedCone_1;
   sdCappedCone_return_value_1 = ((cbx_sdCappedCone_1 < 0. && cay_sdCappedCone_1 < 0.) ? - 1. : 1.) * sqrt(min(cax_sdCappedCone_1 * cax_sdCappedCone_1 + cay_sdCappedCone_1 * cay_sdCappedCone_1 * baba_sdCappedCone_1, cbx_sdCappedCone_1 * cbx_sdCappedCone_1 + cby_sdCappedCone_1 * cby_sdCappedCone_1 * baba_sdCappedCone_1));
   sdCappedCone_has_returned_1 = true;
   sdCappedCone_return_value_inlined_12_1 = sdCappedCone_return_value_1;
   r_gunPod_1.d = sdCappedCone_return_value_inlined_12_1;
   p_sdCappedCylinder_1 = p_gunPod_1;
   h_sdCappedCylinder_1 = .35;
   r_sdCappedCylinder_1 = .4;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_13_1 = sdCappedCylinder_return_value_1;
   r_gunPod_1.d = min(r_gunPod_1.d, sdCappedCylinder_return_value_inlined_13_1);
   pp_gunPod_1 = vec3(p_gunPod_1.x, .28 - p_gunPod_1.y, p_gunPod_1.z);
   p_sdTriPrism_1 = pp_gunPod_1;
   h_sdTriPrism_1 = vec2(.1, .5);
   sdTriPrism_has_returned_1 = false;
   q_sdTriPrism_1 = abs(p_sdTriPrism_1);
   sdTriPrism_return_value_1 = max(q_sdTriPrism_1.z - h_sdTriPrism_1.y, max(q_sdTriPrism_1.x * .866025 + p_sdTriPrism_1.y * .5, - p_sdTriPrism_1.y) - h_sdTriPrism_1.x * .5);
   sdTriPrism_has_returned_1 = true;
   sdTriPrism_return_value_inlined_14_1 = sdTriPrism_return_value_1;
   r_gunPod_1.d = min(r_gunPod_1.d, sdTriPrism_return_value_inlined_14_1);
   pp_gunPod_1 = p_gunPod_1;
   pp_gunPod_1.x = abs(p_gunPod_1.x);
   a_rot_1 = .78525;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_15_1 = rot_return_value_1;
   pp_gunPod_1.xy *= rot_return_value_inlined_15_1;
   bump_gunPod_1 = sign(sin(pp_gunPod_1.z * 33.3)) * .003;
   p_sdBox_1 = pp_gunPod_1;
   b_sdBox_1 = vec3(.1 - bump_gunPod_1, .38 - bump_gunPod_1, .34);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_16_1 = sdBox_return_value_1;
   d_gunPod_1 = sdBox_return_value_inlined_16_1 - .02;
   pp_gunPod_1 = p_gunPod_1 - vec3(0, 0, - .6);
   pp_gunPod_1.x = abs(pp_gunPod_1.x) - .1;
   p_sdCappedCylinder_1 = pp_gunPod_1;
   h_sdCappedCylinder_1 = .06;
   r_sdCappedCylinder_1 = .15;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_17_1 = sdCappedCylinder_return_value_1;
   p_sdCappedCylinder_1 = pp_gunPod_1 + vec3(0, .12, - .05);
   h_sdCappedCylinder_1 = .06;
   r_sdCappedCylinder_1 = .05;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_18_1 = sdCappedCylinder_return_value_1;
   p_sdBox_1 = p_gunPod_1 + vec3(0, 0, .54);
   b_sdBox_1 = vec3(.1, .06, .04);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_19_1 = sdBox_return_value_1;
   d_gunPod_1 = min(min(min(d_gunPod_1, sdCappedCylinder_return_value_inlined_17_1), sdCappedCylinder_return_value_inlined_18_1), sdBox_return_value_inlined_19_1);
   if(d_gunPod_1 < r_gunPod_1.d)
    {
     p_sdCappedCylinder_1 = pp_gunPod_1 + vec3(0, 0, .1);
     h_sdCappedCylinder_1 = .03;
     r_sdCappedCylinder_1 = .2;
     sdCappedCylinder_has_returned_1 = false;
     d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
     sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
     sdCappedCylinder_has_returned_1 = true;
     sdCappedCylinder_return_value_inlined_20_1 = sdCappedCylinder_return_value_1;
     d_gunPod_1 = max(d_gunPod_1, - sdCappedCylinder_return_value_inlined_20_1);
     r_gunPod_1.d = d_gunPod_1;
     r_gunPod_1.mat = vec3(.02);
    }
   fireShock_has_returned_1 = false;
   fireShock_return_value_1 = abs(sin(edShoot_1 * 78.5375));
   fireShock_has_returned_1 = true;
   fireShock_return_value_inlined_21_1 = fireShock_return_value_1;
   fs_gunPod_1 = fireShock_return_value_inlined_21_1;
   if(fs_gunPod_1 > .5)
    {
     p_sdCappedCylinder_1 = pp_gunPod_1;
     h_sdCappedCylinder_1 = .01 + pp_gunPod_1.z * .05;
     r_sdCappedCylinder_1 = fract(fs_gunPod_1 * 3322.423) * .5 + .9;
     sdCappedCylinder_has_returned_1 = false;
     d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
     sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
     sdCappedCylinder_has_returned_1 = true;
     sdCappedCylinder_return_value_inlined_22_1 = sdCappedCylinder_return_value_1;
     d_gunPod_1 = sdCappedCylinder_return_value_inlined_22_1;
     if(d_gunPod_1 < r_gunPod_1.d)
      {
       r_gunPod_1.d = d_gunPod_1;
       r_gunPod_1.mat = vec3(1);
       glow_1 += .1 / (.01 + d_gunPod_1 * d_gunPod_1 * 4e2);
      }
    }
   gunPod_return_value_1 = r_gunPod_1;
   gunPod_has_returned_1 = true;
   gunPod_return_value_inlined_26_1 = gunPod_return_value_1;
   a_minResult_1 = r_arms_1;
   b_minResult_1 = gunPod_return_value_inlined_26_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_27_1 = minResult_return_value_1;
   arms_return_value_1 = minResult_return_value_inlined_27_1;
   arms_has_returned_1 = true;
   arms_return_value_inlined_67_1 = arms_return_value_1;
   a_minResult_1 = minResult_return_value_inlined_66_1;
   b_minResult_1 = arms_return_value_inlined_67_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_68_1 = minResult_return_value_1;
   ed209_return_value_1 = minResult_return_value_inlined_68_1;
   ed209_has_returned_1 = true;
   ed209_return_value_inlined_79_1 = ed209_return_value_1;
   a_minResult_1 = room_return_value_inlined_78_1;
   b_minResult_1 = ed209_return_value_inlined_79_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_80_1 = minResult_return_value_1;
   r_map_1 = minResult_return_value_inlined_80_1;
   gnd_map_1 = length(p_map_1.y + 3.);
   if(gnd_map_1 < r_map_1.d)
    {
     r_map_1.d = gnd_map_1;
     r_map_1.mat = vec3(.1);
    }
   map_return_value_1 = r_map_1;
   map_has_returned_1 = true;
   map_return_value_inlined_84_1 = map_return_value_1;
   p_map_1 = p_calcNormal_1 + e_calcNormal_1.xxx;
   map_has_returned_1 = false;
   p_room_1 = p_map_1;
   room_has_returned_1 = false;
   r_room_1.mat = vec3(.4);
   r_room_1.specPower = 1e7;
   xy_room_1 = p_room_1.xy - vec2(0, 2);
   p_room_1.x = abs(p_room_1.x);
   p_room_1.yz += vec2(.5, - 3.4);
   p_sdBox_1 = p_room_1;
   b_sdBox_1 = frameInner_room_1 + vec3(0, 0, 1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_69_1 = sdBox_return_value_1;
   doorHole_room_1 = sdBox_return_value_inlined_69_1;
   backWall_room_1 = length(p_room_1.z - 8.);
   r_room_1.d = min(backWall_room_1, max(length(p_room_1.z), - doorHole_room_1 + .1));
   if(r_room_1.d == backWall_room_1)
    {
     p_sdOctogon_1 = xy_room_1;
     r_sdOctogon_1 = 2.6;
     sdOctogon_has_returned_1 = false;
     p_sdOctogon_1 = abs(p_sdOctogon_1);
     p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
     p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
     p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
     sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
     sdOctogon_has_returned_1 = true;
     sdOctogon_return_value_inlined_70_1 = sdOctogon_return_value_1;
     p_sdOctogon_1 = xy_room_1;
     r_sdOctogon_1 = 1.9;
     sdOctogon_has_returned_1 = false;
     p_sdOctogon_1 = abs(p_sdOctogon_1);
     p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
     p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
     p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
     sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
     sdOctogon_has_returned_1 = true;
     sdOctogon_return_value_inlined_71_1 = sdOctogon_return_value_1;
     ocp_room_1 = min(abs(sdOctogon_return_value_inlined_70_1), abs(sdOctogon_return_value_inlined_71_1));
     p_sdOctogon_1 = xy_room_1;
     r_sdOctogon_1 = 1.2;
     sdOctogon_has_returned_1 = false;
     p_sdOctogon_1 = abs(p_sdOctogon_1);
     p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
     p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
     p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
     sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
     sdOctogon_has_returned_1 = true;
     sdOctogon_return_value_inlined_72_1 = sdOctogon_return_value_1;
     ocp_room_1 = min(max(ocp_room_1, min(.7 - abs(xy_room_1.x + 1.2), - xy_room_1.y)), max(abs(sdOctogon_return_value_inlined_72_1), min(xy_room_1.x, .7 - abs(xy_room_1.y))));
     if(ocp_room_1 < .3)
      {
       r_room_1.mat = vec3(.39, .57, .71);
      }
    }
   p_sdBox_1 = p_room_1;
   b_sdBox_1 = frameInner_room_1 + vec3(.4, .4, .1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_73_1 = sdBox_return_value_1;
   doorFrame_room_1 = max(sdBox_return_value_inlined_73_1, - doorHole_room_1);
   doorWidth_room_1 = frameInner_room_1.x * .5;
   p_room_1.x -= frameInner_room_1.x;
   a_rot_1 = doorOpen_1 * 2.1;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_74_1 = rot_return_value_1;
   p_room_1.xz *= rot_return_value_inlined_74_1;
   p_room_1.x += doorWidth_room_1;
   p_sdBox_1 = p_room_1;
   b_sdBox_1 = vec3(doorWidth_room_1, frameInner_room_1.yz);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_75_1 = sdBox_return_value_1;
   door_room_1 = sdBox_return_value_inlined_75_1;
   p_room_1 = abs(p_room_1) - vec3(doorWidth_room_1 * .5, 1.1, .14);
   p_sdBox_1 = p_room_1;
   b_sdBox_1 = vec3(.45, .9, .1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_76_1 = sdBox_return_value_1;
   p_sdBox_1 = p_room_1;
   b_sdBox_1 = vec3(.35, .8, 1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_77_1 = sdBox_return_value_1;
   d_room_1 = min(doorFrame_room_1, max(door_room_1, - max(sdBox_return_value_inlined_76_1, - sdBox_return_value_inlined_77_1)));
   if(d_room_1 < r_room_1.d)
    {
     r_room_1.d = d_room_1;
     r_room_1.mat = vec3(.02, .02, .024);
     r_room_1.specPower = 10.;
    }
   room_return_value_1 = r_room_1;
   room_has_returned_1 = true;
   room_return_value_inlined_78_1 = room_return_value_1;
   p_ed209_1 = p_map_1;
   ed209_has_returned_1 = false;
   f_legWalkAngle_1 = 2.;
   legWalkAngle_has_returned_1 = false;
   legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
   legWalkAngle_has_returned_1 = true;
   legWalkAngle_return_value_inlined_54_1 = legWalkAngle_return_value_1;
   edZ_has_returned_1 = false;
   edZ_return_value_1 = mix(5., - 2., edWalk_1);
   edZ_has_returned_1 = true;
   edZ_return_value_inlined_55_1 = edZ_return_value_1;
   p_ed209_1.yz += vec2(legWalkAngle_return_value_inlined_54_1 * .2 + .1, - edZ_return_value_inlined_55_1);
   p_legs_1 = p_ed209_1;
   legs_has_returned_1 = false;
   mat_setBodyMaterial_1 = r_legs_1;
   mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
   mat_setBodyMaterial_1.specPower = 30.;
   r_legs_1 = mat_setBodyMaterial_1;
   f_legWalkAngle_1 = 1.;
   legWalkAngle_has_returned_1 = false;
   legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
   legWalkAngle_has_returned_1 = true;
   legWalkAngle_return_value_inlined_45_1 = legWalkAngle_return_value_1;
   legAngle_legs_1 = legWalkAngle_return_value_inlined_45_1;
   p_legs_1.z += .27;
   a_rot_1 = legAngle_legs_1 * sign(p_legs_1.x);
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_46_1 = rot_return_value_1;
   p_legs_1.yz *= rot_return_value_inlined_46_1;
   p_legs_1.z -= .27;
   p_legs_1.y += .65;
   a_rot_1 = - .2;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_47_1 = rot_return_value_1;
   p_legs_1.yz *= rot_return_value_inlined_47_1;
   a_rot_1 = legAngle_legs_1 * .3;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_48_1 = rot_return_value_1;
   p_legs_1.xy *= rot_return_value_inlined_48_1;
   pp_legs_1 = p_legs_1;
   pp_legs_1.x = abs(pp_legs_1.x);
   pp_legs_1.y += .48;
   a_rot_1 = - .58525;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_49_1 = rot_return_value_1;
   pp_legs_1.yz *= rot_return_value_inlined_49_1;
   pp_legs_1.x -= .98;
   cp_legs_1 = pp_legs_1;
   p_legs_1 = pp_legs_1;
   pp_legs_1.xz = abs(pp_legs_1.xz) - vec2(.12, .25);
   p_legs_1.y += .68;
   p_legs_1.xy = abs(p_legs_1.xy) - .12;
   p_sdBox_1 = p_legs_1;
   b_sdBox_1 = vec3(.07, .05, 1.2);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_50_1 = sdBox_return_value_1;
   silver_legs_1 = sdBox_return_value_inlined_50_1;
   cp_legs_1 -= vec3(0, - .7, 0);
   p_sdBox_1 = cp_legs_1 - vec3(0, 0, 1.15);
   b_sdBox_1 = vec3(.17, .17, .07);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_51_1 = sdBox_return_value_1;
   r_legs_1.d = sdBox_return_value_inlined_51_1 - .04;
   cp_legs_1.z ++;
   p_sdChamferedCube_1 = cp_legs_1.xzy;
   r_sdChamferedCube_1 = vec2(.28 - sign(abs(cp_legs_1.z) - .3) * .01, .5).xyx;
   c_sdChamferedCube_1 = .18;
   sdChamferedCube_has_returned_1 = false;
   p_sdBox_1 = p_sdChamferedCube_1;
   b_sdBox_1 = r_sdChamferedCube_1;
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_0_1 = sdBox_return_value_1;
   cube_sdChamferedCube_1 = sdBox_return_value_inlined_0_1;
   a_rot_1 = .78525;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_1_1 = rot_return_value_1;
   p_sdChamferedCube_1.xz *= rot_return_value_inlined_1_1;
   r_sdChamferedCube_1.xz *= - c_sdChamferedCube_1 / 1.41 + 1.41;
   p_sdBox_1 = p_sdChamferedCube_1;
   b_sdBox_1 = r_sdChamferedCube_1;
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_2_1 = sdBox_return_value_1;
   sdChamferedCube_return_value_1 = max(cube_sdChamferedCube_1, sdBox_return_value_inlined_2_1);
   sdChamferedCube_has_returned_1 = true;
   sdChamferedCube_return_value_inlined_52_1 = sdChamferedCube_return_value_1;
   r_legs_1.d = min(r_legs_1.d, sdChamferedCube_return_value_inlined_52_1);
   p_foot_1 = cp_legs_1;
   foot_has_returned_1 = false;
   p_foot_1.z += .8;
   a_rot_1 = .86;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_29_1 = rot_return_value_1;
   p_foot_1.yz *= rot_return_value_inlined_29_1;
   p_toe_1 = p_foot_1;
   toe_has_returned_1 = false;
   p_toe_1.yz += vec2(.1, .32);
   p_sdBox_1 = p_toe_1;
   b_sdBox_1 = vec3(.3 + .2 * (p_toe_1.z - .18) - p_toe_1.y * .228, .3 + .2 * cos((p_toe_1.z - .18) * 3.69), .35);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_28_1 = sdBox_return_value_1;
   toe_return_value_1 = max(sdBox_return_value_inlined_28_1, .1 - p_toe_1.y);
   toe_has_returned_1 = true;
   toe_return_value_inlined_30_1 = toe_return_value_1;
   d_foot_1 = toe_return_value_inlined_30_1;
   a_rot_1 = 1.57;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_31_1 = rot_return_value_1;
   p_foot_1.xz *= rot_return_value_inlined_31_1;
   p_foot_1.x -= .43;
   p_foot_1.z = .25 - abs(p_foot_1.z);
   p_toe_1 = p_foot_1;
   toe_has_returned_1 = false;
   p_toe_1.yz += vec2(.1, .32);
   p_sdBox_1 = p_toe_1;
   b_sdBox_1 = vec3(.3 + .2 * (p_toe_1.z - .18) - p_toe_1.y * .228, .3 + .2 * cos((p_toe_1.z - .18) * 3.69), .35);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_28_1 = sdBox_return_value_1;
   toe_return_value_1 = max(sdBox_return_value_inlined_28_1, .1 - p_toe_1.y);
   toe_has_returned_1 = true;
   toe_return_value_inlined_32_1 = toe_return_value_1;
   foot_return_value_1 = min(d_foot_1, toe_return_value_inlined_32_1);
   foot_has_returned_1 = true;
   foot_return_value_inlined_53_1 = foot_return_value_1;
   r_legs_1.d = min(r_legs_1.d, foot_return_value_inlined_53_1);
   if(silver_legs_1 < r_legs_1.d)
    {
     r_legs_1.d = silver_legs_1;
     r_legs_1.mat = vec3(.8);
    }
   legs_return_value_1 = r_legs_1;
   legs_has_returned_1 = true;
   legs_return_value_inlined_56_1 = legs_return_value_1;
   r_ed209_1 = legs_return_value_inlined_56_1;
   f_ed209_1 = min(stretch_1 * 2., 1.);
   slide_ed209_1 = f_ed209_1 < .5 ? smoothstep(0., .5, f_ed209_1) : (1. - smoothstep(.5, 1., f_ed209_1) * .2);
   p_ed209_1.yz -= slide_ed209_1 * .5;
   gunsUp_1 = smoothstep(0., 1., clamp((stretch_1 - .66) * 6., 0., 1.));
   fireShock_has_returned_1 = false;
   fireShock_return_value_1 = abs(sin(edShoot_1 * 78.5375));
   fireShock_has_returned_1 = true;
   fireShock_return_value_inlined_57_1 = fireShock_return_value_1;
   gunsForward_1 = smoothstep(0., 1., clamp((stretch_1 - .83) * 6., 0., 1.)) + fireShock_return_value_inlined_57_1 * .5;
   p_waist_1 = p_ed209_1;
   waist_has_returned_1 = false;
   mat_setBodyMaterial_1 = r_waist_1;
   mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
   mat_setBodyMaterial_1.specPower = 30.;
   r_waist_1 = mat_setBodyMaterial_1;
   p_waist_1.y += .65;
   a_rot_1 = - .2;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_33_1 = rot_return_value_1;
   p_waist_1.yz *= rot_return_value_inlined_33_1;
   f_legWalkAngle_1 = 1.;
   legWalkAngle_has_returned_1 = false;
   legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
   legWalkAngle_has_returned_1 = true;
   legWalkAngle_return_value_inlined_34_1 = legWalkAngle_return_value_1;
   legAngle_waist_1 = legWalkAngle_return_value_inlined_34_1;
   a_rot_1 = legAngle_waist_1 * .3;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_35_1 = rot_return_value_1;
   p_waist_1.xy *= rot_return_value_inlined_35_1;
   pp_waist_1 = p_waist_1;
   pp_waist_1.y += .3;
   p_sdCappedCylinder_1 = pp_waist_1.zyx;
   h_sdCappedCylinder_1 = .5;
   r_sdCappedCylinder_1 = .5;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_36_1 = sdCappedCylinder_return_value_1;
   r_waist_1.d = max(sdCappedCylinder_return_value_inlined_36_1, p_waist_1.y + .15);
   bump_waist_1 = .5 - abs(sin(p_waist_1.y * 40.)) * .03;
   p_sdBox_1 = p_waist_1;
   b_sdBox_1 = vec3(bump_waist_1, .15, bump_waist_1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_37_1 = sdBox_return_value_1;
   d_waist_1 = sdBox_return_value_inlined_37_1;
   bump_waist_1 = .3 - abs(sin(p_waist_1.x * 40.)) * .03;
   pp_waist_1.y += .18;
   p_sdCappedCylinder_1 = pp_waist_1.zyx;
   h_sdCappedCylinder_1 = bump_waist_1;
   r_sdCappedCylinder_1 = .75;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_38_1 = sdCappedCylinder_return_value_1;
   d_waist_1 = min(d_waist_1, sdCappedCylinder_return_value_inlined_38_1);
   pp_waist_1.x = abs(pp_waist_1.x);
   a_rot_1 = - .58525 + legAngle_waist_1 * sign(p_waist_1.x);
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_39_1 = rot_return_value_1;
   pp_waist_1.yz *= rot_return_value_inlined_39_1;
   pp_waist_1.x -= .98;
   p_sdCappedCylinder_1 = pp_waist_1.zyx;
   h_sdCappedCylinder_1 = .4;
   r_sdCappedCylinder_1 = .24;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_40_1 = sdCappedCylinder_return_value_1;
   r_waist_1.d = min(r_waist_1.d, max(sdCappedCylinder_return_value_inlined_40_1, - pp_waist_1.y));
   p_sdBox_1 = pp_waist_1;
   b_sdBox_1 = vec3(.24, .2, .14 + .2 * pp_waist_1.y);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_41_1 = sdBox_return_value_1;
   r_waist_1.d = min(r_waist_1.d, sdBox_return_value_inlined_41_1);
   p_waist_1 = pp_waist_1;
   pp_waist_1.xz = abs(pp_waist_1.xz) - vec2(.12, .25);
   p_sdCappedCylinder_1 = pp_waist_1.xzy;
   h_sdCappedCylinder_1 = .1;
   r_sdCappedCylinder_1 = .325;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_42_1 = sdCappedCylinder_return_value_1;
   p_sdCappedCylinder_1 = pp_waist_1.xzy;
   h_sdCappedCylinder_1 = .05;
   r_sdCappedCylinder_1 = .5;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_43_1 = sdCappedCylinder_return_value_1;
   r_waist_1.d = min(r_waist_1.d, max(min(sdCappedCylinder_return_value_inlined_42_1, sdCappedCylinder_return_value_inlined_43_1), pp_waist_1.y));
   p_waist_1.y += .68;
   p_sdBox_1 = p_waist_1;
   b_sdBox_1 = vec3(sign(abs(p_waist_1.y) - .04) * .005 + .26, .2, .34);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_44_1 = sdBox_return_value_1;
   r_waist_1.d = min(r_waist_1.d, sdBox_return_value_inlined_44_1);
   if(d_waist_1 < r_waist_1.d)
    {
     r_waist_1.d = d_waist_1;
     r_waist_1.mat = vec3(.02);
    }
   waist_return_value_1 = r_waist_1;
   waist_has_returned_1 = true;
   waist_return_value_inlined_58_1 = waist_return_value_1;
   a_minResult_1 = r_ed209_1;
   b_minResult_1 = waist_return_value_inlined_58_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_59_1 = minResult_return_value_1;
   r_ed209_1 = minResult_return_value_inlined_59_1;
   f_legWalkAngle_1 = 2.;
   legWalkAngle_has_returned_1 = false;
   legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
   legWalkAngle_has_returned_1 = true;
   legWalkAngle_return_value_inlined_60_1 = legWalkAngle_return_value_1;
   a_rot_1 = .1 * (- edDown_1 + legWalkAngle_return_value_inlined_60_1 + smoothstep(0., 1., clamp((stretch_1 - .5) * 6., 0., 1.)) - 1.);
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_61_1 = rot_return_value_1;
   p_ed209_1.yz *= rot_return_value_inlined_61_1;
   a_rot_1 = edTwist_1 * .2;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_62_1 = rot_return_value_1;
   p_ed209_1.xz *= rot_return_value_inlined_62_1;
   p_headLower_1 = p_ed209_1;
   headLower_has_returned_1 = false;
   op_headLower_1 = p_headLower_1;
   p_headVisor_1 = p_headLower_1 * vec3(.95, - 1.4, .95);
   h_headVisor_1 = 1.;
   bump_headVisor_1 = 0.;
   headVisor_has_returned_1 = false;
   bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
   p_sdBox_1 = p_headVisor_1;
   b_sdBox_1 = vec3(1, h_headVisor_1, 2);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
   result_headVisor_1.d = sdBox_return_value_inlined_3_1;
   p_headSphere_1 = p_headVisor_1;
   headSphere_has_returned_1 = false;
   headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
   headSphere_has_returned_1 = true;
   headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
   result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
   result_headVisor_1.mat = vec3(.05);
   result_headVisor_1.specPower = 30.;
   headVisor_return_value_1 = result_headVisor_1;
   headVisor_has_returned_1 = true;
   headVisor_return_value_inlined_5_1 = headVisor_return_value_1;
   r_headLower_1 = headVisor_return_value_inlined_5_1;
   p_headVisor_1 = (p_headLower_1 + vec3(0, .01, 0)) * vec3(.95);
   h_headVisor_1 = 1.;
   bump_headVisor_1 = 0.;
   headVisor_has_returned_1 = false;
   bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
   p_sdBox_1 = p_headVisor_1;
   b_sdBox_1 = vec3(1, h_headVisor_1, 2);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
   result_headVisor_1.d = sdBox_return_value_inlined_3_1;
   p_headSphere_1 = p_headVisor_1;
   headSphere_has_returned_1 = false;
   headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
   headSphere_has_returned_1 = true;
   headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
   result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
   result_headVisor_1.mat = vec3(.05);
   result_headVisor_1.specPower = 30.;
   headVisor_return_value_1 = result_headVisor_1;
   headVisor_has_returned_1 = true;
   headVisor_return_value_inlined_6_1 = headVisor_return_value_1;
   r_headLower_1.d = min(r_headLower_1.d, max(max(headVisor_return_value_inlined_6_1.d, p_headLower_1.y - .35), p_headLower_1.y * .625 - p_headLower_1.z - .66));
   a_rot_1 = .075 * (gunsUp_1 - 1.) * sign(p_headLower_1.x);
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_7_1 = rot_return_value_1;
   p_headLower_1.xy *= rot_return_value_inlined_7_1;
   p_headLower_1.x = abs(p_headLower_1.x) - 1.33;
   p_headLower_1.y -= .1 - p_headLower_1.x * .1;
   p_sdBox_1 = p_headLower_1;
   b_sdBox_1 = vec3(.4, .06 * (1. - p_headLower_1.x), .3 - p_headLower_1.x * .2);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_8_1 = sdBox_return_value_1;
   r_headLower_1.d = min(r_headLower_1.d, sdBox_return_value_inlined_8_1);
   p_headLower_1 = op_headLower_1;
   p_headLower_1.y = abs(abs(p_headLower_1.y + .147) - .0556) - .0278;
   p_sdBox_1 = p_headLower_1 + vec3(0, 0, 1.5);
   b_sdBox_1 = vec3(mix(.25, .55, - op_headLower_1.y), .015, .1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_9_1 = sdBox_return_value_1;
   r_headLower_1.d = max(r_headLower_1.d, - sdBox_return_value_inlined_9_1);
   p_headLower_1 = op_headLower_1;
   p_headLower_1.y = abs(p_headLower_1.y + .16) - .06;
   p_headLower_1.z -= - 1.1;
   p_sdCappedCylinder_1 = p_headLower_1.xzy;
   h_sdCappedCylinder_1 = 1.;
   r_sdCappedCylinder_1 = .03;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_10_1 = sdCappedCylinder_return_value_1;
   p_sdCappedCylinder_1 = p_headLower_1.xzy;
   h_sdCappedCylinder_1 = .55;
   r_sdCappedCylinder_1 = 1.;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_11_1 = sdCappedCylinder_return_value_1;
   r_headLower_1.d = max(r_headLower_1.d, - max(max(sdCappedCylinder_return_value_inlined_10_1, - sdCappedCylinder_return_value_inlined_11_1), p_headLower_1.z + .2));
   mat_setBodyMaterial_1 = r_headLower_1;
   mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
   mat_setBodyMaterial_1.specPower = 30.;
   r_headLower_1 = mat_setBodyMaterial_1;
   headLower_return_value_1 = r_headLower_1;
   headLower_has_returned_1 = true;
   headLower_return_value_inlined_63_1 = headLower_return_value_1;
   a_minResult_1 = r_ed209_1;
   b_minResult_1 = headLower_return_value_inlined_63_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_64_1 = minResult_return_value_1;
   p_headVisor_1 = p_ed209_1;
   h_headVisor_1 = .8;
   bump_headVisor_1 = 1.;
   headVisor_has_returned_1 = false;
   bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
   p_sdBox_1 = p_headVisor_1;
   b_sdBox_1 = vec3(1, h_headVisor_1, 2);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
   result_headVisor_1.d = sdBox_return_value_inlined_3_1;
   p_headSphere_1 = p_headVisor_1;
   headSphere_has_returned_1 = false;
   headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
   headSphere_has_returned_1 = true;
   headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
   result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
   result_headVisor_1.mat = vec3(.05);
   result_headVisor_1.specPower = 30.;
   headVisor_return_value_1 = result_headVisor_1;
   headVisor_has_returned_1 = true;
   headVisor_return_value_inlined_65_1 = headVisor_return_value_1;
   a_minResult_1 = minResult_return_value_inlined_64_1;
   b_minResult_1 = headVisor_return_value_inlined_65_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_66_1 = minResult_return_value_1;
   p_arms_1 = p_ed209_1;
   arms_has_returned_1 = false;
   mat_setBodyMaterial_1 = r_arms_1;
   mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
   mat_setBodyMaterial_1.specPower = 30.;
   r_arms_1 = mat_setBodyMaterial_1;
   p_arms_1.x = abs(p_arms_1.x);
   p_arms_1.yz += vec2(.24, 0);
   a_rot_1 = .15 * (gunsUp_1 - 1.);
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_23_1 = rot_return_value_1;
   p_arms_1.xy *= rot_return_value_inlined_23_1;
   p_sdCapsule_1 = p_arms_1;
   a_sdCapsule_1 = vec3(0);
   b_sdCapsule_1 = vec3(1.5, 0, 0);
   r_sdCapsule_1 = .2;
   sdCapsule_has_returned_1 = false;
   pa_sdCapsule_1 = p_sdCapsule_1 - a_sdCapsule_1;
   ba_sdCapsule_1 = b_sdCapsule_1 - a_sdCapsule_1;
   sdCapsule_return_value_1 = length(pa_sdCapsule_1 - ba_sdCapsule_1 * clamp(dot(pa_sdCapsule_1, ba_sdCapsule_1) / dot(ba_sdCapsule_1, ba_sdCapsule_1), 0., 1.)) - r_sdCapsule_1;
   sdCapsule_has_returned_1 = true;
   sdCapsule_return_value_inlined_24_1 = sdCapsule_return_value_1;
   p_sdCapsule_1 = p_arms_1;
   a_sdCapsule_1 = vec3(1.5, 0, 0);
   b_sdCapsule_1 = wrist_arms_1;
   r_sdCapsule_1 = .2;
   sdCapsule_has_returned_1 = false;
   pa_sdCapsule_1 = p_sdCapsule_1 - a_sdCapsule_1;
   ba_sdCapsule_1 = b_sdCapsule_1 - a_sdCapsule_1;
   sdCapsule_return_value_1 = length(pa_sdCapsule_1 - ba_sdCapsule_1 * clamp(dot(pa_sdCapsule_1, ba_sdCapsule_1) / dot(ba_sdCapsule_1, ba_sdCapsule_1), 0., 1.)) - r_sdCapsule_1;
   sdCapsule_has_returned_1 = true;
   sdCapsule_return_value_inlined_25_1 = sdCapsule_return_value_1;
   r_arms_1.d = min(sdCapsule_return_value_inlined_24_1, sdCapsule_return_value_inlined_25_1);
   p_arms_1 -= wrist_arms_1;
   p_arms_1.z -= gunsForward_1 * .15;
   p_gunPod_1 = p_arms_1;
   gunPod_has_returned_1 = false;
   mat_setBodyMaterial_1 = r_gunPod_1;
   mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
   mat_setBodyMaterial_1.specPower = 30.;
   r_gunPod_1 = mat_setBodyMaterial_1;
   p_gunPod_1.yz += vec2(.1, .45);
   pp_gunPod_1 = p_gunPod_1;
   pp_gunPod_1.z = abs(pp_gunPod_1.z) - .5;
   p_sdCappedCone_1 = pp_gunPod_1;
   a_sdCappedCone_1 = vec3(0);
   b_sdCappedCone_1 = vec3(0, 0, - .1);
   ra_sdCappedCone_1 = .35 - .1;
   rb_sdCappedCone_1 = .35;
   sdCappedCone_has_returned_1 = false;
   rba_sdCappedCone_1 = rb_sdCappedCone_1 - ra_sdCappedCone_1;
   baba_sdCappedCone_1 = dot(b_sdCappedCone_1 - a_sdCappedCone_1, b_sdCappedCone_1 - a_sdCappedCone_1);
   papa_sdCappedCone_1 = dot(p_sdCappedCone_1 - a_sdCappedCone_1, p_sdCappedCone_1 - a_sdCappedCone_1);
   paba_sdCappedCone_1 = dot(p_sdCappedCone_1 - a_sdCappedCone_1, b_sdCappedCone_1 - a_sdCappedCone_1) / baba_sdCappedCone_1;
   x_sdCappedCone_1 = sqrt(papa_sdCappedCone_1 - paba_sdCappedCone_1 * paba_sdCappedCone_1 * baba_sdCappedCone_1);
   cax_sdCappedCone_1 = max(0., x_sdCappedCone_1 - ((paba_sdCappedCone_1 < .5) ? ra_sdCappedCone_1 : rb_sdCappedCone_1));
   cay_sdCappedCone_1 = abs(paba_sdCappedCone_1 - .5) - .5;
   f_sdCappedCone_1 = clamp((rba_sdCappedCone_1 * (x_sdCappedCone_1 - ra_sdCappedCone_1) + paba_sdCappedCone_1 * baba_sdCappedCone_1) / (rba_sdCappedCone_1 * rba_sdCappedCone_1 + baba_sdCappedCone_1), 0., 1.);
   cbx_sdCappedCone_1 = x_sdCappedCone_1 - ra_sdCappedCone_1 - f_sdCappedCone_1 * rba_sdCappedCone_1;
   cby_sdCappedCone_1 = paba_sdCappedCone_1 - f_sdCappedCone_1;
   sdCappedCone_return_value_1 = ((cbx_sdCappedCone_1 < 0. && cay_sdCappedCone_1 < 0.) ? - 1. : 1.) * sqrt(min(cax_sdCappedCone_1 * cax_sdCappedCone_1 + cay_sdCappedCone_1 * cay_sdCappedCone_1 * baba_sdCappedCone_1, cbx_sdCappedCone_1 * cbx_sdCappedCone_1 + cby_sdCappedCone_1 * cby_sdCappedCone_1 * baba_sdCappedCone_1));
   sdCappedCone_has_returned_1 = true;
   sdCappedCone_return_value_inlined_12_1 = sdCappedCone_return_value_1;
   r_gunPod_1.d = sdCappedCone_return_value_inlined_12_1;
   p_sdCappedCylinder_1 = p_gunPod_1;
   h_sdCappedCylinder_1 = .35;
   r_sdCappedCylinder_1 = .4;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_13_1 = sdCappedCylinder_return_value_1;
   r_gunPod_1.d = min(r_gunPod_1.d, sdCappedCylinder_return_value_inlined_13_1);
   pp_gunPod_1 = vec3(p_gunPod_1.x, .28 - p_gunPod_1.y, p_gunPod_1.z);
   p_sdTriPrism_1 = pp_gunPod_1;
   h_sdTriPrism_1 = vec2(.1, .5);
   sdTriPrism_has_returned_1 = false;
   q_sdTriPrism_1 = abs(p_sdTriPrism_1);
   sdTriPrism_return_value_1 = max(q_sdTriPrism_1.z - h_sdTriPrism_1.y, max(q_sdTriPrism_1.x * .866025 + p_sdTriPrism_1.y * .5, - p_sdTriPrism_1.y) - h_sdTriPrism_1.x * .5);
   sdTriPrism_has_returned_1 = true;
   sdTriPrism_return_value_inlined_14_1 = sdTriPrism_return_value_1;
   r_gunPod_1.d = min(r_gunPod_1.d, sdTriPrism_return_value_inlined_14_1);
   pp_gunPod_1 = p_gunPod_1;
   pp_gunPod_1.x = abs(p_gunPod_1.x);
   a_rot_1 = .78525;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_15_1 = rot_return_value_1;
   pp_gunPod_1.xy *= rot_return_value_inlined_15_1;
   bump_gunPod_1 = sign(sin(pp_gunPod_1.z * 33.3)) * .003;
   p_sdBox_1 = pp_gunPod_1;
   b_sdBox_1 = vec3(.1 - bump_gunPod_1, .38 - bump_gunPod_1, .34);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_16_1 = sdBox_return_value_1;
   d_gunPod_1 = sdBox_return_value_inlined_16_1 - .02;
   pp_gunPod_1 = p_gunPod_1 - vec3(0, 0, - .6);
   pp_gunPod_1.x = abs(pp_gunPod_1.x) - .1;
   p_sdCappedCylinder_1 = pp_gunPod_1;
   h_sdCappedCylinder_1 = .06;
   r_sdCappedCylinder_1 = .15;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_17_1 = sdCappedCylinder_return_value_1;
   p_sdCappedCylinder_1 = pp_gunPod_1 + vec3(0, .12, - .05);
   h_sdCappedCylinder_1 = .06;
   r_sdCappedCylinder_1 = .05;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_18_1 = sdCappedCylinder_return_value_1;
   p_sdBox_1 = p_gunPod_1 + vec3(0, 0, .54);
   b_sdBox_1 = vec3(.1, .06, .04);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_19_1 = sdBox_return_value_1;
   d_gunPod_1 = min(min(min(d_gunPod_1, sdCappedCylinder_return_value_inlined_17_1), sdCappedCylinder_return_value_inlined_18_1), sdBox_return_value_inlined_19_1);
   if(d_gunPod_1 < r_gunPod_1.d)
    {
     p_sdCappedCylinder_1 = pp_gunPod_1 + vec3(0, 0, .1);
     h_sdCappedCylinder_1 = .03;
     r_sdCappedCylinder_1 = .2;
     sdCappedCylinder_has_returned_1 = false;
     d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
     sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
     sdCappedCylinder_has_returned_1 = true;
     sdCappedCylinder_return_value_inlined_20_1 = sdCappedCylinder_return_value_1;
     d_gunPod_1 = max(d_gunPod_1, - sdCappedCylinder_return_value_inlined_20_1);
     r_gunPod_1.d = d_gunPod_1;
     r_gunPod_1.mat = vec3(.02);
    }
   fireShock_has_returned_1 = false;
   fireShock_return_value_1 = abs(sin(edShoot_1 * 78.5375));
   fireShock_has_returned_1 = true;
   fireShock_return_value_inlined_21_1 = fireShock_return_value_1;
   fs_gunPod_1 = fireShock_return_value_inlined_21_1;
   if(fs_gunPod_1 > .5)
    {
     p_sdCappedCylinder_1 = pp_gunPod_1;
     h_sdCappedCylinder_1 = .01 + pp_gunPod_1.z * .05;
     r_sdCappedCylinder_1 = fract(fs_gunPod_1 * 3322.423) * .5 + .9;
     sdCappedCylinder_has_returned_1 = false;
     d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
     sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
     sdCappedCylinder_has_returned_1 = true;
     sdCappedCylinder_return_value_inlined_22_1 = sdCappedCylinder_return_value_1;
     d_gunPod_1 = sdCappedCylinder_return_value_inlined_22_1;
     if(d_gunPod_1 < r_gunPod_1.d)
      {
       r_gunPod_1.d = d_gunPod_1;
       r_gunPod_1.mat = vec3(1);
       glow_1 += .1 / (.01 + d_gunPod_1 * d_gunPod_1 * 4e2);
      }
    }
   gunPod_return_value_1 = r_gunPod_1;
   gunPod_has_returned_1 = true;
   gunPod_return_value_inlined_26_1 = gunPod_return_value_1;
   a_minResult_1 = r_arms_1;
   b_minResult_1 = gunPod_return_value_inlined_26_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_27_1 = minResult_return_value_1;
   arms_return_value_1 = minResult_return_value_inlined_27_1;
   arms_has_returned_1 = true;
   arms_return_value_inlined_67_1 = arms_return_value_1;
   a_minResult_1 = minResult_return_value_inlined_66_1;
   b_minResult_1 = arms_return_value_inlined_67_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_68_1 = minResult_return_value_1;
   ed209_return_value_1 = minResult_return_value_inlined_68_1;
   ed209_has_returned_1 = true;
   ed209_return_value_inlined_79_1 = ed209_return_value_1;
   a_minResult_1 = room_return_value_inlined_78_1;
   b_minResult_1 = ed209_return_value_inlined_79_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_80_1 = minResult_return_value_1;
   r_map_1 = minResult_return_value_inlined_80_1;
   gnd_map_1 = length(p_map_1.y + 3.);
   if(gnd_map_1 < r_map_1.d)
    {
     r_map_1.d = gnd_map_1;
     r_map_1.mat = vec3(.1);
    }
   map_return_value_1 = r_map_1;
   map_has_returned_1 = true;
   map_return_value_inlined_85_1 = map_return_value_1;
   calcNormal_return_value_1 = normalize(e_calcNormal_1.xyy * map_return_value_inlined_82_1.d + e_calcNormal_1.yyx * map_return_value_inlined_83_1.d + e_calcNormal_1.yxy * map_return_value_inlined_84_1.d + e_calcNormal_1.xxx * map_return_value_inlined_85_1.d);
   calcNormal_has_returned_1 = true;
   calcNormal_return_value_inlined_87_1 = calcNormal_return_value_1;
   n_applyLighting_1 = calcNormal_return_value_inlined_87_1;
   primary_applyLighting_1 = max(0., dot(sunDir_applyLighting_1, n_applyLighting_1));
   bounce_applyLighting_1 = max(0., dot(- sunDir_applyLighting_1, n_applyLighting_1)) * .2;
   spe_applyLighting_1 = pow(max(max(0., dot(rd_applyLighting_1, reflect(sunDir_applyLighting_1, n_applyLighting_1))), 1e-9), data_applyLighting_1.specPower) * 2.;
   fre_applyLighting_1 = smoothstep(.7, 1., 1. + dot(rd_applyLighting_1, n_applyLighting_1));
   fog_applyLighting_1 = exp(- length(p_applyLighting_1) * .05);
   p_calcShadow_1 = p_applyLighting_1;
   lightPos_calcShadow_1 = vec3(10, 10, - 10);
   calcShadow_has_returned_1 = false;
   rd_calcShadow_1 = normalize(lightPos_calcShadow_1 - p_calcShadow_1);
   res_calcShadow_1 = 1.;
   t_calcShadow_1 = .1;
   for(   i_calcShadow_1 = 0.;
 i_calcShadow_1 < 30.; i_calcShadow_1 ++)
    {
     p_map_1 = p_calcShadow_1 + rd_calcShadow_1 * t_calcShadow_1;
     map_has_returned_1 = false;
     p_room_1 = p_map_1;
     room_has_returned_1 = false;
     r_room_1.mat = vec3(.4);
     r_room_1.specPower = 1e7;
     xy_room_1 = p_room_1.xy - vec2(0, 2);
     p_room_1.x = abs(p_room_1.x);
     p_room_1.yz += vec2(.5, - 3.4);
     p_sdBox_1 = p_room_1;
     b_sdBox_1 = frameInner_room_1 + vec3(0, 0, 1);
     sdBox_has_returned_1 = false;
     q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
     sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
     sdBox_has_returned_1 = true;
     sdBox_return_value_inlined_69_1 = sdBox_return_value_1;
     doorHole_room_1 = sdBox_return_value_inlined_69_1;
     backWall_room_1 = length(p_room_1.z - 8.);
     r_room_1.d = min(backWall_room_1, max(length(p_room_1.z), - doorHole_room_1 + .1));
     if(r_room_1.d == backWall_room_1)
      {
       p_sdOctogon_1 = xy_room_1;
       r_sdOctogon_1 = 2.6;
       sdOctogon_has_returned_1 = false;
       p_sdOctogon_1 = abs(p_sdOctogon_1);
       p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
       p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
       p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
       sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
       sdOctogon_has_returned_1 = true;
       sdOctogon_return_value_inlined_70_1 = sdOctogon_return_value_1;
       p_sdOctogon_1 = xy_room_1;
       r_sdOctogon_1 = 1.9;
       sdOctogon_has_returned_1 = false;
       p_sdOctogon_1 = abs(p_sdOctogon_1);
       p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
       p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
       p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
       sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
       sdOctogon_has_returned_1 = true;
       sdOctogon_return_value_inlined_71_1 = sdOctogon_return_value_1;
       ocp_room_1 = min(abs(sdOctogon_return_value_inlined_70_1), abs(sdOctogon_return_value_inlined_71_1));
       p_sdOctogon_1 = xy_room_1;
       r_sdOctogon_1 = 1.2;
       sdOctogon_has_returned_1 = false;
       p_sdOctogon_1 = abs(p_sdOctogon_1);
       p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
       p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
       p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
       sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
       sdOctogon_has_returned_1 = true;
       sdOctogon_return_value_inlined_72_1 = sdOctogon_return_value_1;
       ocp_room_1 = min(max(ocp_room_1, min(.7 - abs(xy_room_1.x + 1.2), - xy_room_1.y)), max(abs(sdOctogon_return_value_inlined_72_1), min(xy_room_1.x, .7 - abs(xy_room_1.y))));
       if(ocp_room_1 < .3)
        {
         r_room_1.mat = vec3(.39, .57, .71);
        }
      }
     p_sdBox_1 = p_room_1;
     b_sdBox_1 = frameInner_room_1 + vec3(.4, .4, .1);
     sdBox_has_returned_1 = false;
     q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
     sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
     sdBox_has_returned_1 = true;
     sdBox_return_value_inlined_73_1 = sdBox_return_value_1;
     doorFrame_room_1 = max(sdBox_return_value_inlined_73_1, - doorHole_room_1);
     doorWidth_room_1 = frameInner_room_1.x * .5;
     p_room_1.x -= frameInner_room_1.x;
     a_rot_1 = doorOpen_1 * 2.1;
     rot_has_returned_1 = false;
     c_rot_1 = cos(a_rot_1);
     s_rot_1 = sin(a_rot_1);
     rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
     rot_has_returned_1 = true;
     rot_return_value_inlined_74_1 = rot_return_value_1;
     p_room_1.xz *= rot_return_value_inlined_74_1;
     p_room_1.x += doorWidth_room_1;
     p_sdBox_1 = p_room_1;
     b_sdBox_1 = vec3(doorWidth_room_1, frameInner_room_1.yz);
     sdBox_has_returned_1 = false;
     q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
     sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
     sdBox_has_returned_1 = true;
     sdBox_return_value_inlined_75_1 = sdBox_return_value_1;
     door_room_1 = sdBox_return_value_inlined_75_1;
     p_room_1 = abs(p_room_1) - vec3(doorWidth_room_1 * .5, 1.1, .14);
     p_sdBox_1 = p_room_1;
     b_sdBox_1 = vec3(.45, .9, .1);
     sdBox_has_returned_1 = false;
     q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
     sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
     sdBox_has_returned_1 = true;
     sdBox_return_value_inlined_76_1 = sdBox_return_value_1;
     p_sdBox_1 = p_room_1;
     b_sdBox_1 = vec3(.35, .8, 1);
     sdBox_has_returned_1 = false;
     q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
     sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
     sdBox_has_returned_1 = true;
     sdBox_return_value_inlined_77_1 = sdBox_return_value_1;
     d_room_1 = min(doorFrame_room_1, max(door_room_1, - max(sdBox_return_value_inlined_76_1, - sdBox_return_value_inlined_77_1)));
     if(d_room_1 < r_room_1.d)
      {
       r_room_1.d = d_room_1;
       r_room_1.mat = vec3(.02, .02, .024);
       r_room_1.specPower = 10.;
      }
     room_return_value_1 = r_room_1;
     room_has_returned_1 = true;
     room_return_value_inlined_78_1 = room_return_value_1;
     p_ed209_1 = p_map_1;
     ed209_has_returned_1 = false;
     f_legWalkAngle_1 = 2.;
     legWalkAngle_has_returned_1 = false;
     legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
     legWalkAngle_has_returned_1 = true;
     legWalkAngle_return_value_inlined_54_1 = legWalkAngle_return_value_1;
     edZ_has_returned_1 = false;
     edZ_return_value_1 = mix(5., - 2., edWalk_1);
     edZ_has_returned_1 = true;
     edZ_return_value_inlined_55_1 = edZ_return_value_1;
     p_ed209_1.yz += vec2(legWalkAngle_return_value_inlined_54_1 * .2 + .1, - edZ_return_value_inlined_55_1);
     p_legs_1 = p_ed209_1;
     legs_has_returned_1 = false;
     mat_setBodyMaterial_1 = r_legs_1;
     mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
     mat_setBodyMaterial_1.specPower = 30.;
     r_legs_1 = mat_setBodyMaterial_1;
     f_legWalkAngle_1 = 1.;
     legWalkAngle_has_returned_1 = false;
     legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
     legWalkAngle_has_returned_1 = true;
     legWalkAngle_return_value_inlined_45_1 = legWalkAngle_return_value_1;
     legAngle_legs_1 = legWalkAngle_return_value_inlined_45_1;
     p_legs_1.z += .27;
     a_rot_1 = legAngle_legs_1 * sign(p_legs_1.x);
     rot_has_returned_1 = false;
     c_rot_1 = cos(a_rot_1);
     s_rot_1 = sin(a_rot_1);
     rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
     rot_has_returned_1 = true;
     rot_return_value_inlined_46_1 = rot_return_value_1;
     p_legs_1.yz *= rot_return_value_inlined_46_1;
     p_legs_1.z -= .27;
     p_legs_1.y += .65;
     a_rot_1 = - .2;
     rot_has_returned_1 = false;
     c_rot_1 = cos(a_rot_1);
     s_rot_1 = sin(a_rot_1);
     rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
     rot_has_returned_1 = true;
     rot_return_value_inlined_47_1 = rot_return_value_1;
     p_legs_1.yz *= rot_return_value_inlined_47_1;
     a_rot_1 = legAngle_legs_1 * .3;
     rot_has_returned_1 = false;
     c_rot_1 = cos(a_rot_1);
     s_rot_1 = sin(a_rot_1);
     rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
     rot_has_returned_1 = true;
     rot_return_value_inlined_48_1 = rot_return_value_1;
     p_legs_1.xy *= rot_return_value_inlined_48_1;
     pp_legs_1 = p_legs_1;
     pp_legs_1.x = abs(pp_legs_1.x);
     pp_legs_1.y += .48;
     a_rot_1 = - .58525;
     rot_has_returned_1 = false;
     c_rot_1 = cos(a_rot_1);
     s_rot_1 = sin(a_rot_1);
     rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
     rot_has_returned_1 = true;
     rot_return_value_inlined_49_1 = rot_return_value_1;
     pp_legs_1.yz *= rot_return_value_inlined_49_1;
     pp_legs_1.x -= .98;
     cp_legs_1 = pp_legs_1;
     p_legs_1 = pp_legs_1;
     pp_legs_1.xz = abs(pp_legs_1.xz) - vec2(.12, .25);
     p_legs_1.y += .68;
     p_legs_1.xy = abs(p_legs_1.xy) - .12;
     p_sdBox_1 = p_legs_1;
     b_sdBox_1 = vec3(.07, .05, 1.2);
     sdBox_has_returned_1 = false;
     q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
     sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
     sdBox_has_returned_1 = true;
     sdBox_return_value_inlined_50_1 = sdBox_return_value_1;
     silver_legs_1 = sdBox_return_value_inlined_50_1;
     cp_legs_1 -= vec3(0, - .7, 0);
     p_sdBox_1 = cp_legs_1 - vec3(0, 0, 1.15);
     b_sdBox_1 = vec3(.17, .17, .07);
     sdBox_has_returned_1 = false;
     q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
     sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
     sdBox_has_returned_1 = true;
     sdBox_return_value_inlined_51_1 = sdBox_return_value_1;
     r_legs_1.d = sdBox_return_value_inlined_51_1 - .04;
     cp_legs_1.z ++;
     p_sdChamferedCube_1 = cp_legs_1.xzy;
     r_sdChamferedCube_1 = vec2(.28 - sign(abs(cp_legs_1.z) - .3) * .01, .5).xyx;
     c_sdChamferedCube_1 = .18;
     sdChamferedCube_has_returned_1 = false;
     p_sdBox_1 = p_sdChamferedCube_1;
     b_sdBox_1 = r_sdChamferedCube_1;
     sdBox_has_returned_1 = false;
     q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
     sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
     sdBox_has_returned_1 = true;
     sdBox_return_value_inlined_0_1 = sdBox_return_value_1;
     cube_sdChamferedCube_1 = sdBox_return_value_inlined_0_1;
     a_rot_1 = .78525;
     rot_has_returned_1 = false;
     c_rot_1 = cos(a_rot_1);
     s_rot_1 = sin(a_rot_1);
     rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
     rot_has_returned_1 = true;
     rot_return_value_inlined_1_1 = rot_return_value_1;
     p_sdChamferedCube_1.xz *= rot_return_value_inlined_1_1;
     r_sdChamferedCube_1.xz *= - c_sdChamferedCube_1 / 1.41 + 1.41;
     p_sdBox_1 = p_sdChamferedCube_1;
     b_sdBox_1 = r_sdChamferedCube_1;
     sdBox_has_returned_1 = false;
     q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
     sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
     sdBox_has_returned_1 = true;
     sdBox_return_value_inlined_2_1 = sdBox_return_value_1;
     sdChamferedCube_return_value_1 = max(cube_sdChamferedCube_1, sdBox_return_value_inlined_2_1);
     sdChamferedCube_has_returned_1 = true;
     sdChamferedCube_return_value_inlined_52_1 = sdChamferedCube_return_value_1;
     r_legs_1.d = min(r_legs_1.d, sdChamferedCube_return_value_inlined_52_1);
     p_foot_1 = cp_legs_1;
     foot_has_returned_1 = false;
     p_foot_1.z += .8;
     a_rot_1 = .86;
     rot_has_returned_1 = false;
     c_rot_1 = cos(a_rot_1);
     s_rot_1 = sin(a_rot_1);
     rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
     rot_has_returned_1 = true;
     rot_return_value_inlined_29_1 = rot_return_value_1;
     p_foot_1.yz *= rot_return_value_inlined_29_1;
     p_toe_1 = p_foot_1;
     toe_has_returned_1 = false;
     p_toe_1.yz += vec2(.1, .32);
     p_sdBox_1 = p_toe_1;
     b_sdBox_1 = vec3(.3 + .2 * (p_toe_1.z - .18) - p_toe_1.y * .228, .3 + .2 * cos((p_toe_1.z - .18) * 3.69), .35);
     sdBox_has_returned_1 = false;
     q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
     sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
     sdBox_has_returned_1 = true;
     sdBox_return_value_inlined_28_1 = sdBox_return_value_1;
     toe_return_value_1 = max(sdBox_return_value_inlined_28_1, .1 - p_toe_1.y);
     toe_has_returned_1 = true;
     toe_return_value_inlined_30_1 = toe_return_value_1;
     d_foot_1 = toe_return_value_inlined_30_1;
     a_rot_1 = 1.57;
     rot_has_returned_1 = false;
     c_rot_1 = cos(a_rot_1);
     s_rot_1 = sin(a_rot_1);
     rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
     rot_has_returned_1 = true;
     rot_return_value_inlined_31_1 = rot_return_value_1;
     p_foot_1.xz *= rot_return_value_inlined_31_1;
     p_foot_1.x -= .43;
     p_foot_1.z = .25 - abs(p_foot_1.z);
     p_toe_1 = p_foot_1;
     toe_has_returned_1 = false;
     p_toe_1.yz += vec2(.1, .32);
     p_sdBox_1 = p_toe_1;
     b_sdBox_1 = vec3(.3 + .2 * (p_toe_1.z - .18) - p_toe_1.y * .228, .3 + .2 * cos((p_toe_1.z - .18) * 3.69), .35);
     sdBox_has_returned_1 = false;
     q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
     sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
     sdBox_has_returned_1 = true;
     sdBox_return_value_inlined_28_1 = sdBox_return_value_1;
     toe_return_value_1 = max(sdBox_return_value_inlined_28_1, .1 - p_toe_1.y);
     toe_has_returned_1 = true;
     toe_return_value_inlined_32_1 = toe_return_value_1;
     foot_return_value_1 = min(d_foot_1, toe_return_value_inlined_32_1);
     foot_has_returned_1 = true;
     foot_return_value_inlined_53_1 = foot_return_value_1;
     r_legs_1.d = min(r_legs_1.d, foot_return_value_inlined_53_1);
     if(silver_legs_1 < r_legs_1.d)
      {
       r_legs_1.d = silver_legs_1;
       r_legs_1.mat = vec3(.8);
      }
     legs_return_value_1 = r_legs_1;
     legs_has_returned_1 = true;
     legs_return_value_inlined_56_1 = legs_return_value_1;
     r_ed209_1 = legs_return_value_inlined_56_1;
     f_ed209_1 = min(stretch_1 * 2., 1.);
     slide_ed209_1 = f_ed209_1 < .5 ? smoothstep(0., .5, f_ed209_1) : (1. - smoothstep(.5, 1., f_ed209_1) * .2);
     p_ed209_1.yz -= slide_ed209_1 * .5;
     gunsUp_1 = smoothstep(0., 1., clamp((stretch_1 - .66) * 6., 0., 1.));
     fireShock_has_returned_1 = false;
     fireShock_return_value_1 = abs(sin(edShoot_1 * 78.5375));
     fireShock_has_returned_1 = true;
     fireShock_return_value_inlined_57_1 = fireShock_return_value_1;
     gunsForward_1 = smoothstep(0., 1., clamp((stretch_1 - .83) * 6., 0., 1.)) + fireShock_return_value_inlined_57_1 * .5;
     p_waist_1 = p_ed209_1;
     waist_has_returned_1 = false;
     mat_setBodyMaterial_1 = r_waist_1;
     mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
     mat_setBodyMaterial_1.specPower = 30.;
     r_waist_1 = mat_setBodyMaterial_1;
     p_waist_1.y += .65;
     a_rot_1 = - .2;
     rot_has_returned_1 = false;
     c_rot_1 = cos(a_rot_1);
     s_rot_1 = sin(a_rot_1);
     rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
     rot_has_returned_1 = true;
     rot_return_value_inlined_33_1 = rot_return_value_1;
     p_waist_1.yz *= rot_return_value_inlined_33_1;
     f_legWalkAngle_1 = 1.;
     legWalkAngle_has_returned_1 = false;
     legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
     legWalkAngle_has_returned_1 = true;
     legWalkAngle_return_value_inlined_34_1 = legWalkAngle_return_value_1;
     legAngle_waist_1 = legWalkAngle_return_value_inlined_34_1;
     a_rot_1 = legAngle_waist_1 * .3;
     rot_has_returned_1 = false;
     c_rot_1 = cos(a_rot_1);
     s_rot_1 = sin(a_rot_1);
     rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
     rot_has_returned_1 = true;
     rot_return_value_inlined_35_1 = rot_return_value_1;
     p_waist_1.xy *= rot_return_value_inlined_35_1;
     pp_waist_1 = p_waist_1;
     pp_waist_1.y += .3;
     p_sdCappedCylinder_1 = pp_waist_1.zyx;
     h_sdCappedCylinder_1 = .5;
     r_sdCappedCylinder_1 = .5;
     sdCappedCylinder_has_returned_1 = false;
     d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
     sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
     sdCappedCylinder_has_returned_1 = true;
     sdCappedCylinder_return_value_inlined_36_1 = sdCappedCylinder_return_value_1;
     r_waist_1.d = max(sdCappedCylinder_return_value_inlined_36_1, p_waist_1.y + .15);
     bump_waist_1 = .5 - abs(sin(p_waist_1.y * 40.)) * .03;
     p_sdBox_1 = p_waist_1;
     b_sdBox_1 = vec3(bump_waist_1, .15, bump_waist_1);
     sdBox_has_returned_1 = false;
     q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
     sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
     sdBox_has_returned_1 = true;
     sdBox_return_value_inlined_37_1 = sdBox_return_value_1;
     d_waist_1 = sdBox_return_value_inlined_37_1;
     bump_waist_1 = .3 - abs(sin(p_waist_1.x * 40.)) * .03;
     pp_waist_1.y += .18;
     p_sdCappedCylinder_1 = pp_waist_1.zyx;
     h_sdCappedCylinder_1 = bump_waist_1;
     r_sdCappedCylinder_1 = .75;
     sdCappedCylinder_has_returned_1 = false;
     d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
     sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
     sdCappedCylinder_has_returned_1 = true;
     sdCappedCylinder_return_value_inlined_38_1 = sdCappedCylinder_return_value_1;
     d_waist_1 = min(d_waist_1, sdCappedCylinder_return_value_inlined_38_1);
     pp_waist_1.x = abs(pp_waist_1.x);
     a_rot_1 = - .58525 + legAngle_waist_1 * sign(p_waist_1.x);
     rot_has_returned_1 = false;
     c_rot_1 = cos(a_rot_1);
     s_rot_1 = sin(a_rot_1);
     rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
     rot_has_returned_1 = true;
     rot_return_value_inlined_39_1 = rot_return_value_1;
     pp_waist_1.yz *= rot_return_value_inlined_39_1;
     pp_waist_1.x -= .98;
     p_sdCappedCylinder_1 = pp_waist_1.zyx;
     h_sdCappedCylinder_1 = .4;
     r_sdCappedCylinder_1 = .24;
     sdCappedCylinder_has_returned_1 = false;
     d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
     sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
     sdCappedCylinder_has_returned_1 = true;
     sdCappedCylinder_return_value_inlined_40_1 = sdCappedCylinder_return_value_1;
     r_waist_1.d = min(r_waist_1.d, max(sdCappedCylinder_return_value_inlined_40_1, - pp_waist_1.y));
     p_sdBox_1 = pp_waist_1;
     b_sdBox_1 = vec3(.24, .2, .14 + .2 * pp_waist_1.y);
     sdBox_has_returned_1 = false;
     q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
     sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
     sdBox_has_returned_1 = true;
     sdBox_return_value_inlined_41_1 = sdBox_return_value_1;
     r_waist_1.d = min(r_waist_1.d, sdBox_return_value_inlined_41_1);
     p_waist_1 = pp_waist_1;
     pp_waist_1.xz = abs(pp_waist_1.xz) - vec2(.12, .25);
     p_sdCappedCylinder_1 = pp_waist_1.xzy;
     h_sdCappedCylinder_1 = .1;
     r_sdCappedCylinder_1 = .325;
     sdCappedCylinder_has_returned_1 = false;
     d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
     sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
     sdCappedCylinder_has_returned_1 = true;
     sdCappedCylinder_return_value_inlined_42_1 = sdCappedCylinder_return_value_1;
     p_sdCappedCylinder_1 = pp_waist_1.xzy;
     h_sdCappedCylinder_1 = .05;
     r_sdCappedCylinder_1 = .5;
     sdCappedCylinder_has_returned_1 = false;
     d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
     sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
     sdCappedCylinder_has_returned_1 = true;
     sdCappedCylinder_return_value_inlined_43_1 = sdCappedCylinder_return_value_1;
     r_waist_1.d = min(r_waist_1.d, max(min(sdCappedCylinder_return_value_inlined_42_1, sdCappedCylinder_return_value_inlined_43_1), pp_waist_1.y));
     p_waist_1.y += .68;
     p_sdBox_1 = p_waist_1;
     b_sdBox_1 = vec3(sign(abs(p_waist_1.y) - .04) * .005 + .26, .2, .34);
     sdBox_has_returned_1 = false;
     q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
     sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
     sdBox_has_returned_1 = true;
     sdBox_return_value_inlined_44_1 = sdBox_return_value_1;
     r_waist_1.d = min(r_waist_1.d, sdBox_return_value_inlined_44_1);
     if(d_waist_1 < r_waist_1.d)
      {
       r_waist_1.d = d_waist_1;
       r_waist_1.mat = vec3(.02);
      }
     waist_return_value_1 = r_waist_1;
     waist_has_returned_1 = true;
     waist_return_value_inlined_58_1 = waist_return_value_1;
     a_minResult_1 = r_ed209_1;
     b_minResult_1 = waist_return_value_inlined_58_1;
     minResult_has_returned_1 = false;
     if(a_minResult_1.d < b_minResult_1.d)
      {
       minResult_return_value_1 = a_minResult_1;
       minResult_has_returned_1 = true;
      }
     if(! minResult_has_returned_1)
      {
       minResult_return_value_1 = b_minResult_1;
       minResult_has_returned_1 = true;
      }
     minResult_return_value_inlined_59_1 = minResult_return_value_1;
     r_ed209_1 = minResult_return_value_inlined_59_1;
     f_legWalkAngle_1 = 2.;
     legWalkAngle_has_returned_1 = false;
     legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
     legWalkAngle_has_returned_1 = true;
     legWalkAngle_return_value_inlined_60_1 = legWalkAngle_return_value_1;
     a_rot_1 = .1 * (- edDown_1 + legWalkAngle_return_value_inlined_60_1 + smoothstep(0., 1., clamp((stretch_1 - .5) * 6., 0., 1.)) - 1.);
     rot_has_returned_1 = false;
     c_rot_1 = cos(a_rot_1);
     s_rot_1 = sin(a_rot_1);
     rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
     rot_has_returned_1 = true;
     rot_return_value_inlined_61_1 = rot_return_value_1;
     p_ed209_1.yz *= rot_return_value_inlined_61_1;
     a_rot_1 = edTwist_1 * .2;
     rot_has_returned_1 = false;
     c_rot_1 = cos(a_rot_1);
     s_rot_1 = sin(a_rot_1);
     rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
     rot_has_returned_1 = true;
     rot_return_value_inlined_62_1 = rot_return_value_1;
     p_ed209_1.xz *= rot_return_value_inlined_62_1;
     p_headLower_1 = p_ed209_1;
     headLower_has_returned_1 = false;
     op_headLower_1 = p_headLower_1;
     p_headVisor_1 = p_headLower_1 * vec3(.95, - 1.4, .95);
     h_headVisor_1 = 1.;
     bump_headVisor_1 = 0.;
     headVisor_has_returned_1 = false;
     bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
     p_sdBox_1 = p_headVisor_1;
     b_sdBox_1 = vec3(1, h_headVisor_1, 2);
     sdBox_has_returned_1 = false;
     q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
     sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
     sdBox_has_returned_1 = true;
     sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
     result_headVisor_1.d = sdBox_return_value_inlined_3_1;
     p_headSphere_1 = p_headVisor_1;
     headSphere_has_returned_1 = false;
     headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
     headSphere_has_returned_1 = true;
     headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
     result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
     result_headVisor_1.mat = vec3(.05);
     result_headVisor_1.specPower = 30.;
     headVisor_return_value_1 = result_headVisor_1;
     headVisor_has_returned_1 = true;
     headVisor_return_value_inlined_5_1 = headVisor_return_value_1;
     r_headLower_1 = headVisor_return_value_inlined_5_1;
     p_headVisor_1 = (p_headLower_1 + vec3(0, .01, 0)) * vec3(.95);
     h_headVisor_1 = 1.;
     bump_headVisor_1 = 0.;
     headVisor_has_returned_1 = false;
     bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
     p_sdBox_1 = p_headVisor_1;
     b_sdBox_1 = vec3(1, h_headVisor_1, 2);
     sdBox_has_returned_1 = false;
     q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
     sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
     sdBox_has_returned_1 = true;
     sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
     result_headVisor_1.d = sdBox_return_value_inlined_3_1;
     p_headSphere_1 = p_headVisor_1;
     headSphere_has_returned_1 = false;
     headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
     headSphere_has_returned_1 = true;
     headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
     result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
     result_headVisor_1.mat = vec3(.05);
     result_headVisor_1.specPower = 30.;
     headVisor_return_value_1 = result_headVisor_1;
     headVisor_has_returned_1 = true;
     headVisor_return_value_inlined_6_1 = headVisor_return_value_1;
     r_headLower_1.d = min(r_headLower_1.d, max(max(headVisor_return_value_inlined_6_1.d, p_headLower_1.y - .35), p_headLower_1.y * .625 - p_headLower_1.z - .66));
     a_rot_1 = .075 * (gunsUp_1 - 1.) * sign(p_headLower_1.x);
     rot_has_returned_1 = false;
     c_rot_1 = cos(a_rot_1);
     s_rot_1 = sin(a_rot_1);
     rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
     rot_has_returned_1 = true;
     rot_return_value_inlined_7_1 = rot_return_value_1;
     p_headLower_1.xy *= rot_return_value_inlined_7_1;
     p_headLower_1.x = abs(p_headLower_1.x) - 1.33;
     p_headLower_1.y -= .1 - p_headLower_1.x * .1;
     p_sdBox_1 = p_headLower_1;
     b_sdBox_1 = vec3(.4, .06 * (1. - p_headLower_1.x), .3 - p_headLower_1.x * .2);
     sdBox_has_returned_1 = false;
     q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
     sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
     sdBox_has_returned_1 = true;
     sdBox_return_value_inlined_8_1 = sdBox_return_value_1;
     r_headLower_1.d = min(r_headLower_1.d, sdBox_return_value_inlined_8_1);
     p_headLower_1 = op_headLower_1;
     p_headLower_1.y = abs(abs(p_headLower_1.y + .147) - .0556) - .0278;
     p_sdBox_1 = p_headLower_1 + vec3(0, 0, 1.5);
     b_sdBox_1 = vec3(mix(.25, .55, - op_headLower_1.y), .015, .1);
     sdBox_has_returned_1 = false;
     q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
     sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
     sdBox_has_returned_1 = true;
     sdBox_return_value_inlined_9_1 = sdBox_return_value_1;
     r_headLower_1.d = max(r_headLower_1.d, - sdBox_return_value_inlined_9_1);
     p_headLower_1 = op_headLower_1;
     p_headLower_1.y = abs(p_headLower_1.y + .16) - .06;
     p_headLower_1.z -= - 1.1;
     p_sdCappedCylinder_1 = p_headLower_1.xzy;
     h_sdCappedCylinder_1 = 1.;
     r_sdCappedCylinder_1 = .03;
     sdCappedCylinder_has_returned_1 = false;
     d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
     sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
     sdCappedCylinder_has_returned_1 = true;
     sdCappedCylinder_return_value_inlined_10_1 = sdCappedCylinder_return_value_1;
     p_sdCappedCylinder_1 = p_headLower_1.xzy;
     h_sdCappedCylinder_1 = .55;
     r_sdCappedCylinder_1 = 1.;
     sdCappedCylinder_has_returned_1 = false;
     d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
     sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
     sdCappedCylinder_has_returned_1 = true;
     sdCappedCylinder_return_value_inlined_11_1 = sdCappedCylinder_return_value_1;
     r_headLower_1.d = max(r_headLower_1.d, - max(max(sdCappedCylinder_return_value_inlined_10_1, - sdCappedCylinder_return_value_inlined_11_1), p_headLower_1.z + .2));
     mat_setBodyMaterial_1 = r_headLower_1;
     mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
     mat_setBodyMaterial_1.specPower = 30.;
     r_headLower_1 = mat_setBodyMaterial_1;
     headLower_return_value_1 = r_headLower_1;
     headLower_has_returned_1 = true;
     headLower_return_value_inlined_63_1 = headLower_return_value_1;
     a_minResult_1 = r_ed209_1;
     b_minResult_1 = headLower_return_value_inlined_63_1;
     minResult_has_returned_1 = false;
     if(a_minResult_1.d < b_minResult_1.d)
      {
       minResult_return_value_1 = a_minResult_1;
       minResult_has_returned_1 = true;
      }
     if(! minResult_has_returned_1)
      {
       minResult_return_value_1 = b_minResult_1;
       minResult_has_returned_1 = true;
      }
     minResult_return_value_inlined_64_1 = minResult_return_value_1;
     p_headVisor_1 = p_ed209_1;
     h_headVisor_1 = .8;
     bump_headVisor_1 = 1.;
     headVisor_has_returned_1 = false;
     bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
     p_sdBox_1 = p_headVisor_1;
     b_sdBox_1 = vec3(1, h_headVisor_1, 2);
     sdBox_has_returned_1 = false;
     q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
     sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
     sdBox_has_returned_1 = true;
     sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
     result_headVisor_1.d = sdBox_return_value_inlined_3_1;
     p_headSphere_1 = p_headVisor_1;
     headSphere_has_returned_1 = false;
     headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
     headSphere_has_returned_1 = true;
     headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
     result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
     result_headVisor_1.mat = vec3(.05);
     result_headVisor_1.specPower = 30.;
     headVisor_return_value_1 = result_headVisor_1;
     headVisor_has_returned_1 = true;
     headVisor_return_value_inlined_65_1 = headVisor_return_value_1;
     a_minResult_1 = minResult_return_value_inlined_64_1;
     b_minResult_1 = headVisor_return_value_inlined_65_1;
     minResult_has_returned_1 = false;
     if(a_minResult_1.d < b_minResult_1.d)
      {
       minResult_return_value_1 = a_minResult_1;
       minResult_has_returned_1 = true;
      }
     if(! minResult_has_returned_1)
      {
       minResult_return_value_1 = b_minResult_1;
       minResult_has_returned_1 = true;
      }
     minResult_return_value_inlined_66_1 = minResult_return_value_1;
     p_arms_1 = p_ed209_1;
     arms_has_returned_1 = false;
     mat_setBodyMaterial_1 = r_arms_1;
     mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
     mat_setBodyMaterial_1.specPower = 30.;
     r_arms_1 = mat_setBodyMaterial_1;
     p_arms_1.x = abs(p_arms_1.x);
     p_arms_1.yz += vec2(.24, 0);
     a_rot_1 = .15 * (gunsUp_1 - 1.);
     rot_has_returned_1 = false;
     c_rot_1 = cos(a_rot_1);
     s_rot_1 = sin(a_rot_1);
     rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
     rot_has_returned_1 = true;
     rot_return_value_inlined_23_1 = rot_return_value_1;
     p_arms_1.xy *= rot_return_value_inlined_23_1;
     p_sdCapsule_1 = p_arms_1;
     a_sdCapsule_1 = vec3(0);
     b_sdCapsule_1 = vec3(1.5, 0, 0);
     r_sdCapsule_1 = .2;
     sdCapsule_has_returned_1 = false;
     pa_sdCapsule_1 = p_sdCapsule_1 - a_sdCapsule_1;
     ba_sdCapsule_1 = b_sdCapsule_1 - a_sdCapsule_1;
     sdCapsule_return_value_1 = length(pa_sdCapsule_1 - ba_sdCapsule_1 * clamp(dot(pa_sdCapsule_1, ba_sdCapsule_1) / dot(ba_sdCapsule_1, ba_sdCapsule_1), 0., 1.)) - r_sdCapsule_1;
     sdCapsule_has_returned_1 = true;
     sdCapsule_return_value_inlined_24_1 = sdCapsule_return_value_1;
     p_sdCapsule_1 = p_arms_1;
     a_sdCapsule_1 = vec3(1.5, 0, 0);
     b_sdCapsule_1 = wrist_arms_1;
     r_sdCapsule_1 = .2;
     sdCapsule_has_returned_1 = false;
     pa_sdCapsule_1 = p_sdCapsule_1 - a_sdCapsule_1;
     ba_sdCapsule_1 = b_sdCapsule_1 - a_sdCapsule_1;
     sdCapsule_return_value_1 = length(pa_sdCapsule_1 - ba_sdCapsule_1 * clamp(dot(pa_sdCapsule_1, ba_sdCapsule_1) / dot(ba_sdCapsule_1, ba_sdCapsule_1), 0., 1.)) - r_sdCapsule_1;
     sdCapsule_has_returned_1 = true;
     sdCapsule_return_value_inlined_25_1 = sdCapsule_return_value_1;
     r_arms_1.d = min(sdCapsule_return_value_inlined_24_1, sdCapsule_return_value_inlined_25_1);
     p_arms_1 -= wrist_arms_1;
     p_arms_1.z -= gunsForward_1 * .15;
     p_gunPod_1 = p_arms_1;
     gunPod_has_returned_1 = false;
     mat_setBodyMaterial_1 = r_gunPod_1;
     mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
     mat_setBodyMaterial_1.specPower = 30.;
     r_gunPod_1 = mat_setBodyMaterial_1;
     p_gunPod_1.yz += vec2(.1, .45);
     pp_gunPod_1 = p_gunPod_1;
     pp_gunPod_1.z = abs(pp_gunPod_1.z) - .5;
     p_sdCappedCone_1 = pp_gunPod_1;
     a_sdCappedCone_1 = vec3(0);
     b_sdCappedCone_1 = vec3(0, 0, - .1);
     ra_sdCappedCone_1 = .35 - .1;
     rb_sdCappedCone_1 = .35;
     sdCappedCone_has_returned_1 = false;
     rba_sdCappedCone_1 = rb_sdCappedCone_1 - ra_sdCappedCone_1;
     baba_sdCappedCone_1 = dot(b_sdCappedCone_1 - a_sdCappedCone_1, b_sdCappedCone_1 - a_sdCappedCone_1);
     papa_sdCappedCone_1 = dot(p_sdCappedCone_1 - a_sdCappedCone_1, p_sdCappedCone_1 - a_sdCappedCone_1);
     paba_sdCappedCone_1 = dot(p_sdCappedCone_1 - a_sdCappedCone_1, b_sdCappedCone_1 - a_sdCappedCone_1) / baba_sdCappedCone_1;
     x_sdCappedCone_1 = sqrt(papa_sdCappedCone_1 - paba_sdCappedCone_1 * paba_sdCappedCone_1 * baba_sdCappedCone_1);
     cax_sdCappedCone_1 = max(0., x_sdCappedCone_1 - ((paba_sdCappedCone_1 < .5) ? ra_sdCappedCone_1 : rb_sdCappedCone_1));
     cay_sdCappedCone_1 = abs(paba_sdCappedCone_1 - .5) - .5;
     f_sdCappedCone_1 = clamp((rba_sdCappedCone_1 * (x_sdCappedCone_1 - ra_sdCappedCone_1) + paba_sdCappedCone_1 * baba_sdCappedCone_1) / (rba_sdCappedCone_1 * rba_sdCappedCone_1 + baba_sdCappedCone_1), 0., 1.);
     cbx_sdCappedCone_1 = x_sdCappedCone_1 - ra_sdCappedCone_1 - f_sdCappedCone_1 * rba_sdCappedCone_1;
     cby_sdCappedCone_1 = paba_sdCappedCone_1 - f_sdCappedCone_1;
     sdCappedCone_return_value_1 = ((cbx_sdCappedCone_1 < 0. && cay_sdCappedCone_1 < 0.) ? - 1. : 1.) * sqrt(min(cax_sdCappedCone_1 * cax_sdCappedCone_1 + cay_sdCappedCone_1 * cay_sdCappedCone_1 * baba_sdCappedCone_1, cbx_sdCappedCone_1 * cbx_sdCappedCone_1 + cby_sdCappedCone_1 * cby_sdCappedCone_1 * baba_sdCappedCone_1));
     sdCappedCone_has_returned_1 = true;
     sdCappedCone_return_value_inlined_12_1 = sdCappedCone_return_value_1;
     r_gunPod_1.d = sdCappedCone_return_value_inlined_12_1;
     p_sdCappedCylinder_1 = p_gunPod_1;
     h_sdCappedCylinder_1 = .35;
     r_sdCappedCylinder_1 = .4;
     sdCappedCylinder_has_returned_1 = false;
     d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
     sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
     sdCappedCylinder_has_returned_1 = true;
     sdCappedCylinder_return_value_inlined_13_1 = sdCappedCylinder_return_value_1;
     r_gunPod_1.d = min(r_gunPod_1.d, sdCappedCylinder_return_value_inlined_13_1);
     pp_gunPod_1 = vec3(p_gunPod_1.x, .28 - p_gunPod_1.y, p_gunPod_1.z);
     p_sdTriPrism_1 = pp_gunPod_1;
     h_sdTriPrism_1 = vec2(.1, .5);
     sdTriPrism_has_returned_1 = false;
     q_sdTriPrism_1 = abs(p_sdTriPrism_1);
     sdTriPrism_return_value_1 = max(q_sdTriPrism_1.z - h_sdTriPrism_1.y, max(q_sdTriPrism_1.x * .866025 + p_sdTriPrism_1.y * .5, - p_sdTriPrism_1.y) - h_sdTriPrism_1.x * .5);
     sdTriPrism_has_returned_1 = true;
     sdTriPrism_return_value_inlined_14_1 = sdTriPrism_return_value_1;
     r_gunPod_1.d = min(r_gunPod_1.d, sdTriPrism_return_value_inlined_14_1);
     pp_gunPod_1 = p_gunPod_1;
     pp_gunPod_1.x = abs(p_gunPod_1.x);
     a_rot_1 = .78525;
     rot_has_returned_1 = false;
     c_rot_1 = cos(a_rot_1);
     s_rot_1 = sin(a_rot_1);
     rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
     rot_has_returned_1 = true;
     rot_return_value_inlined_15_1 = rot_return_value_1;
     pp_gunPod_1.xy *= rot_return_value_inlined_15_1;
     bump_gunPod_1 = sign(sin(pp_gunPod_1.z * 33.3)) * .003;
     p_sdBox_1 = pp_gunPod_1;
     b_sdBox_1 = vec3(.1 - bump_gunPod_1, .38 - bump_gunPod_1, .34);
     sdBox_has_returned_1 = false;
     q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
     sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
     sdBox_has_returned_1 = true;
     sdBox_return_value_inlined_16_1 = sdBox_return_value_1;
     d_gunPod_1 = sdBox_return_value_inlined_16_1 - .02;
     pp_gunPod_1 = p_gunPod_1 - vec3(0, 0, - .6);
     pp_gunPod_1.x = abs(pp_gunPod_1.x) - .1;
     p_sdCappedCylinder_1 = pp_gunPod_1;
     h_sdCappedCylinder_1 = .06;
     r_sdCappedCylinder_1 = .15;
     sdCappedCylinder_has_returned_1 = false;
     d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
     sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
     sdCappedCylinder_has_returned_1 = true;
     sdCappedCylinder_return_value_inlined_17_1 = sdCappedCylinder_return_value_1;
     p_sdCappedCylinder_1 = pp_gunPod_1 + vec3(0, .12, - .05);
     h_sdCappedCylinder_1 = .06;
     r_sdCappedCylinder_1 = .05;
     sdCappedCylinder_has_returned_1 = false;
     d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
     sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
     sdCappedCylinder_has_returned_1 = true;
     sdCappedCylinder_return_value_inlined_18_1 = sdCappedCylinder_return_value_1;
     p_sdBox_1 = p_gunPod_1 + vec3(0, 0, .54);
     b_sdBox_1 = vec3(.1, .06, .04);
     sdBox_has_returned_1 = false;
     q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
     sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
     sdBox_has_returned_1 = true;
     sdBox_return_value_inlined_19_1 = sdBox_return_value_1;
     d_gunPod_1 = min(min(min(d_gunPod_1, sdCappedCylinder_return_value_inlined_17_1), sdCappedCylinder_return_value_inlined_18_1), sdBox_return_value_inlined_19_1);
     if(d_gunPod_1 < r_gunPod_1.d)
      {
       p_sdCappedCylinder_1 = pp_gunPod_1 + vec3(0, 0, .1);
       h_sdCappedCylinder_1 = .03;
       r_sdCappedCylinder_1 = .2;
       sdCappedCylinder_has_returned_1 = false;
       d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
       sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
       sdCappedCylinder_has_returned_1 = true;
       sdCappedCylinder_return_value_inlined_20_1 = sdCappedCylinder_return_value_1;
       d_gunPod_1 = max(d_gunPod_1, - sdCappedCylinder_return_value_inlined_20_1);
       r_gunPod_1.d = d_gunPod_1;
       r_gunPod_1.mat = vec3(.02);
      }
     fireShock_has_returned_1 = false;
     fireShock_return_value_1 = abs(sin(edShoot_1 * 78.5375));
     fireShock_has_returned_1 = true;
     fireShock_return_value_inlined_21_1 = fireShock_return_value_1;
     fs_gunPod_1 = fireShock_return_value_inlined_21_1;
     if(fs_gunPod_1 > .5)
      {
       p_sdCappedCylinder_1 = pp_gunPod_1;
       h_sdCappedCylinder_1 = .01 + pp_gunPod_1.z * .05;
       r_sdCappedCylinder_1 = fract(fs_gunPod_1 * 3322.423) * .5 + .9;
       sdCappedCylinder_has_returned_1 = false;
       d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
       sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
       sdCappedCylinder_has_returned_1 = true;
       sdCappedCylinder_return_value_inlined_22_1 = sdCappedCylinder_return_value_1;
       d_gunPod_1 = sdCappedCylinder_return_value_inlined_22_1;
       if(d_gunPod_1 < r_gunPod_1.d)
        {
         r_gunPod_1.d = d_gunPod_1;
         r_gunPod_1.mat = vec3(1);
         glow_1 += .1 / (.01 + d_gunPod_1 * d_gunPod_1 * 4e2);
        }
      }
     gunPod_return_value_1 = r_gunPod_1;
     gunPod_has_returned_1 = true;
     gunPod_return_value_inlined_26_1 = gunPod_return_value_1;
     a_minResult_1 = r_arms_1;
     b_minResult_1 = gunPod_return_value_inlined_26_1;
     minResult_has_returned_1 = false;
     if(a_minResult_1.d < b_minResult_1.d)
      {
       minResult_return_value_1 = a_minResult_1;
       minResult_has_returned_1 = true;
      }
     if(! minResult_has_returned_1)
      {
       minResult_return_value_1 = b_minResult_1;
       minResult_has_returned_1 = true;
      }
     minResult_return_value_inlined_27_1 = minResult_return_value_1;
     arms_return_value_1 = minResult_return_value_inlined_27_1;
     arms_has_returned_1 = true;
     arms_return_value_inlined_67_1 = arms_return_value_1;
     a_minResult_1 = minResult_return_value_inlined_66_1;
     b_minResult_1 = arms_return_value_inlined_67_1;
     minResult_has_returned_1 = false;
     if(a_minResult_1.d < b_minResult_1.d)
      {
       minResult_return_value_1 = a_minResult_1;
       minResult_has_returned_1 = true;
      }
     if(! minResult_has_returned_1)
      {
       minResult_return_value_1 = b_minResult_1;
       minResult_has_returned_1 = true;
      }
     minResult_return_value_inlined_68_1 = minResult_return_value_1;
     ed209_return_value_1 = minResult_return_value_inlined_68_1;
     ed209_has_returned_1 = true;
     ed209_return_value_inlined_79_1 = ed209_return_value_1;
     a_minResult_1 = room_return_value_inlined_78_1;
     b_minResult_1 = ed209_return_value_inlined_79_1;
     minResult_has_returned_1 = false;
     if(a_minResult_1.d < b_minResult_1.d)
      {
       minResult_return_value_1 = a_minResult_1;
       minResult_has_returned_1 = true;
      }
     if(! minResult_has_returned_1)
      {
       minResult_return_value_1 = b_minResult_1;
       minResult_has_returned_1 = true;
      }
     minResult_return_value_inlined_80_1 = minResult_return_value_1;
     r_map_1 = minResult_return_value_inlined_80_1;
     gnd_map_1 = length(p_map_1.y + 3.);
     if(gnd_map_1 < r_map_1.d)
      {
       r_map_1.d = gnd_map_1;
       r_map_1.mat = vec3(.1);
      }
     map_return_value_1 = r_map_1;
     map_has_returned_1 = true;
     map_return_value_inlined_81_1 = map_return_value_1;
     h_calcShadow_1 = map_return_value_inlined_81_1.d;
     res_calcShadow_1 = min(res_calcShadow_1, 12. * h_calcShadow_1 / t_calcShadow_1);
     t_calcShadow_1 += h_calcShadow_1;
     if(res_calcShadow_1 < .001 || t_calcShadow_1 > 25.)
      {
       break;
      }
    }
   calcShadow_return_value_1 = clamp(res_calcShadow_1, 0., 1.);
   calcShadow_has_returned_1 = true;
   calcShadow_return_value_inlined_88_1 = calcShadow_return_value_1;
   primary_applyLighting_1 *= mix(.2, 1., calcShadow_return_value_inlined_88_1);
   p_ao_1 = p_applyLighting_1;
   n_ao_1 = n_applyLighting_1;
   h_ao_1 = .33;
   ao_has_returned_1 = false;
   p_map_1 = p_ao_1 + h_ao_1 * n_ao_1;
   map_has_returned_1 = false;
   p_room_1 = p_map_1;
   room_has_returned_1 = false;
   r_room_1.mat = vec3(.4);
   r_room_1.specPower = 1e7;
   xy_room_1 = p_room_1.xy - vec2(0, 2);
   p_room_1.x = abs(p_room_1.x);
   p_room_1.yz += vec2(.5, - 3.4);
   p_sdBox_1 = p_room_1;
   b_sdBox_1 = frameInner_room_1 + vec3(0, 0, 1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_69_1 = sdBox_return_value_1;
   doorHole_room_1 = sdBox_return_value_inlined_69_1;
   backWall_room_1 = length(p_room_1.z - 8.);
   r_room_1.d = min(backWall_room_1, max(length(p_room_1.z), - doorHole_room_1 + .1));
   if(r_room_1.d == backWall_room_1)
    {
     p_sdOctogon_1 = xy_room_1;
     r_sdOctogon_1 = 2.6;
     sdOctogon_has_returned_1 = false;
     p_sdOctogon_1 = abs(p_sdOctogon_1);
     p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
     p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
     p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
     sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
     sdOctogon_has_returned_1 = true;
     sdOctogon_return_value_inlined_70_1 = sdOctogon_return_value_1;
     p_sdOctogon_1 = xy_room_1;
     r_sdOctogon_1 = 1.9;
     sdOctogon_has_returned_1 = false;
     p_sdOctogon_1 = abs(p_sdOctogon_1);
     p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
     p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
     p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
     sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
     sdOctogon_has_returned_1 = true;
     sdOctogon_return_value_inlined_71_1 = sdOctogon_return_value_1;
     ocp_room_1 = min(abs(sdOctogon_return_value_inlined_70_1), abs(sdOctogon_return_value_inlined_71_1));
     p_sdOctogon_1 = xy_room_1;
     r_sdOctogon_1 = 1.2;
     sdOctogon_has_returned_1 = false;
     p_sdOctogon_1 = abs(p_sdOctogon_1);
     p_sdOctogon_1 -= 2. * min(dot(k_sdOctogon_1.xy, p_sdOctogon_1), 0.) * k_sdOctogon_1.xy;
     p_sdOctogon_1 -= 2. * min(dot(vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y), p_sdOctogon_1), 0.) * vec2(- k_sdOctogon_1.x, k_sdOctogon_1.y);
     p_sdOctogon_1 -= vec2(clamp(p_sdOctogon_1.x, - k_sdOctogon_1.z * r_sdOctogon_1, k_sdOctogon_1.z * r_sdOctogon_1), r_sdOctogon_1);
     sdOctogon_return_value_1 = length(p_sdOctogon_1) * sign(p_sdOctogon_1.y);
     sdOctogon_has_returned_1 = true;
     sdOctogon_return_value_inlined_72_1 = sdOctogon_return_value_1;
     ocp_room_1 = min(max(ocp_room_1, min(.7 - abs(xy_room_1.x + 1.2), - xy_room_1.y)), max(abs(sdOctogon_return_value_inlined_72_1), min(xy_room_1.x, .7 - abs(xy_room_1.y))));
     if(ocp_room_1 < .3)
      {
       r_room_1.mat = vec3(.39, .57, .71);
      }
    }
   p_sdBox_1 = p_room_1;
   b_sdBox_1 = frameInner_room_1 + vec3(.4, .4, .1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_73_1 = sdBox_return_value_1;
   doorFrame_room_1 = max(sdBox_return_value_inlined_73_1, - doorHole_room_1);
   doorWidth_room_1 = frameInner_room_1.x * .5;
   p_room_1.x -= frameInner_room_1.x;
   a_rot_1 = doorOpen_1 * 2.1;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_74_1 = rot_return_value_1;
   p_room_1.xz *= rot_return_value_inlined_74_1;
   p_room_1.x += doorWidth_room_1;
   p_sdBox_1 = p_room_1;
   b_sdBox_1 = vec3(doorWidth_room_1, frameInner_room_1.yz);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_75_1 = sdBox_return_value_1;
   door_room_1 = sdBox_return_value_inlined_75_1;
   p_room_1 = abs(p_room_1) - vec3(doorWidth_room_1 * .5, 1.1, .14);
   p_sdBox_1 = p_room_1;
   b_sdBox_1 = vec3(.45, .9, .1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_76_1 = sdBox_return_value_1;
   p_sdBox_1 = p_room_1;
   b_sdBox_1 = vec3(.35, .8, 1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_77_1 = sdBox_return_value_1;
   d_room_1 = min(doorFrame_room_1, max(door_room_1, - max(sdBox_return_value_inlined_76_1, - sdBox_return_value_inlined_77_1)));
   if(d_room_1 < r_room_1.d)
    {
     r_room_1.d = d_room_1;
     r_room_1.mat = vec3(.02, .02, .024);
     r_room_1.specPower = 10.;
    }
   room_return_value_1 = r_room_1;
   room_has_returned_1 = true;
   room_return_value_inlined_78_1 = room_return_value_1;
   p_ed209_1 = p_map_1;
   ed209_has_returned_1 = false;
   f_legWalkAngle_1 = 2.;
   legWalkAngle_has_returned_1 = false;
   legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
   legWalkAngle_has_returned_1 = true;
   legWalkAngle_return_value_inlined_54_1 = legWalkAngle_return_value_1;
   edZ_has_returned_1 = false;
   edZ_return_value_1 = mix(5., - 2., edWalk_1);
   edZ_has_returned_1 = true;
   edZ_return_value_inlined_55_1 = edZ_return_value_1;
   p_ed209_1.yz += vec2(legWalkAngle_return_value_inlined_54_1 * .2 + .1, - edZ_return_value_inlined_55_1);
   p_legs_1 = p_ed209_1;
   legs_has_returned_1 = false;
   mat_setBodyMaterial_1 = r_legs_1;
   mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
   mat_setBodyMaterial_1.specPower = 30.;
   r_legs_1 = mat_setBodyMaterial_1;
   f_legWalkAngle_1 = 1.;
   legWalkAngle_has_returned_1 = false;
   legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
   legWalkAngle_has_returned_1 = true;
   legWalkAngle_return_value_inlined_45_1 = legWalkAngle_return_value_1;
   legAngle_legs_1 = legWalkAngle_return_value_inlined_45_1;
   p_legs_1.z += .27;
   a_rot_1 = legAngle_legs_1 * sign(p_legs_1.x);
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_46_1 = rot_return_value_1;
   p_legs_1.yz *= rot_return_value_inlined_46_1;
   p_legs_1.z -= .27;
   p_legs_1.y += .65;
   a_rot_1 = - .2;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_47_1 = rot_return_value_1;
   p_legs_1.yz *= rot_return_value_inlined_47_1;
   a_rot_1 = legAngle_legs_1 * .3;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_48_1 = rot_return_value_1;
   p_legs_1.xy *= rot_return_value_inlined_48_1;
   pp_legs_1 = p_legs_1;
   pp_legs_1.x = abs(pp_legs_1.x);
   pp_legs_1.y += .48;
   a_rot_1 = - .58525;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_49_1 = rot_return_value_1;
   pp_legs_1.yz *= rot_return_value_inlined_49_1;
   pp_legs_1.x -= .98;
   cp_legs_1 = pp_legs_1;
   p_legs_1 = pp_legs_1;
   pp_legs_1.xz = abs(pp_legs_1.xz) - vec2(.12, .25);
   p_legs_1.y += .68;
   p_legs_1.xy = abs(p_legs_1.xy) - .12;
   p_sdBox_1 = p_legs_1;
   b_sdBox_1 = vec3(.07, .05, 1.2);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_50_1 = sdBox_return_value_1;
   silver_legs_1 = sdBox_return_value_inlined_50_1;
   cp_legs_1 -= vec3(0, - .7, 0);
   p_sdBox_1 = cp_legs_1 - vec3(0, 0, 1.15);
   b_sdBox_1 = vec3(.17, .17, .07);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_51_1 = sdBox_return_value_1;
   r_legs_1.d = sdBox_return_value_inlined_51_1 - .04;
   cp_legs_1.z ++;
   p_sdChamferedCube_1 = cp_legs_1.xzy;
   r_sdChamferedCube_1 = vec2(.28 - sign(abs(cp_legs_1.z) - .3) * .01, .5).xyx;
   c_sdChamferedCube_1 = .18;
   sdChamferedCube_has_returned_1 = false;
   p_sdBox_1 = p_sdChamferedCube_1;
   b_sdBox_1 = r_sdChamferedCube_1;
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_0_1 = sdBox_return_value_1;
   cube_sdChamferedCube_1 = sdBox_return_value_inlined_0_1;
   a_rot_1 = .78525;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_1_1 = rot_return_value_1;
   p_sdChamferedCube_1.xz *= rot_return_value_inlined_1_1;
   r_sdChamferedCube_1.xz *= - c_sdChamferedCube_1 / 1.41 + 1.41;
   p_sdBox_1 = p_sdChamferedCube_1;
   b_sdBox_1 = r_sdChamferedCube_1;
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_2_1 = sdBox_return_value_1;
   sdChamferedCube_return_value_1 = max(cube_sdChamferedCube_1, sdBox_return_value_inlined_2_1);
   sdChamferedCube_has_returned_1 = true;
   sdChamferedCube_return_value_inlined_52_1 = sdChamferedCube_return_value_1;
   r_legs_1.d = min(r_legs_1.d, sdChamferedCube_return_value_inlined_52_1);
   p_foot_1 = cp_legs_1;
   foot_has_returned_1 = false;
   p_foot_1.z += .8;
   a_rot_1 = .86;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_29_1 = rot_return_value_1;
   p_foot_1.yz *= rot_return_value_inlined_29_1;
   p_toe_1 = p_foot_1;
   toe_has_returned_1 = false;
   p_toe_1.yz += vec2(.1, .32);
   p_sdBox_1 = p_toe_1;
   b_sdBox_1 = vec3(.3 + .2 * (p_toe_1.z - .18) - p_toe_1.y * .228, .3 + .2 * cos((p_toe_1.z - .18) * 3.69), .35);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_28_1 = sdBox_return_value_1;
   toe_return_value_1 = max(sdBox_return_value_inlined_28_1, .1 - p_toe_1.y);
   toe_has_returned_1 = true;
   toe_return_value_inlined_30_1 = toe_return_value_1;
   d_foot_1 = toe_return_value_inlined_30_1;
   a_rot_1 = 1.57;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_31_1 = rot_return_value_1;
   p_foot_1.xz *= rot_return_value_inlined_31_1;
   p_foot_1.x -= .43;
   p_foot_1.z = .25 - abs(p_foot_1.z);
   p_toe_1 = p_foot_1;
   toe_has_returned_1 = false;
   p_toe_1.yz += vec2(.1, .32);
   p_sdBox_1 = p_toe_1;
   b_sdBox_1 = vec3(.3 + .2 * (p_toe_1.z - .18) - p_toe_1.y * .228, .3 + .2 * cos((p_toe_1.z - .18) * 3.69), .35);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_28_1 = sdBox_return_value_1;
   toe_return_value_1 = max(sdBox_return_value_inlined_28_1, .1 - p_toe_1.y);
   toe_has_returned_1 = true;
   toe_return_value_inlined_32_1 = toe_return_value_1;
   foot_return_value_1 = min(d_foot_1, toe_return_value_inlined_32_1);
   foot_has_returned_1 = true;
   foot_return_value_inlined_53_1 = foot_return_value_1;
   r_legs_1.d = min(r_legs_1.d, foot_return_value_inlined_53_1);
   if(silver_legs_1 < r_legs_1.d)
    {
     r_legs_1.d = silver_legs_1;
     r_legs_1.mat = vec3(.8);
    }
   legs_return_value_1 = r_legs_1;
   legs_has_returned_1 = true;
   legs_return_value_inlined_56_1 = legs_return_value_1;
   r_ed209_1 = legs_return_value_inlined_56_1;
   f_ed209_1 = min(stretch_1 * 2., 1.);
   slide_ed209_1 = f_ed209_1 < .5 ? smoothstep(0., .5, f_ed209_1) : (1. - smoothstep(.5, 1., f_ed209_1) * .2);
   p_ed209_1.yz -= slide_ed209_1 * .5;
   gunsUp_1 = smoothstep(0., 1., clamp((stretch_1 - .66) * 6., 0., 1.));
   fireShock_has_returned_1 = false;
   fireShock_return_value_1 = abs(sin(edShoot_1 * 78.5375));
   fireShock_has_returned_1 = true;
   fireShock_return_value_inlined_57_1 = fireShock_return_value_1;
   gunsForward_1 = smoothstep(0., 1., clamp((stretch_1 - .83) * 6., 0., 1.)) + fireShock_return_value_inlined_57_1 * .5;
   p_waist_1 = p_ed209_1;
   waist_has_returned_1 = false;
   mat_setBodyMaterial_1 = r_waist_1;
   mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
   mat_setBodyMaterial_1.specPower = 30.;
   r_waist_1 = mat_setBodyMaterial_1;
   p_waist_1.y += .65;
   a_rot_1 = - .2;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_33_1 = rot_return_value_1;
   p_waist_1.yz *= rot_return_value_inlined_33_1;
   f_legWalkAngle_1 = 1.;
   legWalkAngle_has_returned_1 = false;
   legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
   legWalkAngle_has_returned_1 = true;
   legWalkAngle_return_value_inlined_34_1 = legWalkAngle_return_value_1;
   legAngle_waist_1 = legWalkAngle_return_value_inlined_34_1;
   a_rot_1 = legAngle_waist_1 * .3;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_35_1 = rot_return_value_1;
   p_waist_1.xy *= rot_return_value_inlined_35_1;
   pp_waist_1 = p_waist_1;
   pp_waist_1.y += .3;
   p_sdCappedCylinder_1 = pp_waist_1.zyx;
   h_sdCappedCylinder_1 = .5;
   r_sdCappedCylinder_1 = .5;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_36_1 = sdCappedCylinder_return_value_1;
   r_waist_1.d = max(sdCappedCylinder_return_value_inlined_36_1, p_waist_1.y + .15);
   bump_waist_1 = .5 - abs(sin(p_waist_1.y * 40.)) * .03;
   p_sdBox_1 = p_waist_1;
   b_sdBox_1 = vec3(bump_waist_1, .15, bump_waist_1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_37_1 = sdBox_return_value_1;
   d_waist_1 = sdBox_return_value_inlined_37_1;
   bump_waist_1 = .3 - abs(sin(p_waist_1.x * 40.)) * .03;
   pp_waist_1.y += .18;
   p_sdCappedCylinder_1 = pp_waist_1.zyx;
   h_sdCappedCylinder_1 = bump_waist_1;
   r_sdCappedCylinder_1 = .75;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_38_1 = sdCappedCylinder_return_value_1;
   d_waist_1 = min(d_waist_1, sdCappedCylinder_return_value_inlined_38_1);
   pp_waist_1.x = abs(pp_waist_1.x);
   a_rot_1 = - .58525 + legAngle_waist_1 * sign(p_waist_1.x);
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_39_1 = rot_return_value_1;
   pp_waist_1.yz *= rot_return_value_inlined_39_1;
   pp_waist_1.x -= .98;
   p_sdCappedCylinder_1 = pp_waist_1.zyx;
   h_sdCappedCylinder_1 = .4;
   r_sdCappedCylinder_1 = .24;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_40_1 = sdCappedCylinder_return_value_1;
   r_waist_1.d = min(r_waist_1.d, max(sdCappedCylinder_return_value_inlined_40_1, - pp_waist_1.y));
   p_sdBox_1 = pp_waist_1;
   b_sdBox_1 = vec3(.24, .2, .14 + .2 * pp_waist_1.y);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_41_1 = sdBox_return_value_1;
   r_waist_1.d = min(r_waist_1.d, sdBox_return_value_inlined_41_1);
   p_waist_1 = pp_waist_1;
   pp_waist_1.xz = abs(pp_waist_1.xz) - vec2(.12, .25);
   p_sdCappedCylinder_1 = pp_waist_1.xzy;
   h_sdCappedCylinder_1 = .1;
   r_sdCappedCylinder_1 = .325;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_42_1 = sdCappedCylinder_return_value_1;
   p_sdCappedCylinder_1 = pp_waist_1.xzy;
   h_sdCappedCylinder_1 = .05;
   r_sdCappedCylinder_1 = .5;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_43_1 = sdCappedCylinder_return_value_1;
   r_waist_1.d = min(r_waist_1.d, max(min(sdCappedCylinder_return_value_inlined_42_1, sdCappedCylinder_return_value_inlined_43_1), pp_waist_1.y));
   p_waist_1.y += .68;
   p_sdBox_1 = p_waist_1;
   b_sdBox_1 = vec3(sign(abs(p_waist_1.y) - .04) * .005 + .26, .2, .34);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_44_1 = sdBox_return_value_1;
   r_waist_1.d = min(r_waist_1.d, sdBox_return_value_inlined_44_1);
   if(d_waist_1 < r_waist_1.d)
    {
     r_waist_1.d = d_waist_1;
     r_waist_1.mat = vec3(.02);
    }
   waist_return_value_1 = r_waist_1;
   waist_has_returned_1 = true;
   waist_return_value_inlined_58_1 = waist_return_value_1;
   a_minResult_1 = r_ed209_1;
   b_minResult_1 = waist_return_value_inlined_58_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_59_1 = minResult_return_value_1;
   r_ed209_1 = minResult_return_value_inlined_59_1;
   f_legWalkAngle_1 = 2.;
   legWalkAngle_has_returned_1 = false;
   legWalkAngle_return_value_1 = sin(edWalk_1 * 3.141 * 6. * f_legWalkAngle_1) * .2;
   legWalkAngle_has_returned_1 = true;
   legWalkAngle_return_value_inlined_60_1 = legWalkAngle_return_value_1;
   a_rot_1 = .1 * (- edDown_1 + legWalkAngle_return_value_inlined_60_1 + smoothstep(0., 1., clamp((stretch_1 - .5) * 6., 0., 1.)) - 1.);
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_61_1 = rot_return_value_1;
   p_ed209_1.yz *= rot_return_value_inlined_61_1;
   a_rot_1 = edTwist_1 * .2;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_62_1 = rot_return_value_1;
   p_ed209_1.xz *= rot_return_value_inlined_62_1;
   p_headLower_1 = p_ed209_1;
   headLower_has_returned_1 = false;
   op_headLower_1 = p_headLower_1;
   p_headVisor_1 = p_headLower_1 * vec3(.95, - 1.4, .95);
   h_headVisor_1 = 1.;
   bump_headVisor_1 = 0.;
   headVisor_has_returned_1 = false;
   bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
   p_sdBox_1 = p_headVisor_1;
   b_sdBox_1 = vec3(1, h_headVisor_1, 2);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
   result_headVisor_1.d = sdBox_return_value_inlined_3_1;
   p_headSphere_1 = p_headVisor_1;
   headSphere_has_returned_1 = false;
   headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
   headSphere_has_returned_1 = true;
   headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
   result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
   result_headVisor_1.mat = vec3(.05);
   result_headVisor_1.specPower = 30.;
   headVisor_return_value_1 = result_headVisor_1;
   headVisor_has_returned_1 = true;
   headVisor_return_value_inlined_5_1 = headVisor_return_value_1;
   r_headLower_1 = headVisor_return_value_inlined_5_1;
   p_headVisor_1 = (p_headLower_1 + vec3(0, .01, 0)) * vec3(.95);
   h_headVisor_1 = 1.;
   bump_headVisor_1 = 0.;
   headVisor_has_returned_1 = false;
   bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
   p_sdBox_1 = p_headVisor_1;
   b_sdBox_1 = vec3(1, h_headVisor_1, 2);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
   result_headVisor_1.d = sdBox_return_value_inlined_3_1;
   p_headSphere_1 = p_headVisor_1;
   headSphere_has_returned_1 = false;
   headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
   headSphere_has_returned_1 = true;
   headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
   result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
   result_headVisor_1.mat = vec3(.05);
   result_headVisor_1.specPower = 30.;
   headVisor_return_value_1 = result_headVisor_1;
   headVisor_has_returned_1 = true;
   headVisor_return_value_inlined_6_1 = headVisor_return_value_1;
   r_headLower_1.d = min(r_headLower_1.d, max(max(headVisor_return_value_inlined_6_1.d, p_headLower_1.y - .35), p_headLower_1.y * .625 - p_headLower_1.z - .66));
   a_rot_1 = .075 * (gunsUp_1 - 1.) * sign(p_headLower_1.x);
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_7_1 = rot_return_value_1;
   p_headLower_1.xy *= rot_return_value_inlined_7_1;
   p_headLower_1.x = abs(p_headLower_1.x) - 1.33;
   p_headLower_1.y -= .1 - p_headLower_1.x * .1;
   p_sdBox_1 = p_headLower_1;
   b_sdBox_1 = vec3(.4, .06 * (1. - p_headLower_1.x), .3 - p_headLower_1.x * .2);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_8_1 = sdBox_return_value_1;
   r_headLower_1.d = min(r_headLower_1.d, sdBox_return_value_inlined_8_1);
   p_headLower_1 = op_headLower_1;
   p_headLower_1.y = abs(abs(p_headLower_1.y + .147) - .0556) - .0278;
   p_sdBox_1 = p_headLower_1 + vec3(0, 0, 1.5);
   b_sdBox_1 = vec3(mix(.25, .55, - op_headLower_1.y), .015, .1);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_9_1 = sdBox_return_value_1;
   r_headLower_1.d = max(r_headLower_1.d, - sdBox_return_value_inlined_9_1);
   p_headLower_1 = op_headLower_1;
   p_headLower_1.y = abs(p_headLower_1.y + .16) - .06;
   p_headLower_1.z -= - 1.1;
   p_sdCappedCylinder_1 = p_headLower_1.xzy;
   h_sdCappedCylinder_1 = 1.;
   r_sdCappedCylinder_1 = .03;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_10_1 = sdCappedCylinder_return_value_1;
   p_sdCappedCylinder_1 = p_headLower_1.xzy;
   h_sdCappedCylinder_1 = .55;
   r_sdCappedCylinder_1 = 1.;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_11_1 = sdCappedCylinder_return_value_1;
   r_headLower_1.d = max(r_headLower_1.d, - max(max(sdCappedCylinder_return_value_inlined_10_1, - sdCappedCylinder_return_value_inlined_11_1), p_headLower_1.z + .2));
   mat_setBodyMaterial_1 = r_headLower_1;
   mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
   mat_setBodyMaterial_1.specPower = 30.;
   r_headLower_1 = mat_setBodyMaterial_1;
   headLower_return_value_1 = r_headLower_1;
   headLower_has_returned_1 = true;
   headLower_return_value_inlined_63_1 = headLower_return_value_1;
   a_minResult_1 = r_ed209_1;
   b_minResult_1 = headLower_return_value_inlined_63_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_64_1 = minResult_return_value_1;
   p_headVisor_1 = p_ed209_1;
   h_headVisor_1 = .8;
   bump_headVisor_1 = 1.;
   headVisor_has_returned_1 = false;
   bump_headVisor_1 *= sin(p_headVisor_1.x * 150.) * sin(p_headVisor_1.y * 150.) * .002;
   p_sdBox_1 = p_headVisor_1;
   b_sdBox_1 = vec3(1, h_headVisor_1, 2);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_3_1 = sdBox_return_value_1;
   result_headVisor_1.d = sdBox_return_value_inlined_3_1;
   p_headSphere_1 = p_headVisor_1;
   headSphere_has_returned_1 = false;
   headSphere_return_value_1 = (length(p_headSphere_1 / vec3(1, .8, 1)) - 1.) * .8;
   headSphere_has_returned_1 = true;
   headSphere_return_value_inlined_4_1 = headSphere_return_value_1;
   result_headVisor_1.d = max(mix(result_headVisor_1.d, headSphere_return_value_inlined_4_1, .57), - p_headVisor_1.y) - bump_headVisor_1;
   result_headVisor_1.mat = vec3(.05);
   result_headVisor_1.specPower = 30.;
   headVisor_return_value_1 = result_headVisor_1;
   headVisor_has_returned_1 = true;
   headVisor_return_value_inlined_65_1 = headVisor_return_value_1;
   a_minResult_1 = minResult_return_value_inlined_64_1;
   b_minResult_1 = headVisor_return_value_inlined_65_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_66_1 = minResult_return_value_1;
   p_arms_1 = p_ed209_1;
   arms_has_returned_1 = false;
   mat_setBodyMaterial_1 = r_arms_1;
   mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
   mat_setBodyMaterial_1.specPower = 30.;
   r_arms_1 = mat_setBodyMaterial_1;
   p_arms_1.x = abs(p_arms_1.x);
   p_arms_1.yz += vec2(.24, 0);
   a_rot_1 = .15 * (gunsUp_1 - 1.);
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_23_1 = rot_return_value_1;
   p_arms_1.xy *= rot_return_value_inlined_23_1;
   p_sdCapsule_1 = p_arms_1;
   a_sdCapsule_1 = vec3(0);
   b_sdCapsule_1 = vec3(1.5, 0, 0);
   r_sdCapsule_1 = .2;
   sdCapsule_has_returned_1 = false;
   pa_sdCapsule_1 = p_sdCapsule_1 - a_sdCapsule_1;
   ba_sdCapsule_1 = b_sdCapsule_1 - a_sdCapsule_1;
   sdCapsule_return_value_1 = length(pa_sdCapsule_1 - ba_sdCapsule_1 * clamp(dot(pa_sdCapsule_1, ba_sdCapsule_1) / dot(ba_sdCapsule_1, ba_sdCapsule_1), 0., 1.)) - r_sdCapsule_1;
   sdCapsule_has_returned_1 = true;
   sdCapsule_return_value_inlined_24_1 = sdCapsule_return_value_1;
   p_sdCapsule_1 = p_arms_1;
   a_sdCapsule_1 = vec3(1.5, 0, 0);
   b_sdCapsule_1 = wrist_arms_1;
   r_sdCapsule_1 = .2;
   sdCapsule_has_returned_1 = false;
   pa_sdCapsule_1 = p_sdCapsule_1 - a_sdCapsule_1;
   ba_sdCapsule_1 = b_sdCapsule_1 - a_sdCapsule_1;
   sdCapsule_return_value_1 = length(pa_sdCapsule_1 - ba_sdCapsule_1 * clamp(dot(pa_sdCapsule_1, ba_sdCapsule_1) / dot(ba_sdCapsule_1, ba_sdCapsule_1), 0., 1.)) - r_sdCapsule_1;
   sdCapsule_has_returned_1 = true;
   sdCapsule_return_value_inlined_25_1 = sdCapsule_return_value_1;
   r_arms_1.d = min(sdCapsule_return_value_inlined_24_1, sdCapsule_return_value_inlined_25_1);
   p_arms_1 -= wrist_arms_1;
   p_arms_1.z -= gunsForward_1 * .15;
   p_gunPod_1 = p_arms_1;
   gunPod_has_returned_1 = false;
   mat_setBodyMaterial_1 = r_gunPod_1;
   mat_setBodyMaterial_1.mat = vec3(.36, .45, .5);
   mat_setBodyMaterial_1.specPower = 30.;
   r_gunPod_1 = mat_setBodyMaterial_1;
   p_gunPod_1.yz += vec2(.1, .45);
   pp_gunPod_1 = p_gunPod_1;
   pp_gunPod_1.z = abs(pp_gunPod_1.z) - .5;
   p_sdCappedCone_1 = pp_gunPod_1;
   a_sdCappedCone_1 = vec3(0);
   b_sdCappedCone_1 = vec3(0, 0, - .1);
   ra_sdCappedCone_1 = .35 - .1;
   rb_sdCappedCone_1 = .35;
   sdCappedCone_has_returned_1 = false;
   rba_sdCappedCone_1 = rb_sdCappedCone_1 - ra_sdCappedCone_1;
   baba_sdCappedCone_1 = dot(b_sdCappedCone_1 - a_sdCappedCone_1, b_sdCappedCone_1 - a_sdCappedCone_1);
   papa_sdCappedCone_1 = dot(p_sdCappedCone_1 - a_sdCappedCone_1, p_sdCappedCone_1 - a_sdCappedCone_1);
   paba_sdCappedCone_1 = dot(p_sdCappedCone_1 - a_sdCappedCone_1, b_sdCappedCone_1 - a_sdCappedCone_1) / baba_sdCappedCone_1;
   x_sdCappedCone_1 = sqrt(papa_sdCappedCone_1 - paba_sdCappedCone_1 * paba_sdCappedCone_1 * baba_sdCappedCone_1);
   cax_sdCappedCone_1 = max(0., x_sdCappedCone_1 - ((paba_sdCappedCone_1 < .5) ? ra_sdCappedCone_1 : rb_sdCappedCone_1));
   cay_sdCappedCone_1 = abs(paba_sdCappedCone_1 - .5) - .5;
   f_sdCappedCone_1 = clamp((rba_sdCappedCone_1 * (x_sdCappedCone_1 - ra_sdCappedCone_1) + paba_sdCappedCone_1 * baba_sdCappedCone_1) / (rba_sdCappedCone_1 * rba_sdCappedCone_1 + baba_sdCappedCone_1), 0., 1.);
   cbx_sdCappedCone_1 = x_sdCappedCone_1 - ra_sdCappedCone_1 - f_sdCappedCone_1 * rba_sdCappedCone_1;
   cby_sdCappedCone_1 = paba_sdCappedCone_1 - f_sdCappedCone_1;
   sdCappedCone_return_value_1 = ((cbx_sdCappedCone_1 < 0. && cay_sdCappedCone_1 < 0.) ? - 1. : 1.) * sqrt(min(cax_sdCappedCone_1 * cax_sdCappedCone_1 + cay_sdCappedCone_1 * cay_sdCappedCone_1 * baba_sdCappedCone_1, cbx_sdCappedCone_1 * cbx_sdCappedCone_1 + cby_sdCappedCone_1 * cby_sdCappedCone_1 * baba_sdCappedCone_1));
   sdCappedCone_has_returned_1 = true;
   sdCappedCone_return_value_inlined_12_1 = sdCappedCone_return_value_1;
   r_gunPod_1.d = sdCappedCone_return_value_inlined_12_1;
   p_sdCappedCylinder_1 = p_gunPod_1;
   h_sdCappedCylinder_1 = .35;
   r_sdCappedCylinder_1 = .4;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_13_1 = sdCappedCylinder_return_value_1;
   r_gunPod_1.d = min(r_gunPod_1.d, sdCappedCylinder_return_value_inlined_13_1);
   pp_gunPod_1 = vec3(p_gunPod_1.x, .28 - p_gunPod_1.y, p_gunPod_1.z);
   p_sdTriPrism_1 = pp_gunPod_1;
   h_sdTriPrism_1 = vec2(.1, .5);
   sdTriPrism_has_returned_1 = false;
   q_sdTriPrism_1 = abs(p_sdTriPrism_1);
   sdTriPrism_return_value_1 = max(q_sdTriPrism_1.z - h_sdTriPrism_1.y, max(q_sdTriPrism_1.x * .866025 + p_sdTriPrism_1.y * .5, - p_sdTriPrism_1.y) - h_sdTriPrism_1.x * .5);
   sdTriPrism_has_returned_1 = true;
   sdTriPrism_return_value_inlined_14_1 = sdTriPrism_return_value_1;
   r_gunPod_1.d = min(r_gunPod_1.d, sdTriPrism_return_value_inlined_14_1);
   pp_gunPod_1 = p_gunPod_1;
   pp_gunPod_1.x = abs(p_gunPod_1.x);
   a_rot_1 = .78525;
   rot_has_returned_1 = false;
   c_rot_1 = cos(a_rot_1);
   s_rot_1 = sin(a_rot_1);
   rot_return_value_1 = mat2(c_rot_1, s_rot_1, - s_rot_1, c_rot_1);
   rot_has_returned_1 = true;
   rot_return_value_inlined_15_1 = rot_return_value_1;
   pp_gunPod_1.xy *= rot_return_value_inlined_15_1;
   bump_gunPod_1 = sign(sin(pp_gunPod_1.z * 33.3)) * .003;
   p_sdBox_1 = pp_gunPod_1;
   b_sdBox_1 = vec3(.1 - bump_gunPod_1, .38 - bump_gunPod_1, .34);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_16_1 = sdBox_return_value_1;
   d_gunPod_1 = sdBox_return_value_inlined_16_1 - .02;
   pp_gunPod_1 = p_gunPod_1 - vec3(0, 0, - .6);
   pp_gunPod_1.x = abs(pp_gunPod_1.x) - .1;
   p_sdCappedCylinder_1 = pp_gunPod_1;
   h_sdCappedCylinder_1 = .06;
   r_sdCappedCylinder_1 = .15;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_17_1 = sdCappedCylinder_return_value_1;
   p_sdCappedCylinder_1 = pp_gunPod_1 + vec3(0, .12, - .05);
   h_sdCappedCylinder_1 = .06;
   r_sdCappedCylinder_1 = .05;
   sdCappedCylinder_has_returned_1 = false;
   d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
   sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
   sdCappedCylinder_has_returned_1 = true;
   sdCappedCylinder_return_value_inlined_18_1 = sdCappedCylinder_return_value_1;
   p_sdBox_1 = p_gunPod_1 + vec3(0, 0, .54);
   b_sdBox_1 = vec3(.1, .06, .04);
   sdBox_has_returned_1 = false;
   q_sdBox_1 = abs(p_sdBox_1) - b_sdBox_1;
   sdBox_return_value_1 = length(max(q_sdBox_1, 0.)) + min(max(q_sdBox_1.x, max(q_sdBox_1.y, q_sdBox_1.z)), 0.);
   sdBox_has_returned_1 = true;
   sdBox_return_value_inlined_19_1 = sdBox_return_value_1;
   d_gunPod_1 = min(min(min(d_gunPod_1, sdCappedCylinder_return_value_inlined_17_1), sdCappedCylinder_return_value_inlined_18_1), sdBox_return_value_inlined_19_1);
   if(d_gunPod_1 < r_gunPod_1.d)
    {
     p_sdCappedCylinder_1 = pp_gunPod_1 + vec3(0, 0, .1);
     h_sdCappedCylinder_1 = .03;
     r_sdCappedCylinder_1 = .2;
     sdCappedCylinder_has_returned_1 = false;
     d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
     sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
     sdCappedCylinder_has_returned_1 = true;
     sdCappedCylinder_return_value_inlined_20_1 = sdCappedCylinder_return_value_1;
     d_gunPod_1 = max(d_gunPod_1, - sdCappedCylinder_return_value_inlined_20_1);
     r_gunPod_1.d = d_gunPod_1;
     r_gunPod_1.mat = vec3(.02);
    }
   fireShock_has_returned_1 = false;
   fireShock_return_value_1 = abs(sin(edShoot_1 * 78.5375));
   fireShock_has_returned_1 = true;
   fireShock_return_value_inlined_21_1 = fireShock_return_value_1;
   fs_gunPod_1 = fireShock_return_value_inlined_21_1;
   if(fs_gunPod_1 > .5)
    {
     p_sdCappedCylinder_1 = pp_gunPod_1;
     h_sdCappedCylinder_1 = .01 + pp_gunPod_1.z * .05;
     r_sdCappedCylinder_1 = fract(fs_gunPod_1 * 3322.423) * .5 + .9;
     sdCappedCylinder_has_returned_1 = false;
     d_sdCappedCylinder_1 = abs(vec2(length(p_sdCappedCylinder_1.xy), p_sdCappedCylinder_1.z)) - vec2(h_sdCappedCylinder_1, r_sdCappedCylinder_1);
     sdCappedCylinder_return_value_1 = min(max(d_sdCappedCylinder_1.x, d_sdCappedCylinder_1.y), 0.) + length(max(d_sdCappedCylinder_1, 0.));
     sdCappedCylinder_has_returned_1 = true;
     sdCappedCylinder_return_value_inlined_22_1 = sdCappedCylinder_return_value_1;
     d_gunPod_1 = sdCappedCylinder_return_value_inlined_22_1;
     if(d_gunPod_1 < r_gunPod_1.d)
      {
       r_gunPod_1.d = d_gunPod_1;
       r_gunPod_1.mat = vec3(1);
       glow_1 += .1 / (.01 + d_gunPod_1 * d_gunPod_1 * 4e2);
      }
    }
   gunPod_return_value_1 = r_gunPod_1;
   gunPod_has_returned_1 = true;
   gunPod_return_value_inlined_26_1 = gunPod_return_value_1;
   a_minResult_1 = r_arms_1;
   b_minResult_1 = gunPod_return_value_inlined_26_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_27_1 = minResult_return_value_1;
   arms_return_value_1 = minResult_return_value_inlined_27_1;
   arms_has_returned_1 = true;
   arms_return_value_inlined_67_1 = arms_return_value_1;
   a_minResult_1 = minResult_return_value_inlined_66_1;
   b_minResult_1 = arms_return_value_inlined_67_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_68_1 = minResult_return_value_1;
   ed209_return_value_1 = minResult_return_value_inlined_68_1;
   ed209_has_returned_1 = true;
   ed209_return_value_inlined_79_1 = ed209_return_value_1;
   a_minResult_1 = room_return_value_inlined_78_1;
   b_minResult_1 = ed209_return_value_inlined_79_1;
   minResult_has_returned_1 = false;
   if(a_minResult_1.d < b_minResult_1.d)
    {
     minResult_return_value_1 = a_minResult_1;
     minResult_has_returned_1 = true;
    }
   if(! minResult_has_returned_1)
    {
     minResult_return_value_1 = b_minResult_1;
     minResult_has_returned_1 = true;
    }
   minResult_return_value_inlined_80_1 = minResult_return_value_1;
   r_map_1 = minResult_return_value_inlined_80_1;
   gnd_map_1 = length(p_map_1.y + 3.);
   if(gnd_map_1 < r_map_1.d)
    {
     r_map_1.d = gnd_map_1;
     r_map_1.mat = vec3(.1);
    }
   map_return_value_1 = r_map_1;
   map_has_returned_1 = true;
   map_return_value_inlined_86_1 = map_return_value_1;
   ao_return_value_1 = map_return_value_inlined_86_1.d / h_ao_1;
   ao_has_returned_1 = true;
   ao_return_value_inlined_89_1 = ao_return_value_1;
   applyLighting_return_value_1 = mix(data_applyLighting_1.mat * ((primary_applyLighting_1 + bounce_applyLighting_1) * ao_return_value_inlined_89_1 + spe_applyLighting_1) * vec3(2, 1.6, 1.7), vec3(.01), fre_applyLighting_1) * fog_applyLighting_1;
   applyLighting_has_returned_1 = true;
   applyLighting_return_value_inlined_91_1 = applyLighting_return_value_1;
   fireShock_has_returned_1 = false;
   fireShock_return_value_1 = abs(sin(edShoot_1 * 78.5375));
   fireShock_has_returned_1 = true;
   fireShock_return_value_inlined_92_1 = fireShock_return_value_1;
   getSceneColor_return_value_1 = applyLighting_return_value_inlined_91_1 + fireShock_return_value_inlined_92_1 * .3 + g_getSceneColor_1;
   getSceneColor_has_returned_1 = true;
  }
 getSceneColor_return_value_inlined_112_1 = getSceneColor_return_value_1;
 col_mainImage_1 += getSceneColor_return_value_inlined_112_1;
 col_vignette_1 = pow(max(col_mainImage_1 * dim_mainImage_1, 1e-9), vec3(.4545));
 fragCoord_vignette_1 = gl_FragCoord.xy;
 vignette_has_returned_1 = false;
 q_vignette_1 = fragCoord_vignette_1.xy / iResolution.xy;
 col_vignette_1 *= .5 + .5 * pow(max(16. * q_vignette_1.x * q_vignette_1.y * (1. - q_vignette_1.x) * (1. - q_vignette_1.y), 1e-9), .4);
 vignette_return_value_1 = col_vignette_1;
 vignette_has_returned_1 = true;
 vignette_return_value_inlined_113_1 = vignette_return_value_1;
 fragColor_1 = vec4(vignette_return_value_inlined_113_1, 1);
 fragColor_1.w = 1.0;
 fragColor = mix(fragColor_2, fragColor_1, 1.0 - fragColor_2.a + iTime);
}
