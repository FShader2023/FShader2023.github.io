#version 300 es
precision highp float;

layout(location = 0) out vec4 fragColor;

uniform vec2 iResolution;

uniform float iTime;

uniform float iTimeDelta;

uniform vec4 iMouse;

uniform int iFrame;

vec4 fragColor_1;

vec4 fragColor_2;

void main()
{
 vec2 uv_main_1;
 vec2 mouse_main_1;
 float yaw_main_1;
 float pitch_main_1;
 vec4 cs_main_1;
 vec3 ro_main_1;
 vec3 lookAt_main_1;
 vec3 f_main_1;
 vec3 r_main_1;
 vec3 u_main_1;
 vec3 c_main_1;
 vec3 i_main_1;
 vec3 rd_main_1;
 vec3 col_main_1;
 vec3 n_main_1;
 vec3 reflOri_main_1;
 vec3 reflDir_main_1;
 int r_int_main_1;
 vec3 n_offset_1;
 bool offset_1_has_returned;
 vec3 offset_1_return_value;
 vec3 offset_1_return_value_inlined_11;
 vec3 off_main_1;
 vec3 ro_RayMarch_1;
 vec3 rd_RayMarch_1;
 float side_RayMarch_1;
 bool RayMarch_1_has_returned;
 float RayMarch_1_return_value;
 float dO_RayMarch_1;
 int i_RayMarch_1;
 vec3 p_RayMarch_1;
 vec3 p_GetDist_1;
 bool GetDist_1_has_returned;
 float GetDist_1_return_value;
 vec3 p_sdGrid_1;
 bool sdGrid_1_has_returned;
 float sdGrid_1_return_value;
 float plane_sdGrid_1;
 float sdGrid_1_return_value_inlined_4;
 float grid_GetDist_1;
 vec3 p_sdSpheres_1;
 bool sdSpheres_1_has_returned;
 float sdSpheres_1_return_value;
 vec2 p_Hash21_1;
 bool Hash21_1_has_returned;
 float Hash21_1_return_value;
 float Hash21_1_return_value_inlined_3;
 float off_sdSpheres_1;
 float sphereY_sdSpheres_1;
 vec3 pos_sdSpheres_1;
 float sdSpheres_1_return_value_inlined_5;
 float spheres_GetDist_1;
 float GetDist_1_return_value_inlined_10;
 float dS_RayMarch_1;
 float RayMarch_1_return_value_inlined_12;
 float d_main_1;
 vec3 spec_main_1;
 float sdGrid_1_return_value_inlined_13;
 float sdSpheres_1_return_value_inlined_14;
 vec2 p_Hash21Color_1;
 bool Hash21Color_1_has_returned;
 vec3 Hash21Color_1_return_value;
 float Hash21_1_return_value_inlined_0;
 float r_Hash21Color_1;
 float Hash21_1_return_value_inlined_1;
 float g_Hash21Color_1;
 float Hash21_1_return_value_inlined_2;
 float b_Hash21Color_1;
 vec3 Hash21Color_1_return_value_inlined_15;
 vec3 p_GetNormal_1;
 bool GetNormal_1_has_returned;
 vec3 GetNormal_1_return_value;
 float GetDist_1_return_value_inlined_6;
 float d_GetNormal_1;
 vec2 e_GetNormal_1;
 float GetDist_1_return_value_inlined_7;
 float GetDist_1_return_value_inlined_8;
 float GetDist_1_return_value_inlined_9;
 vec3 GetNormal_1_return_value_inlined_16;
 vec3 p_GetLight_1;
 vec3 n_GetLight_1;
 bool GetLight_1_has_returned;
 float GetLight_1_return_value;
 vec3 l_GetLight_1;
 float diff_GetLight_1;
 float GetLight_1_return_value_inlined_17;
 float diff_main_1;
 float t_main_2;
 vec2 uv_main_2;
 vec2 m_main_2;
 float s_main_2;
 float c_main_2;
 float d_main_2;
 float smile_main_2;
 vec2 uv_Smiley_2;
 vec2 m_Smiley_2;
 float smile_Smiley_2;
 bool Smiley_2_has_returned;
 vec4 Smiley_2_return_value;
 vec4 col_Smiley_2;
 float side_Smiley_2;
 vec2 uv_Head_2;
 bool Head_2_has_returned;
 vec4 Head_2_return_value;
 vec4 col_Head_2;
 float d_Head_2;
 float a_remap01_2;
 float b_remap01_2;
 float t_remap01_2;
 bool remap01_2_has_returned;
 float remap01_2_return_value;
 float remap01_2_return_value_inlined_19;
 float edgeShade_Head_2;
 float highlight_Head_2;
 float a_remap_2;
 float b_remap_2;
 float c_remap_2;
 float d_remap_2;
 float t_remap_2;
 bool remap_2_has_returned;
 float remap_2_return_value;
 float remap_2_return_value_inlined_20;
 float cheek_Head_2;
 vec4 Head_2_return_value_inlined_21;
 vec4 head_Smiley_2;
 vec2 uv_within_2;
 vec4 rect_within_2;
 bool within_2_has_returned;
 vec2 within_2_return_value;
 vec2 within_2_return_value_inlined_22;
 vec2 uv_Eye_2;
 float side_Eye_2;
 vec2 m_Eye_2;
 float smile_Eye_2;
 bool Eye_2_has_returned;
 vec4 Eye_2_return_value;
 float d_Eye_2;
 vec4 irisCol_Eye_2;
 vec4 col_Eye_2;
 float irisMask_Eye_2;
 float pupilSize_Eye_2;
 float pupilMask_Eye_2;
 float t_Eye_2;
 vec2 offs_Eye_2;
 float highlight_Eye_2;
 vec4 Eye_2_return_value_inlined_23;
 vec4 eye_Smiley_2;
 vec2 within_2_return_value_inlined_24;
 vec2 uv_Mouth_2;
 float smile_Mouth_2;
 bool Mouth_2_has_returned;
 vec4 Mouth_2_return_value;
 vec4 col_Mouth_2;
 float d_Mouth_2;
 vec2 tUv_Mouth_2;
 float td_Mouth_2;
 vec3 toothCol_Mouth_2;
 vec4 Mouth_2_return_value_inlined_25;
 vec4 mouth_Smiley_2;
 vec2 within_2_return_value_inlined_26;
 vec2 uv_Brow_2;
 float smile_Brow_2;
 bool Brow_2_has_returned;
 vec4 Brow_2_return_value;
 float offs_Brow_2;
 float y_Brow_2;
 vec4 col_Brow_2;
 float blur_Brow_2;
 float d1_Brow_2;
 float s1_Brow_2;
 float d2_Brow_2;
 float s2_Brow_2;
 float browMask_Brow_2;
 float remap01_2_return_value_inlined_18;
 float colMask_Brow_2;
 vec4 browCol_Brow_2;
 float shadowMask_Brow_2;
 vec4 Brow_2_return_value_inlined_27;
 vec4 brow_Smiley_2;
 vec4 Smiley_2_return_value_inlined_28;
 fragColor = vec4(1.0);
 uv_main_1 = (gl_FragCoord.xy - iResolution.xy * 0.5) / min(iResolution.x, iResolution.y);
 if(iMouse.x == 0.0 && iMouse.y == 0.0)
  {
   mouse_main_1 = vec2(0, 0);
  }
 else
  {
   mouse_main_1 = iMouse.xy / iResolution.xy - 0.5;
  }
 yaw_main_1 = mouse_main_1.x * 2.0 * 3.1415926535;
 pitch_main_1 = mouse_main_1.y * 3.1415926535;
 cs_main_1 = vec4(cos(yaw_main_1), sin(yaw_main_1), cos(pitch_main_1), sin(pitch_main_1));
 ro_main_1 = vec3(0, 1, 0);
 lookAt_main_1 = ro_main_1 + cs_main_1.xwy * vec3(cs_main_1.z, 1, cs_main_1.z);
 f_main_1 = normalize(lookAt_main_1 - ro_main_1);
 r_main_1 = normalize(cross(f_main_1, vec3(0, 1, 0)));
 u_main_1 = cross(r_main_1, f_main_1);
 c_main_1 = ro_main_1 + f_main_1 * 1.0;
 i_main_1 = c_main_1 + uv_main_1.x * r_main_1 + uv_main_1.y * u_main_1;
 rd_main_1 = normalize(i_main_1 - ro_main_1);
 col_main_1 = vec3(0);
 n_main_1 = vec3(0);
 reflOri_main_1 = ro_main_1;
 reflDir_main_1 = rd_main_1;
 for( r_int_main_1 = 0;
 r_int_main_1 <= 10; r_int_main_1 ++)
  {
   n_offset_1 = n_main_1;
   offset_1_has_returned = false;
   offset_1_return_value = 0.001 * 2.0 * n_offset_1;
   offset_1_has_returned = true;
   offset_1_return_value_inlined_11 = offset_1_return_value;
   off_main_1 = offset_1_return_value_inlined_11;
   reflOri_main_1 += off_main_1;
   ro_RayMarch_1 = reflOri_main_1;
   rd_RayMarch_1 = reflDir_main_1;
   side_RayMarch_1 = 1.0;
   RayMarch_1_has_returned = false;
   dO_RayMarch_1 = 0.0;
   for(   i_RayMarch_1 = 0;
 i_RayMarch_1 < 1000; i_RayMarch_1 ++)
    {
     p_RayMarch_1 = ro_RayMarch_1 + rd_RayMarch_1 * dO_RayMarch_1;
     p_GetDist_1 = p_RayMarch_1;
     GetDist_1_has_returned = false;
     p_sdGrid_1 = p_GetDist_1;
     sdGrid_1_has_returned = false;
     plane_sdGrid_1 = p_sdGrid_1.y;
     plane_sdGrid_1 += 0.025 * smoothstep(0.05, 0.0, abs(p_sdGrid_1.x - round(p_sdGrid_1.x)));
     plane_sdGrid_1 += 0.025 * smoothstep(0.05, 0.0, abs(p_sdGrid_1.z - round(p_sdGrid_1.z)));
     sdGrid_1_return_value = plane_sdGrid_1;
     sdGrid_1_has_returned = true;
     sdGrid_1_return_value_inlined_4 = sdGrid_1_return_value;
     grid_GetDist_1 = sdGrid_1_return_value_inlined_4;
     p_sdSpheres_1 = p_GetDist_1;
     sdSpheres_1_has_returned = false;
     p_Hash21_1 = round(p_sdSpheres_1.xz);
     Hash21_1_has_returned = false;
     p_Hash21_1 = fract(p_Hash21_1 * vec2(123.34, 456.21));
     p_Hash21_1 += dot(p_Hash21_1, p_Hash21_1 + 45.32);
     Hash21_1_return_value = fract(p_Hash21_1.x * p_Hash21_1.y);
     Hash21_1_has_returned = true;
     Hash21_1_return_value_inlined_3 = Hash21_1_return_value;
     off_sdSpheres_1 = Hash21_1_return_value_inlined_3;
     sphereY_sdSpheres_1 = 0.2 * sin(iTime + 4. + off_sdSpheres_1) + 1.0;
     pos_sdSpheres_1 = vec3(0, sphereY_sdSpheres_1, 0);
     p_sdSpheres_1.xz = mod(p_sdSpheres_1.xz, 2.0) - 1.0;
     sdSpheres_1_return_value = length(p_sdSpheres_1 - pos_sdSpheres_1) - 0.4;
     sdSpheres_1_has_returned = true;
     sdSpheres_1_return_value_inlined_5 = sdSpheres_1_return_value;
     spheres_GetDist_1 = sdSpheres_1_return_value_inlined_5;
     GetDist_1_return_value = min(grid_GetDist_1, spheres_GetDist_1);
     GetDist_1_has_returned = true;
     GetDist_1_return_value_inlined_10 = GetDist_1_return_value;
     dS_RayMarch_1 = side_RayMarch_1 * GetDist_1_return_value_inlined_10;
     if(abs(dS_RayMarch_1) <= 0.001 || dO_RayMarch_1 > 1000.0)
      {
       break;
      }
     dO_RayMarch_1 += dS_RayMarch_1;
    }
   RayMarch_1_return_value = dO_RayMarch_1;
   RayMarch_1_has_returned = true;
   RayMarch_1_return_value_inlined_12 = RayMarch_1_return_value;
   d_main_1 = RayMarch_1_return_value_inlined_12;
   reflOri_main_1 += reflDir_main_1 * d_main_1;
   spec_main_1 = vec3(0);
   p_sdGrid_1 = reflOri_main_1;
   sdGrid_1_has_returned = false;
   plane_sdGrid_1 = p_sdGrid_1.y;
   plane_sdGrid_1 += 0.025 * smoothstep(0.05, 0.0, abs(p_sdGrid_1.x - round(p_sdGrid_1.x)));
   plane_sdGrid_1 += 0.025 * smoothstep(0.05, 0.0, abs(p_sdGrid_1.z - round(p_sdGrid_1.z)));
   sdGrid_1_return_value = plane_sdGrid_1;
   sdGrid_1_has_returned = true;
   sdGrid_1_return_value_inlined_13 = sdGrid_1_return_value;
   if(sdGrid_1_return_value_inlined_13 <= 0.001)
    {
     spec_main_1 += mod(floor(reflOri_main_1.x) + floor(reflOri_main_1.z), 2.0);
    }
   else
    {
     p_sdSpheres_1 = reflOri_main_1;
     sdSpheres_1_has_returned = false;
     p_Hash21_1 = round(p_sdSpheres_1.xz);
     Hash21_1_has_returned = false;
     p_Hash21_1 = fract(p_Hash21_1 * vec2(123.34, 456.21));
     p_Hash21_1 += dot(p_Hash21_1, p_Hash21_1 + 45.32);
     Hash21_1_return_value = fract(p_Hash21_1.x * p_Hash21_1.y);
     Hash21_1_has_returned = true;
     Hash21_1_return_value_inlined_3 = Hash21_1_return_value;
     off_sdSpheres_1 = Hash21_1_return_value_inlined_3;
     sphereY_sdSpheres_1 = 0.2 * sin(iTime + 4. + off_sdSpheres_1) + 1.0;
     pos_sdSpheres_1 = vec3(0, sphereY_sdSpheres_1, 0);
     p_sdSpheres_1.xz = mod(p_sdSpheres_1.xz, 2.0) - 1.0;
     sdSpheres_1_return_value = length(p_sdSpheres_1 - pos_sdSpheres_1) - 0.4;
     sdSpheres_1_has_returned = true;
     sdSpheres_1_return_value_inlined_14 = sdSpheres_1_return_value;
     if(sdSpheres_1_return_value_inlined_14 <= 0.001)
      {
       p_Hash21Color_1 = round(reflOri_main_1.xz);
       Hash21Color_1_has_returned = false;
       p_Hash21_1 = p_Hash21Color_1;
       Hash21_1_has_returned = false;
       p_Hash21_1 = fract(p_Hash21_1 * vec2(123.34, 456.21));
       p_Hash21_1 += dot(p_Hash21_1, p_Hash21_1 + 45.32);
       Hash21_1_return_value = fract(p_Hash21_1.x * p_Hash21_1.y);
       Hash21_1_has_returned = true;
       Hash21_1_return_value_inlined_0 = Hash21_1_return_value;
       r_Hash21Color_1 = Hash21_1_return_value_inlined_0;
       p_Hash21_1 = p_Hash21Color_1 * 123.456;
       Hash21_1_has_returned = false;
       p_Hash21_1 = fract(p_Hash21_1 * vec2(123.34, 456.21));
       p_Hash21_1 += dot(p_Hash21_1, p_Hash21_1 + 45.32);
       Hash21_1_return_value = fract(p_Hash21_1.x * p_Hash21_1.y);
       Hash21_1_has_returned = true;
       Hash21_1_return_value_inlined_1 = Hash21_1_return_value;
       g_Hash21Color_1 = Hash21_1_return_value_inlined_1;
       p_Hash21_1 = (p_Hash21Color_1 - 789.012) / 345.678;
       Hash21_1_has_returned = false;
       p_Hash21_1 = fract(p_Hash21_1 * vec2(123.34, 456.21));
       p_Hash21_1 += dot(p_Hash21_1, p_Hash21_1 + 45.32);
       Hash21_1_return_value = fract(p_Hash21_1.x * p_Hash21_1.y);
       Hash21_1_has_returned = true;
       Hash21_1_return_value_inlined_2 = Hash21_1_return_value;
       b_Hash21Color_1 = Hash21_1_return_value_inlined_2;
       Hash21Color_1_return_value = vec3(r_Hash21Color_1, g_Hash21Color_1, b_Hash21Color_1);
       Hash21Color_1_has_returned = true;
       Hash21Color_1_return_value_inlined_15 = Hash21Color_1_return_value;
       spec_main_1 += Hash21Color_1_return_value_inlined_15;
      }
     else
      {
       break;
      }
    }
   p_GetNormal_1 = reflOri_main_1;
   GetNormal_1_has_returned = false;
   p_GetDist_1 = p_GetNormal_1;
   GetDist_1_has_returned = false;
   p_sdGrid_1 = p_GetDist_1;
   sdGrid_1_has_returned = false;
   plane_sdGrid_1 = p_sdGrid_1.y;
   plane_sdGrid_1 += 0.025 * smoothstep(0.05, 0.0, abs(p_sdGrid_1.x - round(p_sdGrid_1.x)));
   plane_sdGrid_1 += 0.025 * smoothstep(0.05, 0.0, abs(p_sdGrid_1.z - round(p_sdGrid_1.z)));
   sdGrid_1_return_value = plane_sdGrid_1;
   sdGrid_1_has_returned = true;
   sdGrid_1_return_value_inlined_4 = sdGrid_1_return_value;
   grid_GetDist_1 = sdGrid_1_return_value_inlined_4;
   p_sdSpheres_1 = p_GetDist_1;
   sdSpheres_1_has_returned = false;
   p_Hash21_1 = round(p_sdSpheres_1.xz);
   Hash21_1_has_returned = false;
   p_Hash21_1 = fract(p_Hash21_1 * vec2(123.34, 456.21));
   p_Hash21_1 += dot(p_Hash21_1, p_Hash21_1 + 45.32);
   Hash21_1_return_value = fract(p_Hash21_1.x * p_Hash21_1.y);
   Hash21_1_has_returned = true;
   Hash21_1_return_value_inlined_3 = Hash21_1_return_value;
   off_sdSpheres_1 = Hash21_1_return_value_inlined_3;
   sphereY_sdSpheres_1 = 0.2 * sin(iTime + 4. + off_sdSpheres_1) + 1.0;
   pos_sdSpheres_1 = vec3(0, sphereY_sdSpheres_1, 0);
   p_sdSpheres_1.xz = mod(p_sdSpheres_1.xz, 2.0) - 1.0;
   sdSpheres_1_return_value = length(p_sdSpheres_1 - pos_sdSpheres_1) - 0.4;
   sdSpheres_1_has_returned = true;
   sdSpheres_1_return_value_inlined_5 = sdSpheres_1_return_value;
   spheres_GetDist_1 = sdSpheres_1_return_value_inlined_5;
   GetDist_1_return_value = min(grid_GetDist_1, spheres_GetDist_1);
   GetDist_1_has_returned = true;
   GetDist_1_return_value_inlined_6 = GetDist_1_return_value;
   d_GetNormal_1 = GetDist_1_return_value_inlined_6;
   e_GetNormal_1 = vec2(0.001, 0);
   p_GetDist_1 = p_GetNormal_1 - e_GetNormal_1.xyy;
   GetDist_1_has_returned = false;
   p_sdGrid_1 = p_GetDist_1;
   sdGrid_1_has_returned = false;
   plane_sdGrid_1 = p_sdGrid_1.y;
   plane_sdGrid_1 += 0.025 * smoothstep(0.05, 0.0, abs(p_sdGrid_1.x - round(p_sdGrid_1.x)));
   plane_sdGrid_1 += 0.025 * smoothstep(0.05, 0.0, abs(p_sdGrid_1.z - round(p_sdGrid_1.z)));
   sdGrid_1_return_value = plane_sdGrid_1;
   sdGrid_1_has_returned = true;
   sdGrid_1_return_value_inlined_4 = sdGrid_1_return_value;
   grid_GetDist_1 = sdGrid_1_return_value_inlined_4;
   p_sdSpheres_1 = p_GetDist_1;
   sdSpheres_1_has_returned = false;
   p_Hash21_1 = round(p_sdSpheres_1.xz);
   Hash21_1_has_returned = false;
   p_Hash21_1 = fract(p_Hash21_1 * vec2(123.34, 456.21));
   p_Hash21_1 += dot(p_Hash21_1, p_Hash21_1 + 45.32);
   Hash21_1_return_value = fract(p_Hash21_1.x * p_Hash21_1.y);
   Hash21_1_has_returned = true;
   Hash21_1_return_value_inlined_3 = Hash21_1_return_value;
   off_sdSpheres_1 = Hash21_1_return_value_inlined_3;
   sphereY_sdSpheres_1 = 0.2 * sin(iTime + 4. + off_sdSpheres_1) + 1.0;
   pos_sdSpheres_1 = vec3(0, sphereY_sdSpheres_1, 0);
   p_sdSpheres_1.xz = mod(p_sdSpheres_1.xz, 2.0) - 1.0;
   sdSpheres_1_return_value = length(p_sdSpheres_1 - pos_sdSpheres_1) - 0.4;
   sdSpheres_1_has_returned = true;
   sdSpheres_1_return_value_inlined_5 = sdSpheres_1_return_value;
   spheres_GetDist_1 = sdSpheres_1_return_value_inlined_5;
   GetDist_1_return_value = min(grid_GetDist_1, spheres_GetDist_1);
   GetDist_1_has_returned = true;
   GetDist_1_return_value_inlined_7 = GetDist_1_return_value;
   p_GetDist_1 = p_GetNormal_1 - e_GetNormal_1.yxy;
   GetDist_1_has_returned = false;
   p_sdGrid_1 = p_GetDist_1;
   sdGrid_1_has_returned = false;
   plane_sdGrid_1 = p_sdGrid_1.y;
   plane_sdGrid_1 += 0.025 * smoothstep(0.05, 0.0, abs(p_sdGrid_1.x - round(p_sdGrid_1.x)));
   plane_sdGrid_1 += 0.025 * smoothstep(0.05, 0.0, abs(p_sdGrid_1.z - round(p_sdGrid_1.z)));
   sdGrid_1_return_value = plane_sdGrid_1;
   sdGrid_1_has_returned = true;
   sdGrid_1_return_value_inlined_4 = sdGrid_1_return_value;
   grid_GetDist_1 = sdGrid_1_return_value_inlined_4;
   p_sdSpheres_1 = p_GetDist_1;
   sdSpheres_1_has_returned = false;
   p_Hash21_1 = round(p_sdSpheres_1.xz);
   Hash21_1_has_returned = false;
   p_Hash21_1 = fract(p_Hash21_1 * vec2(123.34, 456.21));
   p_Hash21_1 += dot(p_Hash21_1, p_Hash21_1 + 45.32);
   Hash21_1_return_value = fract(p_Hash21_1.x * p_Hash21_1.y);
   Hash21_1_has_returned = true;
   Hash21_1_return_value_inlined_3 = Hash21_1_return_value;
   off_sdSpheres_1 = Hash21_1_return_value_inlined_3;
   sphereY_sdSpheres_1 = 0.2 * sin(iTime + 4. + off_sdSpheres_1) + 1.0;
   pos_sdSpheres_1 = vec3(0, sphereY_sdSpheres_1, 0);
   p_sdSpheres_1.xz = mod(p_sdSpheres_1.xz, 2.0) - 1.0;
   sdSpheres_1_return_value = length(p_sdSpheres_1 - pos_sdSpheres_1) - 0.4;
   sdSpheres_1_has_returned = true;
   sdSpheres_1_return_value_inlined_5 = sdSpheres_1_return_value;
   spheres_GetDist_1 = sdSpheres_1_return_value_inlined_5;
   GetDist_1_return_value = min(grid_GetDist_1, spheres_GetDist_1);
   GetDist_1_has_returned = true;
   GetDist_1_return_value_inlined_8 = GetDist_1_return_value;
   p_GetDist_1 = p_GetNormal_1 - e_GetNormal_1.yyx;
   GetDist_1_has_returned = false;
   p_sdGrid_1 = p_GetDist_1;
   sdGrid_1_has_returned = false;
   plane_sdGrid_1 = p_sdGrid_1.y;
   plane_sdGrid_1 += 0.025 * smoothstep(0.05, 0.0, abs(p_sdGrid_1.x - round(p_sdGrid_1.x)));
   plane_sdGrid_1 += 0.025 * smoothstep(0.05, 0.0, abs(p_sdGrid_1.z - round(p_sdGrid_1.z)));
   sdGrid_1_return_value = plane_sdGrid_1;
   sdGrid_1_has_returned = true;
   sdGrid_1_return_value_inlined_4 = sdGrid_1_return_value;
   grid_GetDist_1 = sdGrid_1_return_value_inlined_4;
   p_sdSpheres_1 = p_GetDist_1;
   sdSpheres_1_has_returned = false;
   p_Hash21_1 = round(p_sdSpheres_1.xz);
   Hash21_1_has_returned = false;
   p_Hash21_1 = fract(p_Hash21_1 * vec2(123.34, 456.21));
   p_Hash21_1 += dot(p_Hash21_1, p_Hash21_1 + 45.32);
   Hash21_1_return_value = fract(p_Hash21_1.x * p_Hash21_1.y);
   Hash21_1_has_returned = true;
   Hash21_1_return_value_inlined_3 = Hash21_1_return_value;
   off_sdSpheres_1 = Hash21_1_return_value_inlined_3;
   sphereY_sdSpheres_1 = 0.2 * sin(iTime + 4. + off_sdSpheres_1) + 1.0;
   pos_sdSpheres_1 = vec3(0, sphereY_sdSpheres_1, 0);
   p_sdSpheres_1.xz = mod(p_sdSpheres_1.xz, 2.0) - 1.0;
   sdSpheres_1_return_value = length(p_sdSpheres_1 - pos_sdSpheres_1) - 0.4;
   sdSpheres_1_has_returned = true;
   sdSpheres_1_return_value_inlined_5 = sdSpheres_1_return_value;
   spheres_GetDist_1 = sdSpheres_1_return_value_inlined_5;
   GetDist_1_return_value = min(grid_GetDist_1, spheres_GetDist_1);
   GetDist_1_has_returned = true;
   GetDist_1_return_value_inlined_9 = GetDist_1_return_value;
   GetNormal_1_return_value = normalize(d_GetNormal_1 - vec3(GetDist_1_return_value_inlined_7, GetDist_1_return_value_inlined_8, GetDist_1_return_value_inlined_9));
   GetNormal_1_has_returned = true;
   GetNormal_1_return_value_inlined_16 = GetNormal_1_return_value;
   n_main_1 = GetNormal_1_return_value_inlined_16;
   p_GetLight_1 = reflOri_main_1;
   n_GetLight_1 = n_main_1;
   GetLight_1_has_returned = false;
   l_GetLight_1 = normalize(vec3(10.0, 10.0, 10.0) * vec3(cos(iTime + 4.), 1., sin(iTime + 4.)) - p_GetLight_1);
   diff_GetLight_1 = max(0.0, dot(n_GetLight_1, l_GetLight_1));
   GetLight_1_return_value = diff_GetLight_1;
   GetLight_1_has_returned = true;
   GetLight_1_return_value_inlined_17 = GetLight_1_return_value;
   diff_main_1 = GetLight_1_return_value_inlined_17;
   spec_main_1 += smoothstep(0.975, 1.0, diff_main_1);
   col_main_1 += diff_main_1 * spec_main_1 * pow(max(0.4, 1e-9), float(r_int_main_1));
   reflDir_main_1 = reflect(reflDir_main_1, n_main_1);
  }
 fragColor_1 = vec4(col_main_1, 1.0);
 fragColor_1.w = 1.0;
 fragColor = round(clamp(fragColor_1, vec4(0.0), vec4(1.0)) * 255.0) / 255.0;
 t_main_2 = iTime;
 uv_main_1 = gl_FragCoord.xy / iResolution.xy;
 uv_main_1 -= .5;
 uv_main_1.x *= iResolution.x / iResolution.y;
 m_main_2 = iMouse.xy / iResolution.xy;
 m_main_2 -= .5;
 if(m_main_2.x < - .49 && m_main_2.y < - .49)
  {
   s_main_2 = sin(t_main_2 * .5);
   sphereY_sdSpheres_1 = cos(t_main_2 * .38);
   m_main_2 = vec2(s_main_2, sphereY_sdSpheres_1) * .4;
  }
 if(length(m_main_2) > .707)
  {
   m_main_2 *= 0.;
  }
 diff_main_1 = dot(uv_main_1, uv_main_1);
 uv_main_1 -= m_main_2 * clamp(.23 - diff_main_1, 0., 1.);
 d_main_1 = sin(t_main_2 * .5) * .5 + .5;
 uv_Smiley_2 = uv_main_1;
 m_Smiley_2 = m_main_2;
 dO_RayMarch_1 = d_main_1;
 Hash21_1_has_returned = false;
 col_Smiley_2 = vec4(0.);
 if(length(uv_Smiley_2) < .5)
  {
   GetLight_1_return_value = sign(uv_Smiley_2.x);
   uv_Smiley_2.x = abs(uv_Smiley_2.x);
   uv_Head_2 = uv_Smiley_2;
   sdGrid_1_has_returned = false;
   col_Head_2 = vec4(.9, .65, .1, 1.);
   sdGrid_1_return_value = length(uv_Head_2);
   col_Head_2.a = smoothstep(.5, .49, sdGrid_1_return_value);
   GetDist_1_return_value_inlined_8 = .35;
   r_Hash21Color_1 = .5;
   side_RayMarch_1 = sdGrid_1_return_value;
   GetNormal_1_has_returned = false;
   Hash21_1_return_value_inlined_1 = clamp((side_RayMarch_1 - GetDist_1_return_value_inlined_8) / (r_Hash21Color_1 - GetDist_1_return_value_inlined_8), 0., 1.);
   GetNormal_1_has_returned = true;
   GetDist_1_return_value = Hash21_1_return_value_inlined_1;
   d_GetNormal_1 = GetDist_1_return_value;
   d_GetNormal_1 *= d_GetNormal_1;
   col_Head_2.rgb *= 1. - d_GetNormal_1 * .5;
   col_Head_2.rgb = mix(col_Head_2.rgb, vec3(.6, .3, .1), smoothstep(.47, .48, sdGrid_1_return_value));
   off_sdSpheres_1 = smoothstep(.41, .405, sdGrid_1_return_value);
   spheres_GetDist_1 = .41;
   RayMarch_1_return_value_inlined_12 = - .1;
   GetDist_1_return_value_inlined_7 = .75;
   sdSpheres_1_return_value = 0.;
   GetDist_1_return_value_inlined_6 = uv_Head_2.y;
   Hash21Color_1_has_returned = false;
   plane_sdGrid_1 = clamp((GetDist_1_return_value_inlined_6 - spheres_GetDist_1) / (RayMarch_1_return_value_inlined_12 - spheres_GetDist_1), 0., 1.) * (sdSpheres_1_return_value - GetDist_1_return_value_inlined_7) + GetDist_1_return_value_inlined_7;
   Hash21Color_1_has_returned = true;
   Hash21_1_return_value_inlined_2 = plane_sdGrid_1;
   off_sdSpheres_1 *= Hash21_1_return_value_inlined_2;
   off_sdSpheres_1 *= smoothstep(.18, .19, length(uv_Head_2 - vec2(.21, .08)));
   col_Head_2.rgb = mix(col_Head_2.rgb, vec3(1.), off_sdSpheres_1);
   sdGrid_1_return_value = length(uv_Head_2 - vec2(.25, - .2));
   g_Hash21Color_1 = smoothstep(.2, .01, sdGrid_1_return_value) * .4;
   g_Hash21Color_1 *= smoothstep(.17, .16, sdGrid_1_return_value);
   col_Head_2.rgb = mix(col_Head_2.rgb, vec3(1., .1, .1), g_Hash21Color_1);
   Head_2_return_value = col_Head_2;
   sdGrid_1_has_returned = true;
   Head_2_return_value_inlined_21 = Head_2_return_value;
   head_Smiley_2 = Head_2_return_value_inlined_21;
   col_Smiley_2 = mix(col_Smiley_2, head_Smiley_2, head_Smiley_2.a);
   if(length(uv_Smiley_2 - vec2(.2, .075)) < .175)
    {
     e_GetNormal_1 = uv_Smiley_2;
     rect_within_2 = vec4(.03, - .1, .37, .25);
     RayMarch_1_has_returned = false;
     within_2_return_value = (e_GetNormal_1 - rect_within_2.xy) / (rect_within_2.zw - rect_within_2.xy);
     RayMarch_1_has_returned = true;
     within_2_return_value_inlined_22 = within_2_return_value;
     uv_Eye_2 = within_2_return_value_inlined_22;
     sdGrid_1_return_value_inlined_4 = GetLight_1_return_value;
     mouse_main_1 = m_Smiley_2;
     pitch_main_1 = dO_RayMarch_1;
     offset_1_has_returned = false;
     uv_Eye_2 -= .5;
     uv_Eye_2.x *= sdGrid_1_return_value_inlined_4;
     Hash21_1_return_value = length(uv_Eye_2);
     irisCol_Eye_2 = vec4(.3, .5, 1., 1.);
     col_Eye_2 = mix(vec4(1.), irisCol_Eye_2, smoothstep(.1, .7, Hash21_1_return_value) * .5);
     col_Eye_2.a = smoothstep(.5, .48, Hash21_1_return_value);
     col_Eye_2.rgb *= 1. - smoothstep(.45, .5, Hash21_1_return_value) * .5 * clamp(- uv_Eye_2.y - uv_Eye_2.x * sdGrid_1_return_value_inlined_4, 0., 1.);
     Hash21_1_return_value = length(uv_Eye_2 - mouse_main_1 * .4);
     col_Eye_2.rgb = mix(col_Eye_2.rgb, vec3(0.), smoothstep(.3, .28, Hash21_1_return_value));
     irisCol_Eye_2.rgb *= 1. + smoothstep(.3, .05, Hash21_1_return_value);
     GetLight_1_return_value_inlined_17 = smoothstep(.28, .25, Hash21_1_return_value);
     col_Eye_2.rgb = mix(col_Eye_2.rgb, irisCol_Eye_2.rgb, GetLight_1_return_value_inlined_17);
     Hash21_1_return_value = length(uv_Eye_2 - mouse_main_1 * .45);
     b_Hash21Color_1 = mix(.4, .16, pitch_main_1);
     GetDist_1_return_value_inlined_10 = smoothstep(b_Hash21Color_1, b_Hash21Color_1 * .85, Hash21_1_return_value);
     GetDist_1_return_value_inlined_10 *= GetLight_1_return_value_inlined_17;
     col_Eye_2.rgb = mix(col_Eye_2.rgb, vec3(0.), GetDist_1_return_value_inlined_10);
     yaw_main_1 = iTime * 3.;
     offs_Eye_2 = vec2(sin(yaw_main_1 + uv_Eye_2.y * 25.), sin(yaw_main_1 + uv_Eye_2.x * 25.));
     offs_Eye_2 *= .01 * (1. - pitch_main_1);
     uv_Eye_2 += offs_Eye_2;
     Hash21_1_return_value_inlined_0 = smoothstep(.1, .09, length(uv_Eye_2 - vec2(- .15, .15)));
     Hash21_1_return_value_inlined_0 += smoothstep(.07, .05, length(uv_Eye_2 + vec2(- .08, .08)));
     col_Eye_2.rgb = mix(col_Eye_2.rgb, vec3(1.), Hash21_1_return_value_inlined_0);
     Eye_2_return_value = col_Eye_2;
     offset_1_has_returned = true;
     Eye_2_return_value_inlined_23 = Eye_2_return_value;
     eye_Smiley_2 = Eye_2_return_value_inlined_23;
     col_Smiley_2 = mix(col_Smiley_2, eye_Smiley_2, eye_Smiley_2.a);
    }
   if(length(uv_Smiley_2 - vec2(.0, - .15)) < .3)
    {
     e_GetNormal_1 = uv_Smiley_2;
     rect_within_2 = vec4(- .3, - .43, .3, - .13);
     RayMarch_1_has_returned = false;
     within_2_return_value = (e_GetNormal_1 - rect_within_2.xy) / (rect_within_2.zw - rect_within_2.xy);
     RayMarch_1_has_returned = true;
     p_Hash21_1 = within_2_return_value;
     uv_Mouth_2 = p_Hash21_1;
     grid_GetDist_1 = dO_RayMarch_1;
     GetLight_1_has_returned = false;
     uv_Mouth_2 -= .5;
     col_Mouth_2 = vec4(.5, .18, .05, 1.);
     uv_Mouth_2.y *= 1.5;
     uv_Mouth_2.y -= uv_Mouth_2.x * uv_Mouth_2.x * 2. * grid_GetDist_1;
     uv_Mouth_2.x *= mix(2.5, 1., grid_GetDist_1);
     sdSpheres_1_return_value_inlined_14 = length(uv_Mouth_2);
     col_Mouth_2.a = smoothstep(.5, .48, sdSpheres_1_return_value_inlined_14);
     tUv_Mouth_2 = uv_Mouth_2;
     tUv_Mouth_2.y += (abs(uv_Mouth_2.x) * .5 + .1) * (1. - grid_GetDist_1);
     Hash21_1_return_value_inlined_3 = length(tUv_Mouth_2 - vec2(0., .6));
     ro_RayMarch_1 = vec3(1.) * smoothstep(.6, .35, sdSpheres_1_return_value_inlined_14);
     col_Mouth_2.rgb = mix(col_Mouth_2.rgb, ro_RayMarch_1, smoothstep(.4, .37, Hash21_1_return_value_inlined_3));
     Hash21_1_return_value_inlined_3 = length(uv_Mouth_2 + vec2(0., .5));
     col_Mouth_2.rgb = mix(col_Mouth_2.rgb, vec3(1., .5, .5), smoothstep(.5, .2, Hash21_1_return_value_inlined_3));
     Mouth_2_return_value = col_Mouth_2;
     GetLight_1_has_returned = true;
     Mouth_2_return_value_inlined_25 = Mouth_2_return_value;
     mouth_Smiley_2 = Mouth_2_return_value_inlined_25;
     col_Smiley_2 = mix(col_Smiley_2, mouth_Smiley_2, mouth_Smiley_2.a);
    }
   if(length(uv_Smiley_2 - vec2(.185, .325)) < .18)
    {
     e_GetNormal_1 = uv_Smiley_2;
     rect_within_2 = vec4(.03, .2, .4, .45);
     RayMarch_1_has_returned = false;
     within_2_return_value = (e_GetNormal_1 - rect_within_2.xy) / (rect_within_2.zw - rect_within_2.xy);
     RayMarch_1_has_returned = true;
     within_2_return_value_inlined_26 = within_2_return_value;
     p_Hash21Color_1 = within_2_return_value_inlined_26;
     smile_Brow_2 = dO_RayMarch_1;
     GetDist_1_has_returned = false;
     GetDist_1_return_value_inlined_9 = mix(.2, 0., smile_Brow_2);
     p_Hash21Color_1.y += GetDist_1_return_value_inlined_9;
     dS_RayMarch_1 = p_Hash21Color_1.y;
     p_Hash21Color_1.y += p_Hash21Color_1.x * mix(.5, .8, smile_Brow_2) - mix(.1, .3, smile_Brow_2);
     p_Hash21Color_1.x -= mix(.0, .1, smile_Brow_2);
     p_Hash21Color_1 -= .5;
     col_Brow_2 = vec4(0.);
     sdGrid_1_return_value_inlined_13 = .1;
     d1_Brow_2 = length(p_Hash21Color_1);
     s1_Brow_2 = smoothstep(.45, .45 - sdGrid_1_return_value_inlined_13, d1_Brow_2);
     d2_Brow_2 = length(p_Hash21Color_1 - vec2(.1, - .2) * .7);
     s2_Brow_2 = smoothstep(.5, .5 - sdGrid_1_return_value_inlined_13, d2_Brow_2);
     browMask_Brow_2 = clamp(s1_Brow_2 - s2_Brow_2, 0., 1.);
     GetDist_1_return_value_inlined_8 = .7;
     r_Hash21Color_1 = .8;
     side_RayMarch_1 = dS_RayMarch_1;
     GetNormal_1_has_returned = false;
     Hash21_1_return_value_inlined_1 = clamp((side_RayMarch_1 - GetDist_1_return_value_inlined_8) / (r_Hash21Color_1 - GetDist_1_return_value_inlined_8), 0., 1.);
     GetNormal_1_has_returned = true;
     diff_GetLight_1 = Hash21_1_return_value_inlined_1;
     sdSpheres_1_return_value_inlined_5 = diff_GetLight_1 * .75;
     sdSpheres_1_return_value_inlined_5 *= smoothstep(.6, .9, browMask_Brow_2);
     sdSpheres_1_return_value_inlined_5 *= smile_Brow_2;
     browCol_Brow_2 = mix(vec4(.4, .2, .2, 1.), vec4(1., .75, .5, 1.), sdSpheres_1_return_value_inlined_5);
     p_Hash21Color_1.y += .15 - GetDist_1_return_value_inlined_9 * .5;
     sdGrid_1_return_value_inlined_13 += mix(.0, .1, smile_Brow_2);
     d1_Brow_2 = length(p_Hash21Color_1);
     s1_Brow_2 = smoothstep(.45, .45 - sdGrid_1_return_value_inlined_13, d1_Brow_2);
     d2_Brow_2 = length(p_Hash21Color_1 - vec2(.1, - .2) * .7);
     s2_Brow_2 = smoothstep(.5, .5 - sdGrid_1_return_value_inlined_13, d2_Brow_2);
     RayMarch_1_return_value = clamp(s1_Brow_2 - s2_Brow_2, 0., 1.);
     col_Brow_2 = mix(col_Brow_2, vec4(0., 0., 0., 1.), smoothstep(.0, 1., RayMarch_1_return_value) * .5);
     col_Brow_2 = mix(col_Brow_2, browCol_Brow_2, smoothstep(.2, .4, browMask_Brow_2));
     cs_main_1 = col_Brow_2;
     GetDist_1_has_returned = true;
     Brow_2_return_value_inlined_27 = cs_main_1;
     brow_Smiley_2 = Brow_2_return_value_inlined_27;
     col_Smiley_2 = mix(col_Smiley_2, brow_Smiley_2, brow_Smiley_2.a);
    }
  }
 Smiley_2_return_value = col_Smiley_2;
 Hash21_1_has_returned = true;
 Smiley_2_return_value_inlined_28 = Smiley_2_return_value;
 fragColor_2 = Smiley_2_return_value_inlined_28;
 fragColor_2.w = 1.0;
 fragColor.xyz *= dot((round(clamp(fragColor_2, vec4(0.0), vec4(1.0)) * 255.0) / 255.0).xyz, vec3(1.0)) / 3.0;
 fragColor.xyz = pow(fragColor.xyz, vec3(1.0 / 2.0));
}
